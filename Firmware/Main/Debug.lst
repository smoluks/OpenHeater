
AVRASM ver. 2.1.42  main.asm Tue Dec 24 00:42:44 2019

[builtin](2): Including file 'C:\Program Files (x86)\Labcenter Electronics\Proteus 7 Professional\tools\AVRASM\appnotes\m8def.inc'
main.asm(1): Including file 'RamMapping.asm'
RamMapping.asm(115): Ram used: 0x7A + 10 * 2 + 10 * 8 + 64 + 100
main.asm(23): Including file 'Indication.asm'
main.asm(24): Including file 'ADC.asm'
main.asm(25): Including file 'Systick.asm'
main.asm(26): Including file 'Display.asm'
main.asm(27): Including file 'Buttons.asm'
main.asm(170): Including file 'SelfDiagnostics.asm'
main.asm(171): Including file 'Uart.asm'
main.asm(172): Including file 'Modbus.asm'
main.asm(173): Including file 'ModbusCrc.asm'
main.asm(174): Including file '1Wire.asm'
main.asm(175): Including file '18b20.asm'
18b20.asm(424): Including file 'dallasCrc.asm'
main.asm(176): Including file 'Logic.asm'
main.asm(177): Including file 'I2C.asm'
main.asm(178): Including file 'DS1307.asm'
main.asm(179): Including file 'EEPROM.asm'
                 
                 #include "RamMapping.asm"
                 
                 ;***** Created: 2010-02-25 11:46 ******* Source: ATmega8.xml *************
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m8def.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega8
                 ;* Date              : 2010-02-25
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega8
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M8DEF_INC_
                 #define _M8DEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATmega8
                 #pragma AVRPART ADMIN PART_NAME ATmega8
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x93
                 .equ	SIGNATURE_002	= 0x07
                 
                 #pragma AVRPART CORE CORE_VERSION V2E
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	SPH	= 0x3e
                 .equ	GICR	= 0x3b
                 .equ	GIFR	= 0x3a
                 .equ	TIMSK	= 0x39
                 .equ	TIFR	= 0x38
                 .equ	SPMCR	= 0x37
                 .equ	TWCR	= 0x36
                 .equ	MCUCR	= 0x35
                 .equ	MCUCSR	= 0x34
                 .equ	TCCR0	= 0x33
                 .equ	TCNT0	= 0x32
                 .equ	OSCCAL	= 0x31
                 .equ	SFIOR	= 0x30
                 .equ	TCCR1A	= 0x2f
                 .equ	TCCR1B	= 0x2e
                 .equ	TCNT1L	= 0x2c
                 .equ	TCNT1H	= 0x2d
                 .equ	OCR1AL	= 0x2a
                 .equ	OCR1AH	= 0x2b
                 .equ	OCR1BL	= 0x28
                 .equ	OCR1BH	= 0x29
                 .equ	ICR1L	= 0x26
                 .equ	ICR1H	= 0x27
                 .equ	TCCR2	= 0x25
                 .equ	TCNT2	= 0x24
                 .equ	OCR2	= 0x23
                 .equ	ASSR	= 0x22
                 .equ	WDTCR	= 0x21
                 .equ	UBRRH	= 0x20
                 .equ	UCSRC	= 0x20
                 .equ	EEARL	= 0x1e
                 .equ	EEARH	= 0x1f
                 .equ	EEDR	= 0x1d
                 .equ	EECR	= 0x1c
                 .equ	PORTB	= 0x18
                 .equ	DDRB	= 0x17
                 .equ	PINB	= 0x16
                 .equ	PORTC	= 0x15
                 .equ	DDRC	= 0x14
                 .equ	PINC	= 0x13
                 .equ	PORTD	= 0x12
                 .equ	DDRD	= 0x11
                 .equ	PIND	= 0x10
                 .equ	SPDR	= 0x0f
                 .equ	SPSR	= 0x0e
                 .equ	SPCR	= 0x0d
                 .equ	UDR	= 0x0c
                 .equ	UCSRA	= 0x0b
                 .equ	UCSRB	= 0x0a
                 .equ	UBRRL	= 0x09
                 .equ	ACSR	= 0x08
                 .equ	ADMUX	= 0x07
                 .equ	ADCSRA	= 0x06
                 .equ	ADCL	= 0x04
                 .equ	ADCH	= 0x05
                 .equ	TWDR	= 0x03
                 .equ	TWAR	= 0x02
                 .equ	TWSR	= 0x01
                 .equ	TWBR	= 0x00
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; SFIOR - Special Function IO Register
                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                 
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 
                 ; ***** SPI **************************
                 ; SPDR - SPI Data Register
                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                 
                 ; SPSR - SPI Status Register
                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                 .equ	WCOL	= 6	; Write Collision Flag
                 .equ	SPIF	= 7	; SPI Interrupt Flag
                 
                 ; SPCR - SPI Control Register
                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                 .equ	CPHA	= 2	; Clock Phase
                 .equ	CPOL	= 3	; Clock polarity
                 .equ	MSTR	= 4	; Master/Slave Select
                 .equ	DORD	= 5	; Data Order
                 .equ	SPE	= 6	; SPI Enable
                 .equ	SPIE	= 7	; SPI Interrupt Enable
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; GICR - General Interrupt Control Register
                 .equ	GIMSK	= GICR	; For compatibility
                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                 .equ	IVSEL	= 1	; Interrupt Vector Select
                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                 
                 ; GIFR - General Interrupt Flag Register
                 .equ	INTF0	= 6	; External Interrupt Flag 0
                 .equ	INTF1	= 7	; External Interrupt Flag 1
                 
                 ; MCUCR - MCU Control Register
                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                 
                 ; TCCR0 - Timer/Counter0 Control Register
                 .equ	CS00	= 0	; Clock Select0 bit 0
                 .equ	CS01	= 1	; Clock Select0 bit 1
                 .equ	CS02	= 2	; Clock Select0 bit 2
                 
                 ; TCNT0 - Timer Counter 0
                 .equ	TCNT00	= 0	; Timer Counter 0 bit 0
                 .equ	TCNT01	= 1	; Timer Counter 0 bit 1
                 .equ	TCNT02	= 2	; Timer Counter 0 bit 2
                 .equ	TCNT03	= 3	; Timer Counter 0 bit 3
                 .equ	TCNT04	= 4	; Timer Counter 0 bit 4
                 .equ	TCNT05	= 5	; Timer Counter 0 bit 5
                 .equ	TCNT06	= 6	; Timer Counter 0 bit 6
                 .equ	TCNT07	= 7	; Timer Counter 0 bit 7
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                 .equ	ICF1	= 5	; Input Capture Flag 1
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ	WGM10	= 0	; Waveform Generation Mode
                 .equ	PWM10	= WGM10	; For compatibility
                 .equ	WGM11	= 1	; Waveform Generation Mode
                 .equ	PWM11	= WGM11	; For compatibility
                 .equ	FOC1B	= 2	; Force Output Compare 1B
                 .equ	FOC1A	= 3	; Force Output Compare 1A
                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                 .equ	WGM12	= 3	; Waveform Generation Mode
                 .equ	CTC10	= WGM12	; For compatibility
                 .equ	CTC1	= WGM12	; For compatibility
                 .equ	WGM13	= 4	; Waveform Generation Mode
                 .equ	CTC11	= WGM13	; For compatibility
                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                 
                 
                 ; ***** TIMER_COUNTER_2 **************
                 ; TIMSK - Timer/Counter Interrupt Mask register
                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag Register
                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                 .equ	OCF2	= 7	; Output Compare Flag 2
                 
                 ; TCCR2 - Timer/Counter2 Control Register
                 .equ	CS20	= 0	; Clock Select bit 0
                 .equ	CS21	= 1	; Clock Select bit 1
                 .equ	CS22	= 2	; Clock Select bit 2
                 .equ	WGM21	= 3	; Waveform Generation Mode
                 .equ	CTC2	= WGM21	; For compatibility
                 .equ	COM20	= 4	; Compare Output Mode bit 0
                 .equ	COM21	= 5	; Compare Output Mode bit 1
                 .equ	WGM20	= 6	; Waveform Genration Mode
                 .equ	PWM2	= WGM20	; For compatibility
                 .equ	FOC2	= 7	; Force Output Compare
                 
                 ; TCNT2 - Timer/Counter2
                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                 
                 ; OCR2 - Timer/Counter2 Output Compare Register
                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; ASSR - Asynchronous Status Register
                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                 
                 ; SFIOR - Special Function IO Register
                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                 
                 
                 ; ***** USART ************************
                 ; UDR - USART I/O Data Register
                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSRA - USART Control and Status Register A
                 .equ	USR	= UCSRA	; For compatibility
                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                 .equ	U2X	= 1	; Double the USART transmission speed
                 .equ	UPE	= 2	; Parity Error
                 .equ	PE	= UPE	; For compatibility
                 .equ	DOR	= 3	; Data overRun
                 .equ	FE	= 4	; Framing Error
                 .equ	UDRE	= 5	; USART Data Register Empty
                 .equ	TXC	= 6	; USART Transmitt Complete
                 .equ	RXC	= 7	; USART Receive Complete
                 
                 ; UCSRB - USART Control and Status Register B
                 .equ	UCR	= UCSRB	; For compatibility
                 .equ	TXB8	= 0	; Transmit Data Bit 8
                 .equ	RXB8	= 1	; Receive Data Bit 8
                 .equ	UCSZ2	= 2	; Character Size
                 .equ	CHR9	= UCSZ2	; For compatibility
                 .equ	TXEN	= 3	; Transmitter Enable
                 .equ	RXEN	= 4	; Receiver Enable
                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSRC - USART Control and Status Register C
                 .equ	UCPOL	= 0	; Clock Polarity
                 .equ	UCSZ0	= 1	; Character Size
                 .equ	UCSZ1	= 2	; Character Size
                 .equ	USBS	= 3	; Stop Bit Select
                 .equ	UPM0	= 4	; Parity Mode Bit 0
                 .equ	UPM1	= 5	; Parity Mode Bit 1
                 .equ	UMSEL	= 6	; USART Mode Select
                 .equ	URSEL	= 7	; Register Select
                 
                 .equ	UBRRHI	= UBRRH	; For compatibility
                 
                 ; ***** TWI **************************
                 ; TWBR - TWI Bit Rate register
                 .equ	I2BR	= TWBR	; For compatibility
                 .equ	TWBR0	= 0	; 
                 .equ	TWBR1	= 1	; 
                 .equ	TWBR2	= 2	; 
                 .equ	TWBR3	= 3	; 
                 .equ	TWBR4	= 4	; 
                 .equ	TWBR5	= 5	; 
                 .equ	TWBR6	= 6	; 
                 .equ	TWBR7	= 7	; 
                 
                 ; TWCR - TWI Control Register
                 .equ	I2CR	= TWCR	; For compatibility
                 .equ	TWIE	= 0	; TWI Interrupt Enable
                 .equ	I2IE	= TWIE	; For compatibility
                 .equ	TWEN	= 2	; TWI Enable Bit
                 .equ	I2EN	= TWEN	; For compatibility
                 .equ	ENI2C	= TWEN	; For compatibility
                 .equ	TWWC	= 3	; TWI Write Collition Flag
                 .equ	I2WC	= TWWC	; For compatibility
                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                 .equ	I2STO	= TWSTO	; For compatibility
                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                 .equ	I2STA	= TWSTA	; For compatibility
                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                 .equ	I2EA	= TWEA	; For compatibility
                 .equ	TWINT	= 7	; TWI Interrupt Flag
                 .equ	I2INT	= TWINT	; For compatibility
                 
                 ; TWSR - TWI Status Register
                 .equ	I2SR	= TWSR	; For compatibility
                 .equ	TWPS0	= 0	; TWI Prescaler
                 .equ	TWS0	= TWPS0	; For compatibility
                 .equ	I2GCE	= TWPS0	; For compatibility
                 .equ	TWPS1	= 1	; TWI Prescaler
                 .equ	TWS1	= TWPS1	; For compatibility
                 .equ	TWS3	= 3	; TWI Status
                 .equ	I2S3	= TWS3	; For compatibility
                 .equ	TWS4	= 4	; TWI Status
                 .equ	I2S4	= TWS4	; For compatibility
                 .equ	TWS5	= 5	; TWI Status
                 .equ	I2S5	= TWS5	; For compatibility
                 .equ	TWS6	= 6	; TWI Status
                 .equ	I2S6	= TWS6	; For compatibility
                 .equ	TWS7	= 7	; TWI Status
                 .equ	I2S7	= TWS7	; For compatibility
                 
                 ; TWDR - TWI Data register
                 .equ	I2DR	= TWDR	; For compatibility
                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                 
                 ; TWAR - TWI (Slave) Address register
                 .equ	I2AR	= TWAR	; For compatibility
                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCR - Watchdog Timer Control Register
                 .equ	WDTCSR	= WDTCR	; For compatibility
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDCE	= 4	; Watchdog Change Enable
                 .equ	WDTOE	= WDCE	; For compatibility
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Port B Data Register
                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                 .equ	PB3	= 3	; For compatibility
                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                 .equ	PB4	= 4	; For compatibility
                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                 .equ	PB5	= 5	; For compatibility
                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                 .equ	PB6	= 6	; For compatibility
                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                 .equ	PB7	= 7	; For compatibility
                 
                 ; DDRB - Port B Data Direction Register
                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                 
                 ; PINB - Port B Input Pins
                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                 
                 
                 ; ***** PORTC ************************
                 ; PORTC - Port C Data Register
                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                 .equ	PC0	= 0	; For compatibility
                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                 .equ	PC1	= 1	; For compatibility
                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                 .equ	PC2	= 2	; For compatibility
                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                 .equ	PC3	= 3	; For compatibility
                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                 .equ	PC4	= 4	; For compatibility
                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                 .equ	PC5	= 5	; For compatibility
                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                 .equ	PC6	= 6	; For compatibility
                 
                 ; DDRC - Port C Data Direction Register
                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                 
                 ; PINC - Port C Input Pins
                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                 
                 
                 ; ***** PORTD ************************
                 ; PORTD - Port D Data Register
                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                 .equ	PD0	= 0	; For compatibility
                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                 .equ	PD1	= 1	; For compatibility
                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                 .equ	PD2	= 2	; For compatibility
                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                 .equ	PD3	= 3	; For compatibility
                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                 .equ	PD4	= 4	; For compatibility
                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                 .equ	PD5	= 5	; For compatibility
                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                 .equ	PD6	= 6	; For compatibility
                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                 .equ	PD7	= 7	; For compatibility
                 
                 ; DDRD - Port D Data Direction Register
                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                 
                 ; PIND - Port D Input Pins
                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                 
                 
                 ; ***** EEPROM ***********************
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEWE	= 1	; EEPROM Write Enable
                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                 .equ	EEWEE	= EEMWE	; For compatibility
                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; MCUCR - MCU Control Register
                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 .equ	SM0	= 4	; Sleep Mode Select
                 .equ	SM1	= 5	; Sleep Mode Select
                 .equ	SM2	= 6	; Sleep Mode Select
                 .equ	SE	= 7	; Sleep Enable
                 
                 ; MCUCSR - MCU Control And Status Register
                 .equ	MCUSR	= MCUCSR	; For compatibility
                 .equ	PORF	= 0	; Power-on reset flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; SPMCR - Store Program Memory Control Register
                 .equ	SPMEN	= 0	; Store Program Memory Enable
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                 .equ	RWWSRE	= 4	; Read-While-Write Section Read Enable
                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                 
                 ; SFIOR - Special Function IO Register
                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                 .equ	PUD	= 2	; Pull-up Disable
                 .equ	ADHSM	= 4	; ADC High Speed Mode
                 
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                 .equ	ADLAR	= 5	; Left Adjust Result
                 .equ	REFS0	= 6	; Reference Selection Bit 0
                 .equ	REFS1	= 7	; Reference Selection Bit 1
                 
                 ; ADCSRA - The ADC Control and Status register
                 .equ	ADCSR	= ADCSRA	; For compatibility
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADFR	= 5	; ADC  Free Running Select
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lock bit
                 .equ	LB2	= 1	; Lock bit
                 .equ	BLB01	= 2	; Boot Lock bit
                 .equ	BLB02	= 3	; Boot Lock bit
                 .equ	BLB11	= 4	; Boot lock bit
                 .equ	BLB12	= 5	; Boot lock bit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock Source
                 .equ	CKSEL1	= 1	; Select Clock Source
                 .equ	CKSEL2	= 2	; Select Clock Source
                 .equ	CKSEL3	= 3	; Select Clock Source
                 .equ	SUT0	= 4	; Select start-up time
                 .equ	SUT1	= 5	; Select start-up time
                 .equ	BODEN	= 6	; Brown out detector enable
                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                 
                 ; HIGH fuse bits
                 .equ	BOOTRST	= 0	; Select Reset Vector
                 .equ	BOOTSZ0	= 1	; Select Boot Size
                 .equ	BOOTSZ1	= 2	; Select Boot Size
                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                 .equ	CKOPT	= 4	; Oscillator Options
                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                 .equ	WTDON	= 6	; Enable watchdog
                 .equ	RSTDISBL	= 7	; Disable reset
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x0fff	; Note: Word address
                 .equ	IOEND	= 0x003f
                 .equ	SRAM_START	= 0x0060
                 .equ	SRAM_SIZE	= 1024
                 .equ	RAMEND	= 0x045f
                 .equ	XRAMEND	= 0x0000
                 .equ	E2END	= 0x01ff
                 .equ	EEPROMEND	= 0x01ff
                 .equ	EEADRBITS	= 9
                 #pragma AVRPART MEMORY PROG_FLASH 8192
                 #pragma AVRPART MEMORY EEPROM 512
                 #pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	NRWW_START_ADDR	= 0xc00
                 .equ	NRWW_STOP_ADDR	= 0xfff
                 .equ	RWW_START_ADDR	= 0x0
                 .equ	RWW_STOP_ADDR	= 0xbff
                 .equ	PAGESIZE	= 32
                 .equ	FIRSTBOOTSTART	= 0xf80
                 .equ	SECONDBOOTSTART	= 0xf00
                 .equ	THIRDBOOTSTART	= 0xe00
                 .equ	FOURTHBOOTSTART	= 0xc00
                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0001	; External Interrupt Request 0
                 .equ	INT1addr	= 0x0002	; External Interrupt Request 1
                 .equ	OC2addr	= 0x0003	; Timer/Counter2 Compare Match
                 .equ	OVF2addr	= 0x0004	; Timer/Counter2 Overflow
                 .equ	ICP1addr	= 0x0005	; Timer/Counter1 Capture Event
                 .equ	OC1Aaddr	= 0x0006	; Timer/Counter1 Compare Match A
                 .equ	OC1Baddr	= 0x0007	; Timer/Counter1 Compare Match B
                 .equ	OVF1addr	= 0x0008	; Timer/Counter1 Overflow
                 .equ	OVF0addr	= 0x0009	; Timer/Counter0 Overflow
                 .equ	SPIaddr	= 0x000a	; Serial Transfer Complete
                 .equ	URXCaddr	= 0x000b	; USART, Rx Complete
                 .equ	UDREaddr	= 0x000c	; USART Data Register Empty
                 .equ	UTXCaddr	= 0x000d	; USART, Tx Complete
                 .equ	ADCCaddr	= 0x000e	; ADC Conversion Complete
                 .equ	ERDYaddr	= 0x000f	; EEPROM Ready
                 .equ	ACIaddr	= 0x0010	; Analog Comparator
                 .equ	TWIaddr	= 0x0011	; 2-wire Serial Interface
                 .equ	SPMRaddr	= 0x0012	; Store Program Memory Ready
                 
                 .equ	INT_VECTORS_SIZE	= 19	; size in words
                 
                 #pragma AVRPART CORE INSTRUCTIONS_NOT_SUPPORTED break
                 
                 #endif  /* _M8DEF_INC_ */
                 
                 ; ***** END OF FILE ******************************************************
                 
                 
                 #define MIN_TARGET_TEMP -39
                 #define MAX_TARGET_TEMP 75
                 
                 ;-----------Regs-----------
                 #define CONST_0 r2
                 #define CONST_10 r3
                 
                 #define TCNT0_START 131
                 #define CONST_TCNT0_START r4
                 #define TCCR0_START 0b00000100
                 #define CONST_TCCR0_START r5
                 
                 #define CONST_ADMUX_BUTTONS r6 
                 #define CONST_ADMUX_FEEDBACK1 r7
                 
                 #define CONST_ADMUX_FEEDBACK2 r8
                 #define CONST_ADMUX_FEEDBACK3 r9
                 
                 #define MINUS_1SEG 0b01000000
                 #define CONST_MINUS_1SEG r10
                 #define CONST_BUTTON_IDLE r11
                 
                 #define CONST_5 r12
                 
                 ;Temperature
                 #define TLowL_REG  r18
                 #define TLowH_REG  r19
                 #define THighL_REG  r20
                 #define THighH_REG  r21
                 #define TTARGET_REG r22
                 ;
                 #define ERRORL_REG r23
                 #define ERRORL_NO18B20 0
                 #define ERRORL_SOFTWARE 1
                 #define ERRORL_I2C 2
                 #define ERRORL_FAKE_18B20 3
                 
                 #define ERRORH_REG r24
                 #define ERRORH_CHANNEL1_BREAK 0
                 #define ERRORH_CHANNEL1_ENABLEFAIL 1
                 #define ERRORH_CHANNEL2_BREAK 2
                 #define ERRORH_CHANNEL2_ENABLEFAIL 3
                 #define ERRORH_CHANNEL3_BREAK 4
                 #define ERRORH_CHANNEL3_ENABLEFAIL 5
                 ;
                 #define BUTTONS_REG r25
                 #define BUTTON_PLUS_FLAG 0
                 #define BUTTON_MINUS_FLAG 1
                 #define BUTTON_MODE_FLAG 2
                 #define BUTTON_MENU_FLAG 3
                 #define BUTTON_PLUS_HOLD_FLAG 4
                 #define BUTTON_MINUS_HOLD_FLAG 5
                 #define BUTTON_MODE_HOLD_FLAG 6
                 #define BUTTON_MENU_HOLD_FLAG 7
                 ;
                 #define MODE_REG r26
                 #define MODE_COUNT 5
                 #define MODE_OFF 0
                 #define MODE_1 1
                 #define MODE_2 2
                 #define MODE_3 3
                 #define MODE_FAN 4
                 ;
                 #define DISPLAY_MODE_REG r27
                 #define DISPLAY_MENU_REG r28
                 
                 #define FEEDBACK_REG r29
                 #define FEEDBACK1 0
                 #define FEEDBACK2 1
                 #define FEEDBACK3 2
                 
                 ;-----------RAM-----------
                 #define ACTION 0x60
                 #define ACTION_MODBUS 0
                 ;Display
                 #define SEG1 0x61
                 #define SEG2 0x62 
                 #define SEG3 0x63
                 #define SEG4 0x64
                 #define SEGNUMBER 0x65
                 ;Buttons
                 #define BUTTONS_ADC 0x66
                 #define PREVBUTTONS 0x67
                 #define BUTTON_PLUS_PRESS_COUNT 0x68
                 #define BUTTON_MINUS_PRESS_COUNT 0x69
                 #define BUTTON_MODE_PRESS_COUNT 0x6A
                 #define BUTTON_MENU_PRESS_COUNT 0x6B
                 #define BUTTONS_IDLETIMEOUT 0x6C
                 ;systick
                 #define SYSTICK 0x6D
                 ;modbus
                 #define MODBUS_ADDRESS 0x6E
                 #define RECV_HANDLE_L 0x6F
                 #define RECV_HANDLE_H 0x70
                 #define TRANS_HANDLE_L 0x71
                 #define TRANS_HANDLE_H 0x72
                 #define TRANS_COUNT 0x73
                 #define CRCHI 0x74
                 #define CRCLO 0x75
                 ;i2c
                 #define TEMP1 0x76
                 ;18b20
                 #define D18B20_STATE 0x77
                 #define D18B20_TIMESTAMP 0x78
                 #define D18B20_COUNT 0x79
                 #define D18B20_TEMPERATURES 0x7A
                 #define D18B20_ADDRESSES D18B20_TEMPERATURES + D18B20_MAX_COUNT * 2
                 ;events
                 #define EVENTS_CACHE D18B20_ADDRESSES + D18B20_MAX_COUNT * 8
                 ;uart
                 #define UART_BUFFER EVENTS_CACHE + 64
                 
                 #define ram_size UART_BUFFER+100
                 #message "Ram used:" ram_size
                 
000000 c313      .ORG 0x00 rjmp RESET ; Reset Handler
                 ;.ORG 0x01 rjmp EXT_INT0 ; IRQ0 Handler
                 ;.ORG 0x02 rjmp EXT_INT1 ; IRQ1 Handler
000003 c064      .ORG 0x03 rjmp TIM2_COMP ; Timer2 Compare Handler
000004 c00a      .ORG 0x04 rjmp TIM2_OVF ; Timer2 Overflow Handler
                 ;.ORG 0x05 rjmp TIM1_CAPT ; Timer1 Capture Handler
000006 c0a2      .ORG 0x06 rjmp TIM1_COMPA ; Timer1 CompareA Handler
                 ;.ORG 0x07 rjmp TIM1_COMPB ; Timer1 CompareB Handler
                 ;.ORG 0x08 rjmp TIM1_OVF ; Timer1 Overflow Handler
000009 c3f6      .ORG 0x09 rjmp TIM0_OVF ; Timer0 Overflow Handler
                 ;.ORG 0x0a rjmp SPI_STC ; SPI Transfer Complete Handler
00000b c3c0      .ORG 0x0b rjmp USART_RXC ; USART RX Complete Handler
                 ;.ORG 0x0c rjmp USART_UDRE ; UDR Empty Handler
00000d c3d6      .ORG 0x0d rjmp USART_TXC ; USART TX Complete Handler
00000e c05e      .ORG 0x0e rjmp ADCi ; ADC Conversion Complete Handler
                 ;.ORG 0x0f rjmp EE_RDY ; EEPROM Ready Handler
                 ;.ORG 0x10 rjmp ANA_COMP ; Analog Comparator Handler
                 ;.ORG 0x11 rjmp TWSI ; Two-wire Serial Interface Handler
                 ;.ORG 0x12 rjmp SPM_RDY ; Store Program Memory Ready Handler
                 
                 #include "Indication.asm"
                 
                 TIM2_OVF:
00000f 930f      push r16
000010 931f      push r17
000011 b70f      in r16, SREG
000012 930f      push r16
                 ;
000013 9100 0065 lds r16, SEGNUMBER
000015 9503      inc r16
000016 7003      andi r16, 0b00000011
000017 9300 0065 sts SEGNUMBER, r16
                 ;
000019 3001      cpi r16, 1
00001a f0b1      breq to1
00001b 3002      cpi r16, 2
00001c f131      breq to2
00001d 3003      cpi r16, 3
00001e f1b9      breq to3
                 ;----------SEG1----------
                  ;cbi portb, 5
                  ;
00001f 9100 0061  lds r16, SEG1
000021 780f       andi r16, 0b10001111
000022 bb08       out portb, r16 ;cbi portb, 5 here
                  ;
000023 9100 0061  lds r16, SEG1
000025 0f00       lsl r16
000026 7e00       andi r16, 0b11100000
000027 b312       in r17, portd
000028 701f       andi r17, 0b00001111
000029 2b01       or r16, r17
00002a bb02       out portd, r16
                  ;
00002b 9ac6       sbi portb, 6
                  ;
00002c 910f       pop r16
00002d bf0f       out SREG, r16
00002e 911f       pop r17
00002f 910f       pop r16
000030 9518       reti
                  ;----------SEG2----------
                  to1:
                  ;cbi portb, 6
                  ;
000031 9100 0062  lds r16, SEG2
000033 780f       andi r16, 0b10001111
000034 bb08       out portb, r16 ;cbi portb, 6 here
                  ;
000035 9100 0062  lds r16, SEG2
000037 0f00       lsl r16
000038 7e00       andi r16, 0b11100000
000039 b312       in r17, portd
00003a 701f       andi r17, 0b00001111
00003b 2b01       or r16, r17
00003c bb02       out portd, r16
                  ;
00003d 9a94       sbi portd, 4
                 ;
00003e 910f       pop r16
00003f bf0f       out SREG, r16
000040 911f       pop r17
000041 910f       pop r16
000042 9518       reti
                  ;----------SEG3----------
                  to2:
000043 9894       cbi portd, 4
                  ;
000044 9100 0063  lds r16, SEG3
000046 780f       andi r16, 0b10001111
000047 bb08       out portb, r16
                  ;
000048 9100 0063  lds r16, SEG3
00004a 0f00       lsl r16
00004b 7e00       andi r16, 0b11100000
00004c b312       in r17, portd
00004d 701f       andi r17, 0b00001111
00004e 2b01       or r16, r17
00004f bb02       out portd, r16
                  ;
000050 9ac4       sbi portb, 4 
                 ;
000051 910f       pop r16
000052 bf0f       out SREG, r16
000053 911f       pop r17
000054 910f       pop r16
000055 9518       reti
                  ;----------SEG4----------
                  to3:
                  ;cbi portb, 4
                  ;
000056 9100 0064  lds r16, SEG4
000058 780f       andi r16, 0b10001111
000059 bb08       out portb, r16 ;cbi portb, 4 here
                  ;
00005a 9100 0064  lds r16, SEG4
00005c 0f00       lsl r16
00005d 7e00       andi r16, 0b11100000
00005e b312       in r17, portd
00005f 701f       andi r17, 0b00001111
000060 2b01       or r16, r17
000061 bb02       out portd, r16
                  ;
000062 9ac5       sbi portb, 5
                  ;
000063 910f       pop r16
000064 bf0f       out SREG, r16
000065 911f       pop r17
000066 910f       pop r16
000067 9518       reti
                 
                 TIM2_COMP:
000068 98c4      cbi portb, 4
000069 98c5      cbi portb, 5
00006a 98c6      cbi portb, 6
00006b 9894      cbi portd, 4
                 #include "ADC.asm"
00006c 9518      
                 #define ADMUX_FEEDBACK1 0b01100111
                 #define ADMUX_FEEDBACK2 0b01100001
                 #define ADMUX_FEEDBACK3 0b01100011
                 
                 #define FEEDBACK_LEVEL 0x80
                 
                 ADCi:
00006d 930f      push r16
00006e b70f      in r16, SREG
00006f 930f      push r16
                 ;
000070 b107      in r16, ADMUX
000071 3606      cpi r16, ADMUX_BUTTONS
000072 f061      breq adc_buttons
000073 3607      cpi r16, ADMUX_FEEDBACK1
000074 f099      breq adc_feedback1
000075 3601      cpi r16, ADMUX_FEEDBACK2
000076 f0e1      breq adc_feedback2
000077 3603      cpi r16, ADMUX_FEEDBACK3
000078 f129      breq adc_feedback3
                 ;
000079 b867      out ADMUX, CONST_ADMUX_BUTTONS
00007a 9a36      sbi ADCSRA, ADSC
00007b 910f      pop r16
00007c bf0f      out SREG, r16
00007d 910f      pop r16
00007e 9518      reti
                 
                 ;buttons
                 adc_buttons: 
00007f b105      in r16, ADCH
000080 9300 0066 sts BUTTONS_ADC, r16
000082 b877      out ADMUX, CONST_ADMUX_FEEDBACK1
000083 9a36      sbi ADCSRA, ADSC
                 ;
000084 910f      pop r16
000085 bf0f      out SREG, r16
000086 910f      pop r16
000087 9518      reti
                 
                 adc_feedback1:
000088 7fde      cbr FEEDBACK_REG, 1 << FEEDBACK1
000089 b105      in r16, ADCH
00008a 3800      cpi r16, FEEDBACK_LEVEL
00008b f008      brlo adc1
00008c 60d1       sbr FEEDBACK_REG, 1 << FEEDBACK1
                 adc1: 
00008d b887      out ADMUX, CONST_ADMUX_FEEDBACK2
00008e 9a36      sbi ADCSRA, ADSC
                 ; 
00008f 910f      pop r16
000090 bf0f      out SREG, r16
000091 910f      pop r16
000092 9518      reti
                 
                 adc_feedback2:
000093 7fdd      cbr FEEDBACK_REG, 1 << FEEDBACK2
000094 b105      in r16, ADCH
000095 3800      cpi r16, FEEDBACK_LEVEL
000096 f008      brlo adc2
000097 60d2       sbr FEEDBACK_REG, 1 << FEEDBACK2
                 adc2: 
000098 b897      out ADMUX, CONST_ADMUX_FEEDBACK3
000099 9a36      sbi ADCSRA, ADSC
                 ; 
00009a 910f      pop r16
00009b bf0f      out SREG, r16
00009c 910f      pop r16
00009d 9518      reti
                 
                 adc_feedback3:
00009e 7fdb      cbr FEEDBACK_REG, 1 << FEEDBACK3
00009f b105      in r16, ADCH
0000a0 3800      cpi r16, FEEDBACK_LEVEL
0000a1 f008      brlo adc3
0000a2 60d4       sbr FEEDBACK_REG, 1 << FEEDBACK3
                 adc3: 
0000a3 b867      out ADMUX, CONST_ADMUX_BUTTONS
0000a4 9a36      sbi ADCSRA, ADSC
                 ; 
0000a5 910f      pop r16
0000a6 bf0f      out SREG, r16
0000a7 910f      pop r16
                 #include "Systick.asm"
0000a8 9518      
0000a9 930f      push r16
0000aa 931f      push r17
0000ab b70f      in r16, SREG
0000ac 930f      push r16
                 ;
                 ;
0000ad 9100 006d lds r16, SYSTICK
0000af 9503      inc r16
0000b0 9300 006d sts SYSTICK, r16
                 ;
0000b2 d1f4      rcall process_buttons
                 ;
0000b3 910f      pop r16
0000b4 bf0f      out SREG, r16
0000b5 911f      pop r17
0000b6 910f      pop r16
                 #include "Display.asm"
0000b7 9518      
                 
                 #define DISPLAY_MODE_DEFAULT 0
                 #define DISPLAY_MODE_SETTEMP 1
                 #define DISPLAY_MODE_SETMODE 2
                 #define DISPLAY_MODE_BRIGHTNESS 3
                 #define DISPLAY_MODE_MENU 4
                 
                 #define DISPLAY_MENU_COUNT 2
                 
                 #define DISPLAY_MENU_BRIGHTNESS 0
                 #define DISPLAY_MENU_EXIT 1
                 
                 #define MIN_BRIGHTNESS 0
                 
                 Display_handlers: 
0000b8 00cb      .DW display_default
0000b9 012e      .DW display_settemp
0000ba 0146      .DW display_mode
0000bb 0113      .DW display_brightness
0000bc 00dd      .DW display_menu
                  
                 process_display:
0000bd 30b5      cpi DISPLAY_MODE_REG, DISPLAY_MODE_COUNT
0000be f450      brsh label_error
0000bf e7e0      ldi r30, low(Display_handlers * 2)
0000c0 e0f1      ldi r31, high(Display_handlers * 2)
0000c1 2f0b      mov r16, DISPLAY_MODE_REG
0000c2 0f00      lsl r16
0000c3 0fe0      add r30, r16
0000c4 1df2      adc r31, CONST_0
0000c5 9105      lpm r16, z+
0000c6 9115      lpm r17, z+
0000c7 01f8      movw r30, r16
0000c8 9409      ijmp
                 ;
                 label_error:
0000c9 6072      sbr ERRORL_REG, 1 << ERRORL_SOFTWARE 
0000ca 9508      ret
                 
                 ;-----------default-----------
                 display_default:
                 ;buttons
0000cb fd90      sbrc BUTTONS_REG, BUTTON_PLUS_FLAG
0000cc c002      rjmp pdi3
0000cd ff91      sbrs BUTTONS_REG, BUTTON_MINUS_FLAG
0000ce c001      rjmp pdi4
                 pdi3:
0000cf e0b1       ldi DISPLAY_MODE_REG, DISPLAY_MODE_SETTEMP
                 pdi4:
0000d0 ff92      sbrs BUTTONS_REG, BUTTON_MODE_FLAG
0000d1 c001      rjmp pdi5
0000d2 e0b2       ldi DISPLAY_MODE_REG, DISPLAY_MODE_SETMODE
                 pdi5:
0000d3 ff93      sbrs BUTTONS_REG, BUTTON_MENU_FLAG
0000d4 c001      rjmp pdi6
0000d5 e0b4       ldi DISPLAY_MODE_REG, DISPLAY_MODE_MENU
                 pdi6:
0000d6 2799      clr BUTTONS_REG
                 ;display
0000d7 2377      tst ERRORL_REG
0000d8 f419      brne pdi2
0000d9 2388      tst ERRORH_REG 
0000da f409      brne pdi2
0000db c0fc      rjmp showTemperature
                 pdi2:
0000dc c14e       rjmp showError
                 
                 ;-----------menu---------------
                 display_menu:
                 ;---buttons---
                 ;+
0000dd fd90      sbrc BUTTONS_REG, BUTTON_PLUS_FLAG
0000de c002      rjmp dm_plus
0000df ff94      sbrs BUTTONS_REG, BUTTON_PLUS_HOLD_FLAG
0000e0 c004      rjmp dm1
                  dm_plus:
0000e1 95c3       inc DISPLAY_MENU_REG
0000e2 30c2       cpi DISPLAY_MENU_REG, DISPLAY_MENU_COUNT
0000e3 f008       brlo dm1
0000e4 27cc        clr DISPLAY_MENU_REG
                 dm1:
                 ;-
0000e5 fd91      sbrc BUTTONS_REG, BUTTON_MINUS_FLAG
0000e6 c002      rjmp dm_minus
0000e7 ff95      sbrs BUTTONS_REG, BUTTON_MINUS_HOLD_FLAG
0000e8 c004      rjmp dm2
                  dm_minus:
0000e9 95ca       dec DISPLAY_MENU_REG
0000ea 3fcf       cpi DISPLAY_MENU_REG, -1
0000eb f409       brne dm2
0000ec e0c1        ldi DISPLAY_MENU_REG, DISPLAY_MENU_COUNT-1
                 dm2:
                 ;mode
0000ed ff92      sbrs BUTTONS_REG, BUTTON_MODE_FLAG
0000ee c005      rjmp dm3
0000ef 30c0       cpi DISPLAY_MENU_REG, DISPLAY_MENU_BRIGHTNESS
0000f0 f411       brne dm2_1
                   ;go to brightness
0000f1 e0b3        ldi DISPLAY_MODE_REG, DISPLAY_MODE_BRIGHTNESS
0000f2 c001        rjmp dm3
                  dm2_1:
0000f3 e0b0        ldi DISPLAY_MODE_REG, DISPLAY_MODE_DEFAULT
                   ;rjmp dm3
                 dm3:
                 ;menu
0000f4 ff93      sbrs BUTTONS_REG, BUTTON_MENU_FLAG
0000f5 c001      rjmp dm4
0000f6 e0b0       ldi DISPLAY_MODE_REG, DISPLAY_MODE_DEFAULT
                 dm4:
0000f7 2799      clr BUTTONS_REG
                 ;---display
0000f8 30c0      cpi DISPLAY_MENU_REG, DISPLAY_MENU_BRIGHTNESS
0000f9 f461      brne dm5
                  ;bri
0000fa e60b       ldi r16, 0b01101011
0000fb 9300 0061  sts SEG1, r16
0000fd e402       ldi r16, 0b01000010
0000fe 9300 0062  sts SEG2, r16
000100 e004       ldi r16, 0b00000100
000101 9300 0063  sts SEG3, r16
000103 e000       ldi r16, 0b00000000
000104 9300 0064  sts SEG4, r16
                 dm5:
                  ;exit
000106 e703       ldi r16, 0b01110011
000107 9300 0061  sts SEG1, r16
000109 e702       ldi r16, 0b01110010
00010a 9300 0062  sts SEG2, r16
00010c e004       ldi r16, 0b00000100
00010d 9300 0063  sts SEG3, r16
00010f e807       ldi r16, 0b10000111
000110 9300 0064  sts SEG4, r16
000112 9508      ret  
                 
                 ;-----------set brightness-----------
                 display_brightness:
000113 b503      in r16, OCR2
                 ;buttons
000114 fd90      sbrc BUTTONS_REG, BUTTON_PLUS_FLAG
000115 c002      rjmp pdb1
000116 ff94      sbrs BUTTONS_REG, BUTTON_PLUS_HOLD_FLAG
000117 c005      rjmp pdb3
                  pdb1:
000118 3f0f       cpi r16, 255
000119 f019       breq pdb3
00011a 9503        inc r16
00011b bd03        out OCR2, r16
00011c d87a        rcall ds1307_savetargettemp
                 pdb3:
00011d fd91      sbrc BUTTONS_REG, BUTTON_MINUS_FLAG
00011e c002      rjmp pdb2
00011f ff95      sbrs BUTTONS_REG, BUTTON_MINUS_HOLD_FLAG
000120 c005      rjmp pdb4
                  pdb2:
000121 3000       cpi r16, MIN_BRIGHTNESS
000122 f018       brlo pdb4
000123 950a        dec r16
000124 bd03        out OCR2, r16
000125 d876        rcall ds1307_savebrightness
                 pdb4:
000126 ff92      sbrs BUTTONS_REG, BUTTON_MODE_FLAG
000127 c001      rjmp pdb5
000128 e0b4       ldi DISPLAY_MODE_REG, DISPLAY_MODE_MENU
                 pdb5:
000129 ff93      sbrs BUTTONS_REG, BUTTON_MENU_FLAG
00012a c001      rjmp pdb6
00012b e0b0       ldi DISPLAY_MODE_REG, DISPLAY_MODE_DEFAULT
                 pdb6:
00012c 2799      clr BUTTONS_REG
                 ;display
00012d c084      rjmp showNumber
                 
                 ;-----------set temp-----------
                 display_settemp:
                 ;buttons
00012e fd90      sbrc BUTTONS_REG, BUTTON_PLUS_FLAG
00012f c002      rjmp pdt1
000130 ff94      sbrs BUTTONS_REG, BUTTON_PLUS_HOLD_FLAG
000131 c004      rjmp pdt3
                  pdt1:
000132 346b       cpi TTARGET_REG, MAX_TARGET_TEMP
000133 f414       brge pdt3
000134 9563        inc TTARGET_REG
000135 d861        rcall ds1307_savetargettemp
                 pdt3:
000136 fd91      sbrc BUTTONS_REG, BUTTON_MINUS_FLAG
000137 c002      rjmp pdt2
000138 ff95      sbrs BUTTONS_REG, BUTTON_MINUS_HOLD_FLAG
000139 c004      rjmp pdt4
                  pdt2:
00013a 3d69       cpi TTARGET_REG, MIN_TARGET_TEMP
00013b f014       brlt pdt4
00013c 956a        dec TTARGET_REG
00013d d859        rcall ds1307_savetargettemp
                 pdt4:
00013e ff92      sbrs BUTTONS_REG, BUTTON_MODE_FLAG
00013f c001      rjmp pdt5
000140 e0b2       ldi DISPLAY_MODE_REG, DISPLAY_MODE_SETMODE
                 pdt5:
000141 ff93      sbrs BUTTONS_REG, BUTTON_MENU_FLAG
000142 c001      rjmp pdt6
000143 e0b0       ldi DISPLAY_MODE_REG, DISPLAY_MODE_DEFAULT
                 pdt6:
000144 2799      clr BUTTONS_REG
                 ;display
000145 c052      rjmp showSetTemperature
                 
                  ;-----------mode-----------
                  display_mode:
                  ;buttons
000146 ff91       sbrs BUTTONS_REG, BUTTON_MINUS_FLAG
000147 c001       rjmp pdm3
000148 e0b1        ldi DISPLAY_MODE_REG, DISPLAY_MODE_SETTEMP
                  pdm3:
000149 ff91       sbrs BUTTONS_REG, BUTTON_MINUS_FLAG
00014a c001       rjmp pdm4
00014b e0b1        ldi DISPLAY_MODE_REG, DISPLAY_MODE_SETTEMP
                  pdm4:
00014c ff92       sbrs BUTTONS_REG, BUTTON_MODE_FLAG
00014d c004       rjmp pdm5
00014e 95a3        inc MODE_REG
00014f 30a5        cpi MODE_REG, MODE_COUNT
000150 f008        brlo pdm5
000151 27aa         clr MODE_REG
                 pdm5:
000152 ff93      sbrs BUTTONS_REG, BUTTON_MENU_FLAG
000153 c001      rjmp pdm6
000154 e0b0       ldi DISPLAY_MODE_REG, DISPLAY_MODE_DEFAULT
                 pdm6:
000155 2799       clr BUTTONS_REG
                 ;display
                 showMode:
000156 30a0      cpi MODE_REG, MODE_OFF
000157 f461      brne ccm1
                  ;--MODE_OFF--
000158 9220 0061  sts SEG1, CONST_0
00015a eb0b       ldi r16, 0b10111011
00015b 9300 0062  sts SEG2, r16
00015d e905       ldi r16, 0b10010101
00015e 9300 0063  sts SEG3, r16
000160 e905       ldi r16, 0b10010101
000161 9300 0064  sts SEG4, r16
000163 9508       ret 
                 ccm1:
000164 30a1      cpi MODE_REG, MODE_1
000165 f451      brne ccm2
                  ;--1--
000166 9220 0061  sts SEG1, CONST_0
000168 9220 0062  sts SEG2, CONST_0
00016a 9220 0063  sts SEG3, CONST_0
00016c e208       ldi r16, 0b00101000
00016d 9300 0064  sts SEG4, r16
00016f 9508       ret 
                 ccm2:
000170 30a2      cpi MODE_REG, MODE_2
000171 f451      brne ccm3
                  ;--2--
000172 9220 0061  sts SEG1, CONST_0
000174 9220 0062  sts SEG2, CONST_0
000176 9220 0063  sts SEG3, CONST_0
000178 eb06       ldi r16, 0b10110110
000179 9300 0064  sts SEG4, r16
00017b 9508       ret 
                 ccm3:
00017c 30a3      cpi MODE_REG, MODE_3
00017d f451      brne ccm4
                  ;--3--
00017e 9220 0061  sts SEG1, CONST_0
000180 9220 0062  sts SEG2, CONST_0
000182 9220 0063  sts SEG3, CONST_0
000184 eb0a       ldi r16, 0b10111010
000185 9300 0064  sts SEG4, r16
000187 9508       ret 
                 ccm4:
000188 30a4      cpi MODE_REG, MODE_FAN
000189 f461      brne ccm5
                  ;--FAN--
00018a 9220 0061  sts SEG1, CONST_0
00018c e702       ldi r16, 0b01110010
00018d 9300 0062  sts SEG2, r16
00018f eb0d       ldi r16, 0b10111101
000190 9300 0063  sts SEG3, r16
000192 e30d       ldi r16, 0b00111101
000193 9300 0064  sts SEG4, r16
000195 9508       ret 
                 ccm5:
000196 6072      sbr ERRORL_REG, 1 << ERRORL_SOFTWARE 
000197 9508      ret
                 
                 showSetTemperature:
                 ;-1-
000198 9220 0061 sts SEG1, CONST_0
                 ;-2-
00019a ff67      sbrs TTARGET_REG, 7
00019b c005      rjmp sst1
                  ;<0
00019c 92a0 0062  sts SEG2, CONST_MINUS_1SEG
00019e 2700       clr r16
00019f 1b06       sub r16, TTARGET_REG 
0001a0 c003       rjmp sst0
                 sst1:
                  ;>=0
0001a1 9220 0062  sts SEG2, CONST_0
0001a3 2f06       mov r16, TTARGET_REG
                 sst0:
                 ;-3-
0001a4 2711      clr r17
                 sst2:
0001a5 300a      cpi r16, 10
0001a6 f018      brlo sst3
0001a7 9513       inc r17
0001a8 500a       subi r16, 10
0001a9 cffb       rjmp sst2
                 sst3:
0001aa d0d3      rcall convertnumberto7segment2
0001ab 9310 0063 sts SEG3, r17
                 ;-4-
0001ad 2f10      mov r17, r16
0001ae d0cf      rcall convertnumberto7segment2
0001af 9310 0064 sts SEG4, r17
0001b1 9508      ret
                 
                 showNumber:
                 ;-1-
0001b2 9220 0061 sts SEG1, CONST_0
                 ;-2-
0001b4 2711      clr r17
                 ssn0:
0001b5 3604      cpi r16, 100
0001b6 f018      brlo ssn1
0001b7 9513       inc r17
0001b8 5604       subi r16, 100
0001b9 cffb       rjmp ssn0
                 ssn1:
0001ba 2311      tst r17
0001bb f029      breq ssn1p
0001bc 9468       set
0001bd d0c0       rcall convertnumberto7segment2
0001be 9310 0062  sts SEG2, r17
0001c0 c003       rjmp ssn1n
                 ssn1p:
0001c1 94e8       clt
0001c2 9220 0062  sts SEG2, CONST_0
                 ssn1n:
                 ;-3-
0001c4 2711      clr r17
                 ssn2:
0001c5 300a      cpi r16, 10
0001c6 f018      brlo ssn3
0001c7 9513       inc r17
0001c8 500a       subi r16, 10
0001c9 cffb       rjmp ssn2
                 ssn3:
0001ca f016      brts ssn3t
0001cb 2311      tst r17
0001cc f021      breq ssn3p
                 ssn3t:
0001cd d0b0       rcall convertnumberto7segment2
0001ce 9310 0063  sts SEG3, r17
0001d0 c002       rjmp ssn3n
                 ssn3p: 
0001d1 9220 0063  sts SEG3, CONST_0
                 ssn3n:
                 ;-4-
0001d3 2f10      mov r17, r16
0001d4 d0a9      rcall convertnumberto7segment2
0001d5 9310 0064 sts SEG4, r17
0001d7 9508      ret
                 
                 showTemperature:
0001d8 0189      movw r16, TLowL_REG
0001d9 701f      andi r17, 0b00001111
0001da 7f00      andi r16, 0b11110000
0001db 2b01      or r16, r17
0001dc 9502      swap r16
                 ;
0001dd fd07      sbrc r16, 7
0001de c036      rjmp wt_minus
                 ;+
0001df 3604      cpi r16, 100
0001e0 f4e8      brsh wt_over100
                 ;-----normal-----
0001e1 2711      clr r17
                 wt2:
0001e2 300a      cpi r16, 10
0001e3 f018      brlo wt3
0001e4 9513       inc r17
0001e5 500a       subi r16, 10
0001e6 cffb       rjmp wt2
                 wt3:
0001e7 2311      tst r17
0001e8 f021      breq wt10
0001e9 d06b       rcall convertnumberto7segment1
0001ea 9310 0061  sts SEG1, r17
0001ec c002       rjmp wt11
                 wt10:
0001ed 9220 0061  sts SEG1, r2	
                 wt11:
                 ;
0001ef 2f10      mov r17, r16
0001f0 d064      rcall convertnumberto7segment1
0001f1 6014      ori r17, 0b00000100 ;DP
0001f2 9310 0062 sts SEG2, r17
                 ;-fractional part - TLow / 16 * 10 -
0001f4 2f02      mov r16, TLowL_REG
0001f5 700f      andi r16, 0b00001111
                 ;*10
0001f6 9d03      mul r16, CONST_10
0001f7 2d10      mov r17, r0
                 ;/16
0001f8 9512      swap r17
0001f9 701f      andi r17, 0b00001111
                 ;
0001fa d083      rcall convertnumberto7segment2
0001fb 9310 0063 sts SEG3, r17
0001fd c029      rjmp wt_exit
                 ;----->100-----
                 wt_over100:
0001fe 2711      clr r17
                 wt4:
0001ff 3604      cpi r16, 100
000200 f018      brlo wt5
000201 9513       inc r17
000202 5604       subi r16, 100
000203 cffb       rjmp wt4
                 wt5:
000204 d050      rcall convertnumberto7segment1
000205 9310 0061 sts SEG1, r17
                 ;
000207 2711      clr r17
                 wt6:
000208 300a      cpi r16, 10
000209 f018      brlo wt7
00020a 9513       inc r17
00020b 500a       subi r16, 10
00020c cffb       rjmp wt6
                 wt7:
00020d d047      rcall convertnumberto7segment1
00020e 9310 0062 sts SEG2, r17
                 ;
000210 2f10      mov r17, r16
000211 d06c      rcall convertnumberto7segment2
000212 9310 0063 sts SEG3, r17
000214 c012      rjmp wt_exit
                 ;-----<0-----
                 wt_minus:
                 ;1
000215 92a0 0061 sts SEG1, CONST_MINUS_1SEG
                 ;2
000217 2711      clr r17
000218 1b10      sub r17, r16
000219 2f01      mov r16, r17
                 ;
00021a 2711      clr r17
                 wt8:
00021b 300a      cpi r16, 10
00021c f018      brlo wt9
00021d 9513       inc r17
00021e 500a       subi r16, 10
00021f cffb       rjmp wt8
                 wt9:
000220 d034      rcall convertnumberto7segment1
000221 9310 0062 sts SEG2, r17
                 ;
000223 2f10      mov r17, r16
000224 d059      rcall convertnumberto7segment2
000225 9310 0063 sts SEG3, r17
                 ;
                 wt_exit:
000227 eb11      ldi r17, 0b10110001
000228 9310 0064 sts SEG4, r17
00022a 9508      ret
                 
                 showError:
                 ;1
00022b e703      ldi r16, 0b01110011
00022c 9300 0061 sts SEG1, r16
                 ;
00022e 2700      clr r16
00022f 2f17      mov r17, ERRORL_REG
                 we5:
000230 fd10      sbrc r17, 0
000231 c00c      rjmp we4
000232 9503       inc r16
000233 9516       lsr r17
000234 3008       cpi r16, 8
000235 f7d1       brne we5
000236 2f18      mov r17, ERRORH_REG
                 we6:
000237 fd10      sbrc r17, 0
000238 c005      rjmp we4
000239 9503       inc r16
00023a 9516       lsr r17
00023b 3100       cpi r16, 16
00023c f7d1       brne we6
00023d 2700      clr r16 
                 ;2
                 we4:
00023e 2711      clr r17
                 we0:
00023f 3604      cpi r16, 100
000240 f018      brlo we1
000241 9513       inc r17
000242 5604       subi r16, 100
000243 cffb       rjmp we0
                 we1:
000244 d010      rcall convertnumberto7segment1
000245 9310 0062 sts SEG2, r17
                 ;3
000247 2711      clr r17
                 we2:
000248 300a      cpi r16, 10
000249 f018      brlo we3
00024a 9513       inc r17
00024b 500a       subi r16, 10
00024c cffb       rjmp we2
                 we3:
00024d d030      rcall convertnumberto7segment2
00024e 9310 0063 sts SEG3, r17
                 ;4
000250 2f10      mov r17, r16
000251 d02c      rcall convertnumberto7segment2
000252 9310 0064 sts SEG4, r17
                 ;
000254 9508      ret
                 
                 convertnumberto7segment1:
000255 3010      cpi r17, 0
000256 f411      brne c1
000257 eb1b       ldi r17, 0b10111011
000258 9508       ret
                 c1:
000259 3011      cpi r17, 1
00025a f411      brne c2
00025b e818       ldi r17, 0b10001000
00025c 9508       ret
                 c2:
00025d 3012      cpi r17, 2
00025e f411      brne c3
00025f ed13       ldi r17, 0b11010011
000260 9508       ret
                 c3:
000261 3013      cpi r17, 3
000262 f411      brne c4
000263 ed19       ldi r17, 0b11011001
000264 9508       ret
                 c4:
000265 3014      cpi r17, 4
000266 f411      brne c5
000267 ee18       ldi r17, 0b11101000
000268 9508       ret
                 c5:
000269 3015      cpi r17, 5
00026a f411      brne c6
00026b e719       ldi r17, 0b01111001
00026c 9508       ret
                 c6:
00026d 3016      cpi r17, 6
00026e f411      brne c7
00026f e71b       ldi r17, 0b01111011
000270 9508       ret
                 c7:
000271 3017      cpi r17, 7
000272 f411      brne c8
000273 e918       ldi r17, 0b10011000
000274 9508       ret
                 c8:
000275 3018      cpi r17, 8
000276 f411      brne c9
000277 ef1b       ldi r17, 0b11111011
000278 9508       ret
                 c9:
000279 3019      cpi r17, 9
00027a f411      brne c10
00027b ef19       ldi r17, 0b11111001
00027c 9508       ret
                 c10:
00027d 9508      ret
                 
                 convertnumberto7segment2:
00027e 3010      cpi r17, 0
00027f f411      brne cc1
000280 e31f       ldi r17, 0b00111111
000281 9508       ret
                 cc1:
000282 3011      cpi r17, 1
000283 f411      brne cc2
000284 e218       ldi r17, 0b00101000
000285 9508       ret
                 cc2:
000286 3012      cpi r17, 2
000287 f411      brne cc3
000288 eb16       ldi r17, 0b10110110
000289 9508       ret
                 cc3:
00028a 3013      cpi r17, 3
00028b f411      brne cc4
00028c eb1a       ldi r17, 0b10111010
00028d 9508       ret
                 cc4:
00028e 3014      cpi r17, 4
00028f f411      brne cc5
000290 ea19       ldi r17, 0b10101001
000291 9508       ret
                 cc5:
000292 3015      cpi r17, 5
000293 f411      brne cc6
000294 e91b       ldi r17, 0b10011011
000295 9508       ret
                 cc6:
000296 3016      cpi r17, 6
000297 f411      brne cc7
000298 e91f       ldi r17, 0b10011111
000299 9508       ret
                 cc7:
00029a 3017      cpi r17, 7
00029b f411      brne cc8
00029c e318       ldi r17, 0b00111000
00029d 9508       ret
                 cc8:
00029e 3018      cpi r17, 8
00029f f411      brne cc9
0002a0 eb1f       ldi r17, 0b10111111
0002a1 9508       ret
                 cc9:
0002a2 3019      cpi r17, 9
0002a3 f411      brne cc10
0002a4 eb1b       ldi r17, 0b10111011
0002a5 9508       ret
                 cc10:
                 #include "Buttons.asm"
0002a6 9508      
                 #define BUTTON_IDLE 100
                 
                 process_buttons:
                 ;
0002a7 9100 0066 lds r16, BUTTONS_ADC
0002a9 3d0f      cpi r16, 223
0002aa f0a0      brlo adc0
                  ;buttons released
0002ab 9110 006c  lds r17, BUTTONS_IDLETIMEOUT
0002ad 3011       cpi r17, 1
0002ae f028       brlo prb1
0002af f409       brne prb2
                   ;idle handlers
0002b0 e0b0        ldi DISPLAY_MODE_REG, DISPLAY_MODE_DEFAULT
                  prb2:
0002b1 951a       dec r17
0002b2 92b0 006c  sts BUTTONS_IDLETIMEOUT, CONST_BUTTON_IDLE  
                  prb1:
0002b4 9220 0067  sts PREVBUTTONS, CONST_0
0002b6 9220 0068  sts BUTTON_PLUS_PRESS_COUNT, CONST_0
0002b8 9220 0069  sts BUTTON_MINUS_PRESS_COUNT, CONST_0
0002ba 9220 006a  sts BUTTON_MODE_PRESS_COUNT, CONST_0
0002bc 9220 006b  sts BUTTON_MENU_PRESS_COUNT, CONST_0
0002be 9508       ret
                 ;
                 adc0:
0002bf 92b0 006c sts BUTTONS_IDLETIMEOUT, CONST_BUTTON_IDLE
0002c1 390f      cpi r16, 159
0002c2 f428      brsh menu_btn
0002c3 350f      cpi r16, 95
0002c4 f4b0      brsh mode_btn
0002c5 310f      cpi r16, 31
0002c6 f5d0      brsh minus_btn
0002c7 c026      rjmp plus_btn
                 
                 ;---------- Menu ----------
                 menu_btn:
0002c8 9100 0067 lds r16, PREVBUTTONS
0002ca fd03      sbrc r16, BUTTON_MENU_FLAG
0002cb c005      rjmp adc11
                   ;first press
0002cc 6008        sbr r16, 1 << BUTTON_MENU_FLAG
0002cd 9300 0067   sts PREVBUTTONS, r16
0002cf 6098        sbr BUTTONS_REG, 1 << BUTTON_MENU_FLAG
0002d0 9508        ret
                 adc11:
                   ;long press detect
0002d1 9100 006b   lds r16, BUTTON_MENU_PRESS_COUNT
0002d3 310e        cpi r16, CONST_LONG_PRESS
0002d4 f420        brsh adc12
0002d5 9503         inc r16
0002d6 9300 006b    sts BUTTON_MENU_PRESS_COUNT, r16
0002d8 9508         ret
                   adc12: 
0002d9 6890         sbr BUTTONS_REG, 1 << BUTTON_MENU_HOLD_FLAG
0002da 9508         ret
                 
                  ;---------- Mode ----------
                  mode_btn:
0002db 9100 0067  lds r16, PREVBUTTONS
0002dd fd02       sbrc r16, BUTTON_MODE_FLAG
0002de c005       rjmp adc21
                   ;first press
0002df 6004        sbr r16, 1 << BUTTON_MODE_FLAG
0002e0 9300 0067   sts PREVBUTTONS, r16
0002e2 6094        sbr BUTTONS_REG, 1 << BUTTON_MODE_FLAG
0002e3 9508        ret
                  adc21:
                   ;long press detect
0002e4 9100 006a   lds r16, BUTTON_MODE_PRESS_COUNT
0002e6 310e        cpi r16, CONST_LONG_PRESS
0002e7 f420        brsh adc22
0002e8 9503         inc r16
0002e9 9300 006a    sts BUTTON_MODE_PRESS_COUNT, r16
0002eb 9508         ret
                   adc22: 
0002ec 6490         sbr BUTTONS_REG, 1 << BUTTON_MODE_HOLD_FLAG
0002ed 9508         ret
                 
                 ;---------- + ----------
                 plus_btn: 
0002ee 9100 0067 lds r16, PREVBUTTONS
0002f0 fd00      sbrc r16, BUTTON_PLUS_FLAG
0002f1 c005      rjmp adc31
                  ;first press
0002f2 6001       sbr r16, 1 << BUTTON_PLUS_FLAG
0002f3 9300 0067  sts PREVBUTTONS, r16
0002f5 6091       sbr BUTTONS_REG, 1 << BUTTON_PLUS_FLAG
0002f6 9508       ret
                 adc31:
                  ;long press detect
0002f7 9100 0068  lds r16, BUTTON_PLUS_PRESS_COUNT
0002f9 310e       cpi r16, CONST_LONG_PRESS
0002fa f420       brsh adc32
0002fb 9503         inc r16
0002fc 9300 0068    sts BUTTON_PLUS_PRESS_COUNT, r16
0002fe 9508         ret
                   adc32: 
0002ff 6190         sbr BUTTONS_REG, 1 << BUTTON_PLUS_HOLD_FLAG
000300 9508         ret
                 
                 ;---------- - ----------
                 minus_btn:
000301 9100 0067 lds r16, PREVBUTTONS
000303 fd01      sbrc r16, BUTTON_MINUS_FLAG
000304 c005      rjmp adc41
                  ;first press
000305 6002       sbr r16, 1 << BUTTON_MINUS_FLAG
000306 9300 0067  sts PREVBUTTONS, r16
000308 6092       sbr BUTTONS_REG, 1 << BUTTON_MINUS_FLAG
000309 9508       ret
                 adc41:
                  ;long press detect
00030a 9100 0069  lds r16, BUTTON_MINUS_PRESS_COUNT
00030c 310e       cpi r16, CONST_LONG_PRESS
00030d f420       brsh adc42
00030e 9503        inc r16
00030f 9300 0069   sts BUTTON_MINUS_PRESS_COUNT, r16
000311 9508        ret
                  adc42: 
000312 6290        sbr BUTTONS_REG, 1 << BUTTON_MINUS_HOLD_FLAG
000313 9508        ret
                 
                 RESET:
                 ;----init----
000314 2777      clr ERRORL_REG
000315 2788      clr ERRORH_REG
                 ;stack
000316 e004      ldi r16, high(RAMEND)
000317 bf0e      out SPH, r16
000318 e50f      ldi r16, low(RAMEND)
000319 bf0d      out SPL, r16
                 ;const
00031a 2700      clr r16
00031b e01a      ldi r17, 10
00031c 0118      movw r2, r16
00031d e803      ldi r16, TCNT0_START
00031e e014      ldi r17, TCCR0_START
00031f 0128      movw r4, r16
000320 e606      ldi r16, ADMUX_BUTTONS
000321 e617      ldi r17, ADMUX_FEEDBACK1
000322 0138      movw r6, r16
000323 e601      ldi r16, ADMUX_FEEDBACK2
000324 e613      ldi r17, ADMUX_FEEDBACK3
000325 0148      movw r8, r16
000326 e400      ldi r16, MINUS_1SEG
000327 e614      ldi r17, BUTTON_IDLE
000328 0158      movw r10, r16
000329 e005      ldi r16, 5
00032a 0168      movw r12, r16
                 ;gpio
00032b ef0f      ldi r16, 0b11111111
00032c bb08      out PORTB, r16
00032d ef0f      ldi r16, 0b11111111
00032e bb07      out DDRB, r16
00032f e300      ldi r16, 0b00110000
000330 bb05      out PORTC, r16
000331 e005      ldi r16, 0b00000101
000332 bb04      out DDRC, r16
000333 ef0b      ldi r16, 0b11111011
000334 bb02      out PORTD, r16
000335 ef06      ldi r16, 0b11110110
000336 bb01      out DDRD, r16
                 ;regs
000337 e16c      ldi TTARGET_REG, 28
000338 e090      ldi BUTTONS_REG, 0
000339 e0a0      ldi MODE_REG, MODE_OFF
00033a e0b0      ldi DISPLAY_MODE_REG, 0
00033b e0c0      ldi DISPLAY_MENU_REG, 0
                 ;----ram----
00033c ef0f      ser r16
00033d 9300 0061 sts SEG1, r16
00033f 9300 0062 sts SEG2, r16
000341 9300 0063 sts SEG3, r16
000343 9300 0064 sts SEG4, r16
000345 9220 006c sts BUTTONS_IDLETIMEOUT, CONST_0
000347 9220 0065 sts SEGNUMBER, CONST_0
000349 9220 0067 sts PREVBUTTONS, CONST_0
00034b 9220 0068 sts BUTTON_PLUS_PRESS_COUNT, CONST_0
00034d 9220 0069 sts BUTTON_MINUS_PRESS_COUNT, CONST_0
00034f 9220 006a sts BUTTON_MODE_PRESS_COUNT, CONST_0
000351 9220 006b sts BUTTON_MENU_PRESS_COUNT, CONST_0
000353 9220 0077 sts D18B20_STATE, CONST_0
000355 9220 0079 sts D18B20_COUNT, CONST_0
000357 e10e      ldi r16, low(UART_BUFFER)
000358 9300 006f sts RECV_HANDLE_L, r16
00035a e001      ldi r16, high(UART_BUFFER)
00035b 9300 0070 sts RECV_HANDLE_H, r16
00035d e001      ldi r16, 1
00035e 9300 006e sts MODBUS_ADDRESS, r16
                 ;T0 - modbus timeout 4ms
                 ;T1 - button read  + systick 100 ms
000360 bc2f      out TCCR1A, r2
000361 e00b      ldi r16, 0b00001011
000362 bd0e      out TCCR1B, r16
000363 e300      ldi r16, 0x30
000364 bd0b      out OCR1AH, r16
000365 ed04      ldi r16, 0xD4
000366 bd0a      out OCR1AL, r16
                 ;T2 - indication
000367 bc24      out TCNT2, r2
000368 e800      ldi r16, 128 ;Brightness
000369 bd03      out OCR2, r16
00036a e004      ldi r16, 0b00000100 ;F/64
00036b bd05      out TCCR2, r16
                 ;
00036c ed01      ldi r16, 0b11010001
00036d bf09      out TIMSK, r16
                 ;I2C
00036e e200      ldi r16, 32
00036f b900      out TWBR, r16
000370 b821      out TWSR, CONST_0
000371 e804      ldi r16, 0b10000100
000372 bf06      out TWCR, r16
                 ;UART 9600 ODD
000373 b82b      out UCSRA, CONST_0
000374 ed08      ldi r16, 0b11011000
000375 b90a      out UCSRB, r16
000376 e806      ldi r16, 0b10000110
000377 bd00      out UCSRC, r16
000378 bc20      out UBRRH, CONST_0
000379 e303      ldi r16, 51
00037a b909      out UBRRL, r16
                 ;ADC
00037b e606      ldi r16, ADMUX_BUTTONS
00037c b907      out ADMUX, r16
00037d ed0f      ldi r16, 0b11011111
00037e b906      out ADCSRA, r16
                 ;
00037f d37c      rcall init_18b20
                 ;
000380 d5fd      rcall ds1307_init
                 ;
000381 9478      sei
                 ;
000382 d012      rcall selfdignostics
                 ;----------main-cycle----------
                 main_cycle:
000383 95a8      wdr
                 ;--18b20--
000384 ff70      sbrs ERRORL_REG, ERRORL_NO18B20
000385 c002      rjmp l1
                  ;18b20 not found
000386 d375       rcall init_18b20
000387 c001       rjmp l2
                 l1:
                  ;read 18b20
000388 d390       rcall read_18b20
                 l2:
                 ;--logic--
000389 d52d      rcall logic
                 ;--display--
00038a dd32      rcall process_display
                 ;--modbus--
00038b 9100 0060 lds r16, ACTION
00038d ff00      sbrs r16, ACTION_MODBUS
00038e cff4       rjmp main_cycle
00038f 7f0e      cbr r16, 1 << ACTION_MODBUS
000390 9300 0060 sts ACTION, r16 
000392 d090      rcall process_modbus
000393 9a54      sbi UCSRB, RXEN
000394 cfee      rjmp main_cycle
                 
                 
                 #include "SelfDiagnostics.asm"
                 
                 ;-----check heaters-----
000395 9100 006d lds r16, SYSTICK
000397 9503      inc r16
000398 9503      inc r16
                 s1:
                 ;timeout
000399 9110 006d lds r17, SYSTICK
00039b 1710      cp r17, r16
00039c f0f1      breq s1_timeout
                 ;
00039d 30d7      cpi FEEDBACK_REG, 0b00000111
00039e f7d1      brne s1
                 ;-----check triaks-----
00039f 9aa8      sbi portc, 0
0003a0 9aaa      sbi portc, 2
0003a1 9a92      sbi portd, 2
0003a2 9100 006d lds r16, SYSTICK
0003a4 9503      inc r16
0003a5 9503      inc r16
0003a6 9503      inc r16
                 s2: 
0003a7 9110 006d lds r17, SYSTICK
0003a9 1710      cp r17, r16
0003aa f0b9      breq s2_timeout
                 ;
0003ab 30d0      cpi FEEDBACK_REG, 0b00000000
0003ac f7d1      brne s2
                 ;-----check triaks off-----
0003ad 98a8      cbi portc, 0
0003ae 98aa      cbi portc, 2
0003af 9892      cbi portd, 2
0003b0 9100 006d lds r16, SYSTICK
0003b2 9503      inc r16
0003b3 9503      inc r16
                 s3:
0003b4 9110 006d lds r17, SYSTICK
0003b6 1710      cp r17, r16
0003b7 f019      breq s1_timeout
                 ;
0003b8 30d7      cpi FEEDBACK_REG, 0b00000111
0003b9 f7d1      brne s3
0003ba 9508      ret
                 
                 s1_timeout:
                 ;1
0003bb ffd1      sbrs FEEDBACK_REG, 1
0003bc 6081       sbr ERRORH_REG, 1 << ERRORH_CHANNEL1_BREAK
                 ;2
0003bd ffd2      sbrs FEEDBACK_REG, 2
0003be 6084       sbr ERRORH_REG, 1 << ERRORH_CHANNEL2_BREAK
                 ;3
0003bf ffd3      sbrs FEEDBACK_REG, 3
0003c0 6180       sbr ERRORH_REG, 1 << ERRORH_CHANNEL3_BREAK
0003c1 9508      ret
                 
                 s2_timeout:
                 ;1
0003c2 fdd1      sbrc FEEDBACK_REG, 1
0003c3 6082       sbr ERRORH_REG, 1 << ERRORH_CHANNEL1_ENABLEFAIL
                 ;2
0003c4 fdd2      sbrc FEEDBACK_REG, 2
0003c5 6088       sbr ERRORH_REG, 1 << ERRORH_CHANNEL2_ENABLEFAIL
                 ;3
0003c6 fdd3      sbrc FEEDBACK_REG, 3
0003c7 6280       sbr ERRORH_REG, 1 << ERRORH_CHANNEL3_ENABLEFAIL
                 ;
0003c8 98a8      cbi portc, 0
0003c9 98aa      cbi portc, 2
0003ca 9892      cbi portd, 2
                 #include "Uart.asm"
0003cb 9508      
0003cc 930f      push r16
0003cd 93af      push r26
0003ce 93bf      push r27
0003cf b70f      in r16, SREG
0003d0 930f      push r16
                 ;
0003d1 b10c      in r16, UDR
0003d2 d1a4      rcall acrc
0003d3 91a0 006f lds r26, RECV_HANDLE_L
0003d5 91b0 0070 lds r27, RECV_HANDLE_H
0003d7 930d      st x+, r16
0003d8 93a0 006f sts RECV_HANDLE_L, r26
0003da 93b0 0070 sts RECV_HANDLE_H, r27
                 ;restart T0
0003dc be42      out tcnt0, CONST_TCNT0_START
0003dd be53      out tccr0, CONST_TCCR0_START
                 ;
0003de 910f      pop r16
0003df bf0f      out SREG, r16
0003e0 91bf      pop r27
0003e1 91af      pop r26
0003e2 910f      pop r16
0003e3 9518      reti
                 
                 USART_TXC:
0003e4 930f      push r16
0003e5 93af      push r26
0003e6 93bf      push r27
0003e7 b70f      in r16, SREG
0003e8 930f      push r16
                 ;
0003e9 9100 0073 lds r16, TRANS_COUNT
0003eb 2300      tst r16
0003ec f069      breq utexit
                 ;
0003ed 950a      dec r16
0003ee 9300 0073 sts TRANS_COUNT, r16
                 ;
0003f0 91a0 0071 lds r26, TRANS_HANDLE_L
0003f2 91b0 0072 lds r27, TRANS_HANDLE_H
0003f4 910d      ld r16, X+
0003f5 93a0 0071 sts TRANS_HANDLE_L, r26
0003f7 93b0 0072 sts TRANS_HANDLE_H, r27
0003f9 b90c      out UDR, r16
                 ;
                 utexit:
0003fa 910f      pop r16
0003fb bf0f      out SREG, r16
0003fc 91bf      pop r27
0003fd 91af      pop r26
0003fe 910f      pop r16
0003ff 9518      reti
                 #include "Modbus.asm"
                 
                 #define MODBUS_HOLDING_REGS_COUNT 8
                 
                 #define READ_COILS 0x01
                 #define READ_DISCRETE_INPUTS 0x02
                 #define READ_HOLDING_REGISTERS 0x03
                 #define READ_INPUT_REGISTERS 0x04
                 #define WRITE_SINGLE_COIL 0x05
                 #define WRITE_SINGLE_REGISTER 0x06
                 
                 #define ERROR_ILLEGAL_FUNCTION 0x01
                 #define ERROR_ILLEGAL_DATA_ADDRESS 0x02
                 #define ERROR_ILLEGAL_DATA_VALUE 0x03
                 #define ERROR_SLAVE_DEVICE_FAILURE 0x04
                 #define ERROR_ACKNOWLEDGE 0x05
                 #define ERROR_SLAVE_DEVICE_BUSY 0x06
                 #define ERROR_MEMORY_PARITY ERROR 0x08
                 #define ERROR_GATEWAY_PATH_UNAVAILABLE 0x0A
                 #define ERROR_GATEWAY_TARGET_DEVICE_FAILED_TO_RESPOND 0x0B
                 
                 TIM0_OVF:
000400 930f      push r16
000401 931f      push r17
000402 b70f      in r16, SREG
000403 930f      push r16
                 ;stop t0
000404 be23      out TCCR0, CONST_0
                 ;check crc
                 ;lds r16, CRCHI
                 ;tst r16
                 ;brne t0_ovf_exit
                 ;lds r16, CRCLO
                 ;tst r16
                 ;brne t0_ovf_exit
                 ;check addr
000405 9100 011e lds r16, UART_BUFFER + 0
000407 2300      tst r16
000408 f021      breq t0_ovf_p
000409 9110 006e lds r17, MODBUS_ADDRESS
00040b 1701      cp r16, r17
00040c f431      brne t0_ovf_exit
                 ;
                 t0_ovf_p:
00040d 9854       cbi UCSRB, RXEN
                  ;set modbus process flag
00040e 9100 0060  lds r16, ACTION
000410 6001       sbr r16, 1 << ACTION_MODBUS
000411 9300 0060  sts ACTION, r16
                 t0_ovf_exit:
                 ;repair all for new packet
000413 ef0f      ser r16
000414 9300 0075 sts CRCLO, r16
000416 9300 0074 sts CRCHI, r16
000418 e10e      ldi r16, low(UART_BUFFER)
000419 9300 006f sts RECV_HANDLE_L, r16
00041b e001      ldi r16, high(UART_BUFFER)
00041c 9300 0070 sts RECV_HANDLE_H, r16
                 ;
00041e 910f      pop r16
00041f bf0f      out SREG, r16
000420 911f      pop r17
000421 910f      pop r16
000422 9518      reti
                 
                 process_modbus:
                 ;------select command------
000423 9100 011f lds r16, UART_BUFFER + 1
000425 3004      cpi r16, READ_INPUT_REGISTERS
000426 f411      brne t2c1
000427 d017       rcall readAnalogInput
000428 c00e       rjmp t2end
                 t2c1:
000429 3003      cpi r16, READ_HOLDING_REGISTERS
00042a f411      brne t2c2
00042b d05a       rcall readHoldingRegisters
00042c c00a       rjmp t2end 
                 t2c2:
00042d 3006      cpi r16, WRITE_SINGLE_REGISTER
00042e f431      brne t2c3
00042f d09d       rcall writeSingleRegister
000430 2300       tst r16
000431 f029       breq t2end
000432 2f10        mov r17, r16
000433 d0b5        rcall makeerr
000434 c002        rjmp t2end 
                 t2c3: 
000435 e011      ldi r17, ERROR_ILLEGAL_FUNCTION ;not supported error
000436 d0b2      rcall makeerr
                 t2end:
                 ;set answer handle
000437 e10e      ldi r16, low(UART_BUFFER)
000438 9300 0071 sts TRANS_HANDLE_L, r16
00043a e001      ldi r16, high(UART_BUFFER)
00043b 9300 0072 sts TRANS_HANDLE_H, r16
                 ;start transmit
00043d dfa6      rcall USART_TXC
00043e 9508      ret
                 
                 readAnalogInput:
                 ;check address
00043f 9100 0120 lds r16, UART_BUFFER + 2 ;RegAddrHi
000441 2300      tst r16
000442 f479      brne rai1
000443 9100 0121 lds r16, UART_BUFFER + 3 ;RegAddrLo
000445 300c      cpi r16, MODBUS_INPUT_REGS_COUNT+1
000446 f458      brsh rai1
                 ;check count
000447 9110 0122 lds r17, UART_BUFFER + 4 ;CountHi
000449 2311      tst r17
00044a f439      brne rai1
00044b 9110 0123 lds r17, UART_BUFFER + 5 ;CountLo
00044d 301c      cpi r17, MODBUS_INPUT_REGS_COUNT+1
00044e f418      brsh rai1
                 ;check all
00044f 0f01      add r16, r17
000450 300c      cpi r16, MODBUS_INPUT_REGS_COUNT+1
000451 f010      brlo rai2
                  rai1:	
000452 e012       ldi r17, ERROR_ILLEGAL_DATA_ADDRESS
000453 c095       rjmp makeerr 
                 ;
                 rai2:
000454 932f      push r18
000455 933f      push r19
000456 93ef      push r30
000457 93ff      push r31
                 ;---build packet---
                 ;clean CRC
000458 ef0f      ser r16
000459 9300 0075 sts CRCLO, r16
00045b 9300 0074 sts CRCHI, r16
                 ;address
00045d 9100 006e lds r16, MODBUS_ADDRESS
00045f d117      rcall acrc
                 ;command
000460 9100 011f lds r16, UART_BUFFER+1
000462 d114      rcall acrc
                 ;size
000463 2f01      mov r16, r17
000464 0f00      lsl r16
000465 2f20      mov r18, r16
000466 9300 0120 sts UART_BUFFER+2, r16
000468 d10e      rcall acrc
                 ;data
000469 9130 0121 lds r19, UART_BUFFER + 3 ;RegAddrLo
00046b e2e1      ldi r30, low(UART_BUFFER + 3)
00046c e0f1      ldi r31, high(UART_BUFFER + 3)
                 rai_data_cycle:
00046d 2311       tst r17
00046e f049       breq rai_data_cycle_exit
                  ;
00046f d097       rcall read_input_reg
000470 9301       st z+, r16
000471 d105       rcall acrc
000472 2f01       mov r16, r17
000473 9301       st z+, r16
000474 d102       rcall acrc
                  ;
000475 9533       inc r19
000476 951a       dec r17
000477 cff5       rjmp rai_data_cycle
                 rai_data_cycle_exit:
                 ;crc
000478 9100 0074 lds r16, CRCHI
00047a 9301      st z+, r16
00047b 9100 0075 lds r16, CRCLO
00047d 9301      st z+, r16
                 ;
00047e 0d2c      add r18, CONST_5
00047f 9320 0073 sts TRANS_COUNT, r18
                 ;
000481 91ff      pop r31
000482 91ef      pop r30
000483 913f      pop r19
000484 912f      pop r18
000485 9508      ret
                 
                 readHoldingRegisters:
                 ;check address
000486 9100 0120 lds r16, UART_BUFFER + 2 ;RegAddrHi
000488 2300      tst r16
000489 f479      brne rhr1
00048a 9100 0121 lds r16, UART_BUFFER + 3 ;RegAddrLo
00048c 3009      cpi r16, MODBUS_HOLDING_REGS_COUNT+1
00048d f458      brsh rhr1
                 ;check count
00048e 9110 0122 lds r17, UART_BUFFER + 4 ;CountHi
000490 2311      tst r17
000491 f439      brne rhr1
000492 9110 0123 lds r17, UART_BUFFER + 5 ;CountLo
000494 3019      cpi r17, MODBUS_HOLDING_REGS_COUNT+1
000495 f418      brsh rhr1
                 ;check all
000496 0f01      add r16, r17
000497 3009      cpi r16, MODBUS_HOLDING_REGS_COUNT+1
000498 f010      brlo rhr2
                  rhr1:	
000499 e012       ldi r17, ERROR_ILLEGAL_DATA_ADDRESS
00049a c04e       rjmp makeerr 
                 ;
                 rhr2:
00049b 932f      push r18
00049c 933f      push r19
00049d 93ef      push r30
00049e 93ff      push r31
                 ;---build packet---
                 ;clean CRC
00049f ef0f      ser r16
0004a0 9300 0075 sts CRCLO, r16
0004a2 9300 0074 sts CRCHI, r16
                 ;address
0004a4 9100 011e lds r16, UART_BUFFER+0
0004a6 d0d0      rcall acrc
                 ;command
0004a7 9100 011f lds r16, UART_BUFFER+1
0004a9 d0cd      rcall acrc
                 ;size
0004aa 2f21      mov r18, r17
0004ab 2f01      mov r16, r17
0004ac 0f00      lsl r16
0004ad 9300 0120 sts UART_BUFFER+2, r16
0004af d0c7      rcall acrc
0004b0 0d0c      add r16, CONST_5
0004b1 9300 0073 sts TRANS_COUNT, r16
                 ;data
0004b3 9130 0121 lds r19, UART_BUFFER + 3 ;RegAddrLo
0004b5 e2e1      ldi r30, low(UART_BUFFER + 3)
0004b6 e0f1      ldi r31, high(UART_BUFFER + 3)
                 rhr_data_cycle:
0004b7 2322       tst r18
0004b8 f049       breq rhr_data_cycle_exit
                  ;
0004b9 d066       rcall read_holding_reg
0004ba 9301       st z+, r16
0004bb d0bb       rcall acrc
0004bc 2f01       mov r16, r17
0004bd 9301       st z+, r16
0004be d0b8       rcall acrc
                  ;
0004bf 9533       inc r19
0004c0 952a       dec r18
0004c1 cff5       rjmp rhr_data_cycle
                 rhr_data_cycle_exit:
                 ;crc
0004c2 9100 0074 lds r16, CRCHI
0004c4 9301      st z+, r16
0004c5 9100 0075 lds r16, CRCLO
0004c7 9301      st z+, r16
                 ;
0004c8 91ff      pop r31
0004c9 91ef      pop r30
0004ca 913f      pop r19
0004cb 912f      pop r18
0004cc 9508      ret
                 
                 writeSingleRegister:
0004cd 932f      push r18
                 ;check address
0004ce 9100 0120 lds r16, UART_BUFFER + 2 ;RegAddrHi
0004d0 2300      tst r16
0004d1 f421      brne wsr1
0004d2 9100 0121 lds r16, UART_BUFFER + 3 ;RegAddrLo
0004d4 3009      cpi r16, MODBUS_HOLDING_REGS_COUNT+1
0004d5 f418      brsh wsr2
                 wsr1:	
0004d6 e012       ldi r17, ERROR_ILLEGAL_DATA_ADDRESS
0004d7 d011       rcall makeerr
0004d8 c00e       rjmp wsr_exit
                 ;
                 wsr2:
0004d9 9120 0121 lds r18, UART_BUFFER + 3 ;RegAddrLo
0004db 9110 0122 lds r17, UART_BUFFER + 4 ;Data High
0004dd 9100 0123 lds r16, UART_BUFFER + 5 ;Data Low
0004df d05f      rcall write_single_reg
0004e0 f41e      brtc wsr3
0004e1 e014       ldi r17, ERROR_SLAVE_DEVICE_FAILURE
0004e2 d006       rcall makeerr
0004e3 c003       rjmp wsr_exit
                 ;
                 wsr3:
0004e4 0d2c      add r18, CONST_5
0004e5 9320 0073 sts TRANS_COUNT, r18
                 ;
                 wsr_exit:
0004e7 912f      pop r18
0004e8 9508      ret
                 
                 ;in: error - r17
                 makeerr:
                 ;clear crc
0004e9 ef0f      ser r16
0004ea 9300 0075 sts CRCLO, r16
0004ec 9300 0074 sts CRCHI, r16
                 ;address
0004ee 9100 011e lds r16, UART_BUFFER+0
0004f0 d086      rcall acrc
                 ;command
0004f1 9100 011f lds r16, UART_BUFFER+1
0004f3 6800      sbr r16, 0b10000000
0004f4 9300 011f sts UART_BUFFER+1, r16
0004f6 d080      rcall acrc
                 ;error
0004f7 9310 0120 sts UART_BUFFER+2, r17
0004f9 2f01      mov r16, r17
0004fa d07c      rcall acrc
                 ;crc
0004fb 9100 0074 lds r16, CRCHI
0004fd 9300 0121 sts UART_BUFFER+3, r16
0004ff 9100 0075 lds r16, CRCLO
000501 9300 0122 sts UART_BUFFER+4, r16
                 ;start
000503 e005      ldi r16, 5
000504 9300 0073 sts TRANS_COUNT, r16
                 ;
000506 9508      ret
                 
                 ;in - r19 addr
                 ;out - r16-17 data
                 read_input_reg:
000507 3030      cpi r19, 0
000508 f421      brne ri1
                  ;18b20 count
000509 9100 0079  lds r16, D18B20_COUNT
00050b 2711       clr r17
00050c 9508       ret
                 ri1:
00050d 303c      cpi r19, 12
00050e f470      brsh ri2
                  ;temperatures
00050f 933f       push r19
000510 93ef       push r30
000511 93ff       push r31
                  ;
000512 0f33       lsl r19
000513 e7e8       ldi r30, low(D18B20_TEMPERATURES - 2)
000514 e0f0       ldi r31, high(D18B20_TEMPERATURES - 2)
000515 0fe3       add r30, r19
000516 1df2       adc r31, CONST_0
000517 9101       ld r16, z+
000518 8110       ld r17, z
                  ;
000519 91ff       pop r31
00051a 91ef       pop r30
00051b 913f       pop r19
00051c 9508       ret
                 ri2:
00051d 2700       clr r16
00051e 2711       clr r17 
00051f 9508      ret
                 
                 ;in - r19 addr
                 ;out - r16-17 data
                 read_holding_reg:
000520 3030      cpi r19, 0
000521 f421      brne h1
                  ;modbus address
000522 9110 006e  lds r17, MODBUS_ADDRESS
000524 2700       clr r16
000525 9508       ret
                 h1:
000526 3031      cpi r19, 1
000527 f419      brne h2
                  ;target temperature
000528 2f16       mov r17, TTARGET_REG
000529 2700       clr r16
00052a 9508       ret
                 h2:
00052b 3032      cpi r19, 2
00052c f419      brne h3
                  ;mode
00052d 2f1a       mov r17, MODE_REG
00052e 2700       clr r16
00052f 9508       ret
                 h3: 
000530 3033      cpi r19, 3
000531 f419      brne h4
                  ;brightness
000532 b513       in r17, OCR2
000533 2700       clr r16
000534 9508       ret
                 h4:
000535 3038      cpi r19, 8
000536 f428      brsh h5
                  ;1307 regs
000537 2f13       mov r17, r19
000538 5014       subi r17, 4
000539 0f11       lsl r17
00053a d3bb       rcall i2c_read_pair
00053b 9508       ret
                 h5:
00053c 2700       clr r16
00053d 2711       clr r17 
00053e 9508       ret
                 
                 ;in r18 - addr, r16:17 - data
                 ;out r16 - error 
                 write_single_reg:
00053f 94e8      clt
000540 3020      cpi r18, 0
000541 f439      brne ws1
                  ;---modbus address---
000542 2311       tst r17
000543 f579       brne data_error
000544 9300 006e  sts MODBUS_ADDRESS, r16
000546 d45b       rcall save_modbus_address
000547 2700       clr r16
000548 9508       ret
                 ws1:
000549 3031      cpi r19, 1
00054a f449      brne ws2
                  ;---target temperature---
00054b 2311       tst r17
00054c f531       brne data_error
00054d 3d09       cpi r16, MIN_TARGET_TEMP
00054e f124       brlt data_error
00054f 340c       cpi r16, MAX_TARGET_TEMP+1
000550 f514       brge data_error
000551 2f60       mov TTARGET_REG, r16
000552 2700       clr r16
000553 9508       ret
                 ws2:
000554 3032      cpi r19, 2
000555 f439      brne ws3
                  ;---mode---
000556 2311       tst r17
000557 f4d9       brne data_error
000558 3005       cpi r16, MODE_COUNT
000559 f4c8       brsh data_error
00055a 2fa0       mov MODE_REG, r16
00055b 2700       clr r16
00055c 9508       ret
                 ws3: 
00055d 3033      cpi r19, 3
00055e f441      brne ws4
                  ;---brightness---
00055f 2311       tst r17
000560 f491       brne data_error
000561 3005       cpi r16, MODE_COUNT
000562 f480       brsh data_error
000563 bd03       out OCR2, r16
000564 d437       rcall ds1307_savebrightness
000565 2700       clr r16
000566 9508       ret
                 ws4:
000567 3038      cpi r19, 8
000568 f438      brsh ws5
                  ;1307 regs
000569 2311       tst r17
00056a f441       brne data_error
00056b 2f12       mov r17, r18
00056c d39a       rcall i2c_write
00056d f03e       brts not_ready
00056e 2700       clr r16
00056f 9508       ret
                 ws5:
000570 2700       clr r16
000571 2711       clr r17 
000572 9508       ret
                 data_error:
000573 e003       ldi r16, ERROR_ILLEGAL_DATA_VALUE
000574 9508       ret
                 not_ready:
000575 e006       ldi r16, ERROR_SLAVE_DEVICE_BUSY
                 #include "ModbusCrc.asm"
000576 9508      
                 ;in r16
                 acrc:
000577 930f      push r16
000578 931f      push r17
000579 93ef      push r30
00057a 93ff      push r31
                 ;uIndex = uchCRCHi ^ *adr_buffer++; 
00057b 9110 0074 lds r17, CRCHI
00057d 2701      eor r16, r17
                 ;uchCRCHi = uchCRCLo ^ auchCRCHi[uIndex];
00057e e2e8      ldi r30, low(auchCRCH*2)
00057f e0fb      ldi r31, high(auchCRCH*2)
000580 0fe0      add r30, r16
000581 1df2      adc r31, CONST_0
000582 9114      lpm r17, z
000583 91e0 0075 lds r30, CRCLO
000585 271e      eor r17, r30
000586 9310 0074 sts CRCHI, r17
                 ;uchCRCLo = auchCRCLo[uIndex];
000588 e2e8      ldi r30, low(auchCRCL*2)
000589 e0fc      ldi r31, high(auchCRCL*2)
00058a 0fe0      add r30, r16
00058b 1df2      adc r31, r2
00058c 9114      lpm r17, z
00058d 9310 0075 sts CRCLO, r17
                 ;
00058f 91ff      pop r31
000590 91ef      pop r30
000591 911f      pop r17
000592 910f      pop r16
000593 9508      ret
                 
                 auchCRCH:
000594 c100
000595 4081
000596 c001
000597 4180
000598 c001
000599 4180
00059a c100
00059b 4081      .DB 0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40
00059c c001
00059d 4180
00059e c100
00059f 4081
0005a0 c100
0005a1 4081
0005a2 c001
0005a3 4180      .DB 0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41
0005a4 c001
0005a5 4180
0005a6 c100
0005a7 4081
0005a8 c100
0005a9 4081
0005aa c001
0005ab 4180      .DB 0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41
0005ac c100
0005ad 4081
0005ae c001
0005af 4180
0005b0 c001
0005b1 4180
0005b2 c100
0005b3 4081      .DB 0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40
0005b4 c001
0005b5 4180
0005b6 c100
0005b7 4081
0005b8 c100
0005b9 4081
0005ba c001
0005bb 4180      .DB 0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41
0005bc c100
0005bd 4081
0005be c001
0005bf 4180
0005c0 c001
0005c1 4180
0005c2 c100
0005c3 4081      .DB 0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40
0005c4 c100
0005c5 4081
0005c6 c001
0005c7 4180
0005c8 c001
0005c9 4180
0005ca c100
0005cb 4081      .DB 0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40
0005cc c001
0005cd 4180
0005ce c100
0005cf 4081
0005d0 c100
0005d1 4081
0005d2 c001
0005d3 4180      .DB 0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41
0005d4 c001
0005d5 4180
0005d6 c100
0005d7 4081
0005d8 c100
0005d9 4081
0005da c001
0005db 4180      .DB 0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41
0005dc c100
0005dd 4081
0005de c001
0005df 4180
0005e0 c001
0005e1 4180
0005e2 c100
0005e3 4081      .DB 0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40
0005e4 c100
0005e5 4081
0005e6 c001
0005e7 4180
0005e8 c001
0005e9 4180
0005ea c100
0005eb 4081      .DB 0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40
0005ec c001
0005ed 4180
0005ee c100
0005ef 4081
0005f0 c100
0005f1 4081
0005f2 c001
0005f3 4180      .DB 0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41
0005f4 c100
0005f5 4081
0005f6 c001
0005f7 4180
0005f8 c001
0005f9 4180
0005fa c100
0005fb 4081      .DB 0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40
0005fc c001
0005fd 4180
0005fe c100
0005ff 4081
000600 c100
000601 4081
000602 c001
000603 4180      .DB 0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41
000604 c001
000605 4180
000606 c100
000607 4081
000608 c100
000609 4081
00060a c001
00060b 4180      .DB 0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41
00060c c100
00060d 4081
00060e c001
00060f 4180
000610 c001
000611 4180
000612 c100
000613 4081      .DB 0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40
                 
                 auchCRCL:
000614 c000
000615 01c1
000616 03c3
000617 c202
000618 06c6
000619 c707
00061a c505
00061b 04c4      .DB 0x00,0xC0,0xC1,0x01,0xC3,0x03,0x02,0xC2,0xC6,0x06,0x07,0xC7,0x05,0xC5,0xC4,0x04
00061c 0ccc
00061d cd0d
00061e cf0f
00061f 0ece
000620 ca0a
000621 0bcb
000622 09c9
000623 c808      .DB 0xCC,0x0C,0x0D,0xCD,0x0F,0xCF,0xCE,0x0E,0x0A,0xCA,0xCB,0x0B,0xC9,0x09,0x08,0xC8
000624 18d8
000625 d919
000626 db1b
000627 1ada
000628 de1e
000629 1fdf
00062a 1ddd
00062b dc1c      .DB 0xD8,0x18,0x19,0xD9,0x1B,0xDB,0xDA,0x1A,0x1E,0xDE,0xDF,0x1F,0xDD,0x1D,0x1C,0xDC
00062c d414
00062d 15d5
00062e 17d7
00062f d616
000630 12d2
000631 d313
000632 d111
000633 10d0      .DB 0x14,0xD4,0xD5,0x15,0xD7,0x17,0x16,0xD6,0xD2,0x12,0x13,0xD3,0x11,0xD1,0xD0,0x10
000634 30f0
000635 f131
000636 f333
000637 32f2
000638 f636
000639 37f7
00063a 35f5
00063b f434      .DB 0xF0,0x30,0x31,0xF1,0x33,0xF3,0xF2,0x32,0x36,0xF6,0xF7,0x37,0xF5,0x35,0x34,0xF4
00063c fc3c
00063d 3dfd
00063e 3fff
00063f fe3e
000640 3afa
000641 fb3b
000642 f939
000643 38f8      .DB 0x3C,0xFC,0xFD,0x3D,0xFF,0x3F,0x3E,0xFE,0xFA,0x3A,0x3B,0xFB,0x39,0xF9,0xF8,0x38
000644 e828
000645 29e9
000646 2beb
000647 ea2a
000648 2eee
000649 ef2f
00064a ed2d
00064b 2cec      .DB 0x28,0xE8,0xE9,0x29,0xEB,0x2B,0x2A,0xEA,0xEE,0x2E,0x2F,0xEF,0x2D,0xED,0xEC,0x2C
00064c 24e4
00064d e525
00064e e727
00064f 26e6
000650 e222
000651 23e3
000652 21e1
000653 e020      .DB 0xE4,0x24,0x25,0xE5,0x27,0xE7,0xE6,0x26,0x22,0xE2,0xE3,0x23,0xE1,0x21,0x20,0xE0
000654 60a0
000655 a161
000656 a363
000657 62a2
000658 a666
000659 67a7
00065a 65a5
00065b a464      .DB 0xA0,0x60,0x61,0xA1,0x63,0xA3,0xA2,0x62,0x66,0xA6,0xA7,0x67,0xA5,0x65,0x64,0xA4
00065c ac6c
00065d 6dad
00065e 6faf
00065f ae6e
000660 6aaa
000661 ab6b
000662 a969
000663 68a8      .DB 0x6C,0xAC,0xAD,0x6D,0xAF,0x6F,0x6E,0xAE,0xAA,0x6A,0x6B,0xAB,0x69,0xA9,0xA8,0x68
000664 b878
000665 79b9
000666 7bbb
000667 ba7a
000668 7ebe
000669 bf7f
00066a bd7d
00066b 7cbc      .DB 0x78,0xB8,0xB9,0x79,0xBB,0x7B,0x7A,0xBA,0xBE,0x7E,0x7F,0xBF,0x7D,0xBD,0xBC,0x7C
00066c 74b4
00066d b575
00066e b777
00066f 76b6
000670 b272
000671 73b3
000672 71b1
000673 b070      .DB 0xB4,0x74,0x75,0xB5,0x77,0xB7,0xB6,0x76,0x72,0xB2,0xB3,0x73,0xB1,0x71,0x70,0xB0
000674 9050
000675 5191
000676 5393
000677 9252
000678 5696
000679 9757
00067a 9555
00067b 5494      .DB 0x50,0x90,0x91,0x51,0x93,0x53,0x52,0x92,0x96,0x56,0x57,0x97,0x55,0x95,0x94,0x54
00067c 5c9c
00067d 9d5d
00067e 9f5f
00067f 5e9e
000680 9a5a
000681 5b9b
000682 5999
000683 9858      .DB 0x9C,0x5C,0x5D,0x9D,0x5F,0x9F,0x9E,0x5E,0x5A,0x9A,0x9B,0x5B,0x99,0x59,0x58,0x98
000684 4888
000685 8949
000686 8b4b
000687 4a8a
000688 8e4e
000689 4f8f
00068a 4d8d
00068b 8c4c      .DB 0x88,0x48,0x49,0x89,0x4B,0x8B,0x8A,0x4A,0x4E,0x8E,0x8F,0x4F,0x8D,0x4D,0x4C,0x8C
00068c 8444
00068d 4585
00068e 4787
00068f 8646
000690 4282
000691 8343
000692 8141
000693 4080      .DB 0x44,0x84,0x85,0x45,0x87,0x47,0x46,0x86,0x82,0x42,0x43,0x83,0x41,0x81,0x80,0x40
                 #include "1Wire.asm"
                 
                 ow_reset:
                 ;---init---
000694 930f      push r16
000695 931f      push r17
                 ;Tx
000696 9a8b      sbi ddrd, 3
000697 9893      cbi portd, 3
000698 ed0f      ldi r16, 0xDF
000699 e011      ldi r17, 0x01
00069a d057      rcall ipause
00069b 988b      cbi ddrd, 3
00069c 9a93      sbi portd, 3
                 ;Rx
00069d e30b      ldi r16, 59
00069e 2711      clr r17
00069f d052      rcall ipause
0006a0 9468      set
0006a1 9983      sbic pind, 3
0006a2 c006       rjmp ow_resetexit
0006a3 94e8      clt
0006a4 ea03      ldi r16, 0xA3
0006a5 e011      ldi r17, 0x01
0006a6 d04b      rcall ipause
                 ow_reset1:
0006a7 9b83      sbis pind, 3
0006a8 cffe      rjmp ow_reset1;
                 ;
                 ow_resetexit:
0006a9 911f      pop r17
0006aa 910f      pop r16
0006ab 9508      ret
                 
                 ow_read_bit:
0006ac 930f      push r16
0006ad 931f      push r17
                 ;
0006ae 9893      cbi portd, 3
0006af 9a8b      sbi ddrd, 3
0006b0 d049      rcall pause_1us
                 ;
0006b1 988b      cbi ddrd, 3
0006b2 9a93      sbi portd,3
0006b3 e00c      ldi r16, 12
0006b4 2711      clr r17
0006b5 d03c      rcall ipause
                 ;
0006b6 94e8      clt
0006b7 9983      sbic pind, 3
0006b8 9468      set
                 ;
0006b9 e206      ldi r16, 38
0006ba 2711      clr r17
0006bb d036      rcall ipause
                 ;
                 ;ow_read_bit_wait:
                 ;sbis pind, 3
                 ;rjmp ow_read_bit_wait
                 ;
0006bc 911f      pop r17
0006bd 910f      pop r16
0006be 9508      ret
                 
                 ow_write_bit:
0006bf 930f      push r16 
0006c0 931f      push r17
                 ;
0006c1 9893      cbi portd, 3
0006c2 9a8b      sbi ddrd, 3
0006c3 d036      rcall pause_1us
                 ;
0006c4 f416      brtc w1
0006c5 988b       cbi ddrd, 3
0006c6 9a93       sbi portd, 3 
                 w1:
0006c7 2711      clr r17
0006c8 e306      ldi r16, 54
0006c9 d028      rcall ipause
                 ;
0006ca 988b      cbi ddrd, 3
0006cb 9a93      sbi portd, 3
                 ;
0006cc 911f      pop r17
0006cd 910f      pop r16
0006ce 9508      ret
                 
                 ow_read_byte:
0006cf 931f      push r17
                 ;
0006d0 e018      ldi r17, 8
                 rr1:
0006d1 dfda      rcall ow_read_bit;
0006d2 9507      ror r16
0006d3 f907      bld r16, 7
0006d4 951a      dec r17
0006d5 f7d9      brne rr1;
                 ;
0006d6 911f      pop r17
0006d7 9508      ret
                 
                 ow_write_byte:
0006d8 931f      push r17
                 ;
0006d9 e018      ldi r17, 8
                 rw1:
0006da fb00      bst r16, 0
0006db 9507      ror r16
0006dc dfe2      rcall ow_write_bit;
0006dd 951a      dec r17
0006de f7d9      brne rw1;
                 ;
0006df e005      ldi r16, 5
0006e0 2711      clr r17
0006e1 d010      rcall ipause
0006e2 911f      pop r17
0006e3 9508      ret
                 
                 ow_write_byte_with_check:
0006e4 931f      push r17
                 ;
0006e5 e018      ldi r17, 8
                 rw1c:
0006e6 dfc5      rcall ow_read_bit
0006e7 dfc4      rcall ow_read_bit
0006e8 fb00      bst r16, 0
0006e9 9507      ror r16
0006ea dfd4      rcall ow_write_bit;
0006eb 951a      dec r17
0006ec f7c9      brne rw1c;
                 ;
0006ed e005      ldi r16, 5
0006ee 2711      clr r17
0006ef d002      rcall ipause
0006f0 911f      pop r17
0006f1 9508      ret
                 
                 ipause:
0006f2 0000      nop
0006f3 0000      nop
0006f4 0000      nop
0006f5 0000      nop
0006f6 5001      subi r16, 1
0006f7 0912      sbc r17, r2
0006f8 f7c8      brcc ipause;
0006f9 9508      ret
                 
                 pause_1us:
0006fa 0000      nop
                 #include "18b20.asm"
0006fb 9508      
                 #define MATCH_ROM 0x55
                 #define SEARCH_ROM 0xF0
                 #define ALARM_SEARCH 0xEC
                 #define SKIP_ROM 0xCC
                 
                 #define CONVERT_TEMPERATURE 0x44
                 #define COPY_SCRATCHPAD 0x48
                 #define READ_POWER_SUPPLY 0xB4
                 #define RECALL_E2 0xB8
                 #define READ_SCRATCHPAD 0xBE
                 #define WRITE_SCRATCHPAD 0x4E
                 
                 #define MEAS_TIME 70
                 
                 init_18b20:
0006fc 928f      push r8
0006fd 929f      push r9
0006fe 92af      push r10
0006ff 92bf      push r11
000700 92cf      push r12
000701 92df      push r13
000702 92ef      push r14
000703 92ff      push r15
000704 93ef      push r30
000705 93ff      push r31
                 ;
000706 d072      rcall search_18b20
                 ;
000707 9110 0079 lds r17, D18B20_COUNT
000709 2311      tst r17
00070a f411      brne init_18b20_f
00070b 6071       sbr ERRORL_REG, 1 << ERRORL_NO18B20
00070c c001       rjmp init_18b20_exit
                 init_18b20_f:
00070d d0eb      rcall set_resolution
                 ;
                 init_18b20_exit:
00070e 91ff      pop r31
00070f 91ef      pop r30
000710 90ff      pop r15
000711 90ef      pop r14
000712 90df      pop r13
000713 90cf      pop r12
000714 90bf      pop r11
000715 90af      pop r10
000716 909f      pop r9
000717 908f      pop r8
000718 9508      ret
                 
                 read_18b20:
000719 9100 0077 lds r16, D18B20_STATE
00071b 2300      tst r16
00071c f091      breq r18b20_read
                  ;check delay
00071d 9100 006d  lds r16, SYSTICK
00071f 9110 0078  lds r17, D18B20_TIMESTAMP
000721 1b10       sub r17, r16
000722 ff17       sbrs r17, 7
000723 9508       ret
                  ;start conversion (all)
000724 df6f       rcall ow_reset
000725 f416       brtc r183
000726 6071        sbr ERRORL_REG, 1 << ERRORL_NO18B20
000727 9508        ret
                  r183:
000728 ec0c       ldi r16, SKIP_ROM
000729 dfae       rcall ow_write_byte
00072a e404       ldi r16, CONVERT_TEMPERATURE
00072b dfac       rcall ow_write_byte
                  ;set state
00072c 9220 0077  sts D18B20_STATE, CONST_0
00072e 9508       ret
                 ; 
                 r18b20_read:
00072f df7c      rcall ow_read_bit
000730 f00e      brts r181
                  ;conversation in progress
000731 9508       ret
                 r181:
000732 928f      push r8
000733 929f      push r9
000734 92af      push r10
000735 92bf      push r11
000736 92cf      push r12
000737 92df      push r13
000738 92ef      push r14
000739 92ff      push r15
00073a 936f      push r22
00073b 93cf      push r28
00073c 93df      push r29
00073d 93ef      push r30
00073e 93ff      push r31
                 ;clear current min, max temperature
00073f e73f      ldi TLowH_REG, 0x7F
000740 ef2f      ldi TLowL_REG, 0xFF
000741 e850      ldi THighH_REG, 0x80
000742 e040      ldi THighL_REG, 0x00
                 ;
000743 9160 0079 lds r22, D18B20_COUNT
000745 e7ca      ldi r28, low(D18B20_TEMPERATURES)
000746 e0d0      ldi r29, high(D18B20_TEMPERATURES)
000747 e8ee      ldi r30, low(D18B20_ADDRESSES)
000748 e0f0      ldi r31, high(D18B20_ADDRESSES)
                 ;
                 read_18b20_cycle:
000749 9081      ld r8, z+
00074a 9091      ld r9, z+
00074b 90a1      ld r10, z+
00074c 90b1      ld r11, z+
00074d 90c1      ld r12, z+
00074e 90d1      ld r13, z+
00074f 90e1      ld r14, z+
000750 90f1      ld r15, z+
000751 d0bc      rcall read_single_18b20
000752 f07e      brts read_18b20_fail
                 ;store
000753 9319      st y+, r17
000754 9309      st y+, r16
                 ;
000755 1712      cp r17, TLowL_REG
000756 0703      cpc r16, TLowH_REG
000757 f414      brge read_18b20_low
000758 2f21       mov TLowL_REG, r17
000759 2f30       mov TLowH_REG, r16
                 ;
                 read_18b20_low:
00075a 1714      cp r17, THighL_REG
00075b 0705      cpc r16, THighH_REG
00075c f014      brlt read_18b20_high
00075d 2f41       mov THighL_REG, r17
00075e 2f50       mov THighH_REG, r16 
                 ;
                 read_18b20_high:
00075f 956a      dec r22
000760 f011      breq read_18b20_exit
000761 cfe7      rjmp read_18b20_cycle
                 ;
                 read_18b20_fail:
000762 6071      sbr ERRORL_REG, 1 << ERRORL_NO18B20
                 ;
                 read_18b20_exit:
000763 9100 006d lds r16, SYSTICK
000765 e416      ldi r17, MEAS_TIME
000766 0f01      add r16, r17
000767 9300 0078 sts D18B20_TIMESTAMP, r16
                 ;
000769 9230 0077 sts D18B20_STATE, CONST_10
                 ;
00076b 91ff      pop r31
00076c 91ef      pop r30
00076d 91df      pop r29
00076e 91cf      pop r28
00076f 916f      pop r22
000770 90ff      pop r15
000771 90ef      pop r14
000772 90df      pop r13
000773 90cf      pop r12
000774 90bf      pop r11
000775 90af      pop r10
000776 909f      pop r9
000777 908f      pop r8
                 ;
000778 9508      ret
                 
                 search_18b20:
000779 930f      push r16
00077a 931f      push r17
00077b 932f      push r18
00077c 933f      push r19
00077d 934f      push r20
00077e 938f      push r24
00077f 939f      push r25
000780 93af      push r26
000781 93bf      push r27
000782 93cf      push r28
000783 93df      push r29
000784 93ef      push r30
000785 93ff      push r31
                 ;---search all 18b20---
000786 ef3f      ldi r19, 0xFF ;last cycle last zero-wented branch
                 ;handle to store
000787 e8ee      ldi r30, low(D18B20_ADDRESSES)
000788 e0f0      ldi r31, high(D18B20_ADDRESSES)
                 ;address
000789 2788      clr r24
00078a 2799      clr r25
00078b 27aa      clr r26
00078c 27bb      clr r27
00078d 27cc      clr r28
00078e 27dd      clr r29
                 ;
                 search_cycle:
00078f 014c        movw r8, r24
000790 015d        movw r10, r26
000791 016e        movw r12, r28
000792 e320        ldi r18, 48
000793 2744        clr r20 ;current cycle last zero-wented branch
                   ;
000794 deff        rcall ow_reset
000795 ef00        ldi r16, SEARCH_ROM
000796 df41        rcall ow_write_byte
000797 e208        ldi r16, 0x28
000798 df4b        rcall ow_write_byte_with_check
000799 f40e        brtc search0
00079a c050         rjmp search_exit
                   search0: 
                   ;-----bit cycle------
                   search_bit_cycle:
00079b 2711          clr r17
                     ;old value bit
00079c 94d7          ror r13
00079d 94c7          ror r12
00079e 94b7          ror r11
00079f 94a7          ror r10
0007a0 9497          ror r9
0007a1 9487          ror r8
0007a2 f408          brcc search1
0007a3 6011           sbr r17, 0b00000001
                     search1:
                   ;----- read -----
0007a4 df07        rcall ow_read_bit
0007a5 f42e        brtc search2
0007a6 df05          rcall ow_read_bit
0007a7 f40e          brtc search3
                     ;none present
0007a8 c042           rjmp search_exit
                     search3:
                      ;one present
0007a9 9408           sec
0007aa c011           rjmp search_savebit 
                   search2:
0007ab df00          rcall ow_read_bit
0007ac f416          brtc search4
                     ;zero present
0007ad 9488           clc
0007ae c00d           rjmp search_savebit
                     search4:
                      ;both present
0007af 1723           cp r18, r19
0007b0 f051           breq search_curr
0007b1 f418           brsh search_out
                       ;it's branch inside current - use default
0007b2 2f42            mov r20, r18
0007b3 9488            clc ;go to one
0007b4 c007            rjmp search_savebit
                      search_out:
                      ;it's brach outside current - use stored
0007b5 9408           sec
0007b6 fd10           sbrc r17, 0
0007b7 c004           rjmp search_savebit
0007b8 2f42            mov r20, r18
0007b9 9488            clc
0007ba c001            rjmp search_savebit
                      search_curr:
                       ;-current bit - branch-
0007bb 9408            sec
                       ;rjmp search_savebit
                 search_savebit:
0007bc 95d7      ror r29
0007bd 95c7      ror r28
0007be 95b7      ror r27
0007bf 95a7      ror r26
0007c0 9597      ror r25
0007c1 9587      ror r24
0007c2 94e8      clt
0007c3 fdd7      sbrc r29, 7
0007c4 9468       set
0007c5 def9      rcall ow_write_bit
                 ;
0007c6 952a      dec r18
0007c7 f699      brne search_bit_cycle
                 ;-----save-----
0007c8 2711      clr r17
0007c9 e208      ldi r16, 0x28
0007ca d0df      rcall calculate_dallas_crc
0007cb 2f08      mov r16, r24
0007cc d0dd      rcall calculate_dallas_crc
0007cd 2f09      mov r16, r25
0007ce d0db      rcall calculate_dallas_crc
0007cf 2f0a      mov r16, r26
0007d0 d0d9      rcall calculate_dallas_crc
0007d1 2f0b      mov r16, r27
0007d2 d0d7      rcall calculate_dallas_crc
0007d3 2f0c      mov r16, r28
0007d4 d0d5      rcall calculate_dallas_crc
0007d5 2f0d      mov r16, r29
0007d6 d0d3      rcall calculate_dallas_crc
                 ;check crc
                 ;mov r16, r17
                 ;rcall ow_write_byte_with_check
                 ;brts 
                 ;-----save-----
                 ;device id
0007d7 e208      ldi r16, 0x28
0007d8 9301      st z+, r16
                 ;addr
0007d9 9381      st z+, r24
0007da 9391      st z+, r25
0007db 93a1      st z+, r26
0007dc 93b1      st z+, r27
0007dd 93c1      st z+, r28
0007de 93d1      st z+, r29
                 ;crc
0007df 9311      st z+, r17
                 ;
0007e0 9100 0079 lds r16, D18B20_COUNT
0007e2 9503      inc r16
0007e3 9300 0079 sts D18B20_COUNT, r16
0007e5 300a      cpi r16, D18B20_MAX_COUNT
0007e6 f021      breq search_exit
                 ;---
0007e7 2f34      mov r19, r20
0007e8 2344      tst r20
0007e9 f009      breq search_exit;no more branch
0007ea cfa4      rjmp search_cycle
                 ;save
                 search_exit:
                 ;
0007eb 91ff      pop r31
0007ec 91ef      pop r30
0007ed 91df      pop r29
0007ee 91cf      pop r28
0007ef 91bf      pop r27
0007f0 91af      pop r26
0007f1 919f      pop r25
0007f2 918f      pop r24
0007f3 914f      pop r20
0007f4 913f      pop r19
0007f5 912f      pop r18
0007f6 911f      pop r17
0007f7 910f      pop r16
0007f8 9508      ret
                 
                 set_resolution:
0007f9 de9a      rcall ow_reset
0007fa f40e      brtc i180
0007fb 9508       ret
                 i180:
0007fc ec0c      ldi r16, SKIP_ROM
0007fd deda      rcall ow_write_byte
                 ;
0007fe e40e      ldi r16, WRITE_SCRATCHPAD
0007ff ded8      rcall ow_write_byte
000800 2700      clr r16
000801 ded6      rcall ow_write_byte
000802 2700      clr r16
000803 ded4      rcall ow_write_byte
000804 e70f      ldi r16, 0b01111111
000805 ded2      rcall ow_write_byte
                 ;---read scrathpad---
                 .IFDEF CHECK_18B20_GENUINE
                 .ENDIF
                 ;start conversion
000806 de8d      rcall ow_reset
000807 f40e      brtc i182
000808 9508       ret
                 i182:
000809 ec0c      ldi r16, SKIP_ROM
00080a decd      rcall ow_write_byte
00080b e404      ldi r16, CONVERT_TEMPERATURE
00080c decb      rcall ow_write_byte
                 ;
00080d 9508      ret
                 
                 ;in r8-r15 - addr
                 ;out r17:16 - temp, T - error
                 read_single_18b20:
                 ;
00080e de85      rcall ow_reset
00080f f40e      brtc r182
000810 9508       ret
                 r182:
000811 e505      ldi r16, MATCH_ROM
000812 dec5      rcall ow_write_byte
000813 2d08      mov r16, r8
000814 dec3      rcall ow_write_byte
000815 2d09      mov r16, r9
000816 dec1      rcall ow_write_byte
000817 2d0a      mov r16, r10
000818 debf      rcall ow_write_byte
000819 2d0b      mov r16, r11
00081a debd      rcall ow_write_byte
00081b 2d0c      mov r16, r12
00081c debb      rcall ow_write_byte
00081d 2d0d      mov r16, r13
00081e deb9      rcall ow_write_byte
00081f 2d0e      mov r16, r14
000820 deb7      rcall ow_write_byte
000821 2d0f      mov r16, r15
000822 deb5      rcall ow_write_byte
                 ;
000823 eb0e      ldi r16, READ_SCRATCHPAD
000824 deb3      rcall ow_write_byte
                 ;
000825 dea9      rcall ow_read_byte
000826 2f10      mov r17, r16
                 ;
000827 dea7      rcall ow_read_byte
                 ;
000828 94e8      clt
000829 9508      ret
                 
                 #include "dallasCrc.asm"
                 
00082a 5e00
00082b e2bc
00082c 3f61
00082d 83dd      .DB 0x00, 0x5e, 0xbc, 0xe2, 0x61, 0x3f, 0xdd, 0x83
00082e 9cc2
00082f 207e
000830 fda3
000831 411f      .DB 0xc2, 0x9c, 0x7e, 0x20, 0xa3, 0xfd, 0x1f, 0x41
000832 c39d
000833 7f21
000834 a2fc
000835 1e40      .DB 0x9d, 0xc3, 0x21, 0x7f, 0xfc, 0xa2, 0x40, 0x1e
000836 015f
000837 bde3
000838 603e
000839 dc82      .DB 0x5f, 0x01, 0xe3, 0xbd, 0x3e, 0x60, 0x82, 0xdc
00083a 7d23
00083b c19f
00083c 1c42
00083d a0fe      .DB 0x23, 0x7d, 0x9f, 0xc1, 0x42, 0x1c, 0xfe, 0xa0
00083e bfe1
00083f 035d
000840 de80
000841 623c      .DB 0xe1, 0xbf, 0x5d, 0x03, 0x80, 0xde, 0x3c, 0x62
000842 e0be
000843 5c02
000844 81df
000845 3d63      .DB 0xbe, 0xe0, 0x02, 0x5c, 0xdf, 0x81, 0x63, 0x3d
000846 227c
000847 9ec0
000848 431d
000849 ffa1      .DB 0x7c, 0x22, 0xc0, 0x9e, 0x1d, 0x43, 0xa1, 0xff
00084a 1846
00084b a4fa
00084c 7927
00084d c59b      .DB 0x46, 0x18, 0xfa, 0xa4, 0x27, 0x79, 0x9b, 0xc5
00084e da84
00084f 6638
000850 bbe5
000851 0759      .DB 0x84, 0xda, 0x38, 0x66, 0xe5, 0xbb, 0x59, 0x07
000852 85db
000853 3967
000854 e4ba
000855 5806      .DB 0xdb, 0x85, 0x67, 0x39, 0xba, 0xe4, 0x06, 0x58
000856 4719
000857 fba5
000858 2678
000859 9ac4      .DB 0x19, 0x47, 0xa5, 0xfb, 0x78, 0x26, 0xc4, 0x9a
00085a 3b65
00085b 87d9
00085c 5a04
00085d e6b8      .DB 0x65, 0x3b, 0xd9, 0x87, 0x04, 0x5a, 0xb8, 0xe6
00085e f9a7
00085f 451b
000860 98c6
000861 247a      .DB 0xa7, 0xf9, 0x1b, 0x45, 0xc6, 0x98, 0x7a, 0x24
000862 a6f8
000863 1a44
000864 c799
000865 7b25      .DB 0xf8, 0xa6, 0x44, 0x1a, 0x99, 0xc7, 0x25, 0x7b
000866 643a
000867 d886
000868 055b
000869 b9e7      .DB 0x3a, 0x64, 0x86, 0xd8, 0x5b, 0x05, 0xe7, 0xb9
00086a d28c
00086b 6e30
00086c b3ed
00086d 0f51      .DB 0x8c, 0xd2, 0x30, 0x6e, 0xed, 0xb3, 0x51, 0x0f
00086e 104e
00086f acf2
000870 712f
000871 cd93      .DB 0x4e, 0x10, 0xf2, 0xac, 0x2f, 0x71, 0x93, 0xcd
000872 4f11
000873 f3ad
000874 2e70
000875 92cc      .DB 0x11, 0x4f, 0xad, 0xf3, 0x70, 0x2e, 0xcc, 0x92
000876 8dd3
000877 316f
000878 ecb2
000879 500e      .DB 0xd3, 0x8d, 0x6f, 0x31, 0xb2, 0xec, 0x0e, 0x50
00087a f1af
00087b 4d13
00087c 90ce
00087d 2c72      .DB 0xaf, 0xf1, 0x13, 0x4d, 0xce, 0x90, 0x72, 0x2c
00087e 336d
00087f 8fd1
000880 520c
000881 eeb0      .DB 0x6d, 0x33, 0xd1, 0x8f, 0x0c, 0x52, 0xb0, 0xee
000882 6c32
000883 d08e
000884 0d53
000885 b1ef      .DB 0x32, 0x6c, 0x8e, 0xd0, 0x53, 0x0d, 0xef, 0xb1
000886 aef0
000887 124c
000888 cf91
000889 732d      .DB 0xf0, 0xae, 0x4c, 0x12, 0x91, 0xcf, 0x2d, 0x73
00088a 94ca
00088b 2876
00088c f5ab
00088d 4917      .DB 0xca, 0x94, 0x76, 0x28, 0xab, 0xf5, 0x17, 0x49
00088e 5608
00088f eab4
000890 3769
000891 8bd5      .DB 0x08, 0x56, 0xb4, 0xea, 0x69, 0x37, 0xd5, 0x8b
000892 0957
000893 b5eb
000894 6836
000895 d48a      .DB 0x57, 0x09, 0xeb, 0xb5, 0x36, 0x68, 0x8a, 0xd4
000896 cb95
000897 7729
000898 aaf4
000899 1648      .DB 0x95, 0xcb, 0x29, 0x77, 0xf4, 0xaa, 0x48, 0x16
00089a b7e9
00089b 0b55
00089c d688
00089d 6a34      .DB 0xe9, 0xb7, 0x55, 0x0b, 0x88, 0xd6, 0x34, 0x6a
00089e 752b
00089f c997
0008a0 144a
0008a1 a8f6      .DB 0x2b, 0x75, 0x97, 0xc9, 0x4a, 0x14, 0xf6, 0xa8
0008a2 2a74
0008a3 96c8
0008a4 4b15
0008a5 f7a9      .DB 0x74, 0x2a, 0xc8, 0x96, 0x15, 0x4b, 0xa9, 0xf7
0008a6 e8b6
0008a7 540a
0008a8 89d7
0008a9 356b      .DB 0xb6, 0xe8, 0x0a, 0x54, 0xd7, 0x89, 0x6b, 0x35
                 
                 ;in r16 - data, r17 - crc
                 ;out r17 - crc
                 calculate_dallas_crc:
0008aa 930f      push r16
0008ab 93ef      push r30
0008ac 93ff      push r31
                 ;
0008ad 2701      eor r16, r17
0008ae e5e4      ldi r30, low(dallas_crc_array*2)
0008af e1f0      ldi r31, high(dallas_crc_array*2)
0008b0 0fe0      add r30, r16
0008b1 1df2      adc r31, CONST_0
0008b2 9114      lpm r17, z
                 ;
0008b3 91ff      pop r31
0008b4 91ef      pop r30
0008b5 910f      pop r16
                 #include "Logic.asm"
0008b6 9508      
                 ;checks
0008b7 2377      tst ERRORL_REG
0008b8 f559      brne logic_off
0008b9 2388      tst ERRORH_REG
0008ba f549      brne logic_off
0008bb 30a0      cpi MODE_REG, MODE_OFF
0008bc f139      breq logic_off
                 ;temperature high
0008bd 018a      movw r16, THighL_REG
0008be 7f00      andi r16, 0b11110000
0008bf 701f      andi r17, 0b00001111
0008c0 2b01      or r16, r17
0008c1 9502      swap r16
0008c2 3406      cpi r16, 70
0008c3 f504      brge logic_off
                 ;temperature low
0008c4 0189      movw r16, TLowL_REG
0008c5 7f00      andi r16, 0b11110000
0008c6 701f      andi r17, 0b00001111
0008c7 2b01      or r16, r17
0008c8 9502      swap r16
0008c9 1706      cp r16, TTARGET_REG
0008ca f4cc      brge logic_off
                 ;
0008cb 30a1      cpi MODE_REG, MODE_1
0008cc f421      brne lo1
                  ;1
0008cd 9aa8       sbi portc, 0
0008ce 98aa       cbi portc, 2
0008cf 9892       cbi portd, 2
0008d0 9508       ret
                 lo1: 
0008d1 30a2      cpi MODE_REG, MODE_2
0008d2 f421      brne lo2
                  ;2
0008d3 98a8       cbi portc, 0
0008d4 9aaa       sbi portc, 2
0008d5 9892       cbi portd, 2
0008d6 9508       ret
                 lo2:
0008d7 30a3      cpi MODE_REG, MODE_3
0008d8 f421      brne lo3
                  ;3
0008d9 9aa8       sbi portc, 0
0008da 9aaa       sbi portc, 2
0008db 9892       cbi portd, 2
0008dc 9508       ret
                 lo3:
0008dd 30a4      cpi MODE_REG, MODE_FAN
0008de f421      brne lo4
                  ;FAN
0008df 98a8       cbi portc, 0
0008e0 98aa       cbi portc, 2
0008e1 9a92       sbi portd, 2
0008e2 9508       ret
                 lo4: 
0008e3 6072      sbr ERRORL_REG, 1 << ERRORL_SOFTWARE
                 logic_off:
0008e4 98a8       cbi portc, 0
0008e5 98aa       cbi portc, 2
0008e6 9892       cbi portd, 2
0008e7 9508      ret
                 #include "I2C.asm"
                 
                 #define START 0x08
                 #define RESTART 0x10
                 #define SLA_W_ACK 0x18
                 #define SLA_W_NACK 0x20
                 #define BYTE_ACK 0x28
                 #define BYTE_NACK 0x30
                 #define COLLISION 0x38
                 #define SLA_R_ACK 0x40
                 #define SLA_R_NACK 0x48
                 #define RECEIVE_BYTE 0x50
                 #define RECEIVE_BYTE_NACK 0x58
                 
                 #define ADDRESS_READ 0xD1
                 #define ADDRESS_WRITE 0xD0
                 
                 ;in: r17 - addr
                 ;out: r16 - data
                 i2c_read:
                 ;
0008e8 d030      rcall i2c_send_start
0008e9 f05e      brts i2c_read_exit
                 ;
0008ea d046      rcall i2c_send_address_w
0008eb f04e      brts i2c_read_exit
                 ;
0008ec d05e      rcall i2c_send_byte
0008ed f03e      brts i2c_read_exit
                 ;
0008ee d037      rcall i2c_send_repeat_start
0008ef f02e      brts i2c_read_exit
                 
0008f0 d04d      rcall i2c_send_address_r
0008f1 f01e      brts i2c_read_exit
                 
0008f2 d072      rcall i2c_receive_byte_nack
0008f3 f00e      brts i2c_read_exit
                 ;
0008f4 d081      rcall i2c_send_stop
                 ;
                 i2c_read_exit:
0008f5 9508      ret
                 
                 ;in: r17 - addr
                 ;out: r16:17 - data
                 i2c_read_pair:
                 ;
0008f6 d022      rcall i2c_send_start
0008f7 f076      brts i2c_read_pair_exit
                 ;
0008f8 d038      rcall i2c_send_address_w
0008f9 f066      brts i2c_read_pair_exit
                 ;
0008fa d050      rcall i2c_send_byte
0008fb f056      brts i2c_read_pair_exit
                 ;
0008fc d029      rcall i2c_send_repeat_start
0008fd f046      brts i2c_read_pair_exit
                 
0008fe d03f      rcall i2c_send_address_r
0008ff f036      brts i2c_read_pair_exit
                 
000900 d056      rcall i2c_receive_byte_ack
000901 f026      brts i2c_read_pair_exit
000902 2f10      mov r17, r16
                 
000903 d061      rcall i2c_receive_byte_nack
000904 f00e      brts i2c_read_pair_exit
                 ;
000905 d070      rcall i2c_send_stop
                 ;
                 i2c_read_pair_exit:
000906 9508      ret
                 
                 ;in: r16 - data, r17 - addr
                 i2c_write:
000907 930f      push r16
000908 931f      push r17
                 ;
000909 9300 0076 sts TEMP1, r16
                 ;
00090b d00d      rcall i2c_send_start
00090c f04e      brts i2c_write_exit
                 ;
00090d d023      rcall i2c_send_address_w
00090e f03e      brts i2c_write_exit
                 ;
00090f d03b      rcall i2c_send_byte
000910 f02e      brts i2c_write_exit
                 ;
000911 9110 0076 lds r17, TEMP1
000913 d037      rcall i2c_send_byte
000914 f00e      brts i2c_write_exit
                 ;
000915 d060      rcall i2c_send_stop
                 ;
                 i2c_write_exit:
000916 911f      pop r17
000917 910f      pop r16
000918 9508      ret
                 
                 i2c_send_start:
000919 94e8      clt
                 ;set start bit
00091a ea04      ldi r16, (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)
00091b bf06      out TWCR, r16
                 ;wait
                 i1:
00091c b706      in r16,TWCR
00091d ff07      sbrs r16,TWINT
00091e cffd      rjmp i1
                 ;process result
00091f b101      in r16,TWSR
000920 7f08      andi r16, 0xF8
000921 3008      cpi r16, START
000922 f409      brne i2
000923 9508      ret
                 i2:
000924 9468      set
000925 9508      ret
                 
                 i2c_send_repeat_start:
000926 94e8      clt
                 ;set start bit
000927 ea04      ldi r16, (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)
000928 bf06      out TWCR, r16
                 ;wait
                 i9:
000929 b706      in r16,TWCR
00092a ff07      sbrs r16,TWINT
00092b cffd      rjmp i9
                 ;process result
00092c b101      in r16,TWSR
00092d 7f08      andi r16, 0xF8
00092e 3100      cpi r16, RESTART
00092f f7a1      brne i2
000930 9508      ret
                 
                 i2c_send_address_w:
000931 94e8      clt
000932 ed00      ldi r16, ADDRESS_WRITE
000933 b903      out TWDR, r16
000934 e804      ldi r16, (1<<TWINT) | (1<<TWEN)
000935 bf06      out TWCR, r16
                 ;
                 i5:
000936 b706      in r16,TWCR
000937 ff07      sbrs r16,TWINT
000938 cffd      rjmp i5
                 ;
000939 b101      in r16,TWSR
00093a 7f08      andi r16, 0xF8
00093b 3108      cpi r16, SLA_W_ACK
00093c f739      brne i2
00093d 9508      ret
                 
                 i2c_send_address_r:
00093e 94e8      clt
00093f ed01      ldi r16, ADDRESS_READ
000940 b903      out TWDR, r16
000941 e804      ldi r16, (1<<TWINT) | (1<<TWEN)
000942 bf06      out TWCR, r16
                 ;
                 i3:
000943 b706      in r16,TWCR
000944 ff07      sbrs r16,TWINT
000945 cffd      rjmp i3
                 ;
000946 b101      in r16,TWSR
000947 7f08      andi r16, 0xF8
000948 3400      cpi r16, SLA_R_ACK
000949 f6d1      brne i2
00094a 9508      ret
                 
                 ;data - r17
                 i2c_send_byte:
00094b 94e8      clt
00094c b913      out TWDR, r17
00094d e804      ldi r16, (1<<TWINT) | (1<<TWEN)
00094e bf06      out TWCR, r16
                 ;
                 i6:
00094f b706      in r16,TWCR
000950 ff07      sbrs r16,TWINT
000951 cffd      rjmp i6
                 ;
000952 b101      in r16,TWSR
000953 7f08      andi r16, 0xF8
000954 3208      cpi r16, BYTE_ACK
000955 f671      brne i2
000956 9508      ret
                 
                 i2c_receive_byte_ack:
000957 931f      push r17
                 ;
000958 94e8      clt
000959 ec14      ldi r17, (1<<TWEA) | (1<<TWINT) | (1<<TWEN)
00095a bf16      out TWCR, r17
                 ;
                 i7:
00095b b716      in r17,TWCR
00095c ff17      sbrs r17,TWINT
00095d cffd      rjmp i7
                 ;
00095e b111      in r17,TWSR
00095f 7f18      andi r17, 0xF8
000960 3510      cpi r17, RECEIVE_BYTE
000961 f611      brne i2
                 ;
000962 b103      in r16, TWDR
                 ;
000963 911f      pop r17
000964 9508      ret
                 
                 i2c_receive_byte_nack:
000965 931f      push r17
                 ;
000966 94e8      clt
000967 e814      ldi r17, (1<<TWINT) | (1<<TWEN)
000968 bf16      out TWCR, r17
                 ;
                 i8:
000969 b716      in r17,TWCR
00096a ff17      sbrs r17,TWINT
00096b cffd      rjmp i8
                 ;
00096c b111      in r17,TWSR
00096d 7f18      andi r17, 0xF8
00096e 3518      cpi r17, RECEIVE_BYTE_NACK
00096f f419      brne i10
                 ;
000970 b103      in r16, TWDR
                 ;
000971 911f      pop r17
000972 9508      ret
                 i10:
000973 9468      set
                 ;
000974 911f      pop r17
000975 9508      ret
                 
                 i2c_send_stop:
000976 930f      push r16
                 ;
000977 e904      ldi r16, (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)
000978 bf06      out TWCR, r16
                 ;
                 i12:
000979 b706      in r16, TWCR
00097a fd04      sbrc r16,TWSTO
00097b cffd      rjmp i12
                 ;
00097c 910f      pop r16
                 #include "DS1307.asm"
00097d 9508      
                 #define SECONDS_TKREG 0x00
                 #define MINUTES_TKREG 0x01
                 #define HOURS_TKREG 0x02
                 #define DAY_TKREG 0x03
                 #define DATE_TKREG 0x04
                 #define MONTH_TKREG 0x05
                 #define YEAR_TKREG 0x06
                 #define CONTROL_TKREG 0x07
                 ;CUSTOM
                 #define TTARGET_TKREG 0x08
                 #define BRIGHTNESS_TKREG 0x09
                 
                 ds1307_init:
                 ;--start oscillator--
00097e e010      ldi r17, SECONDS_TKREG
00097f df68      rcall i2c_read
000980 f0fe      brts ds1307_err
000981 ff07      sbrs r16, 7
000982 c003      rjmp d1
000983 770f      cbr r16, 0b10000000
000984 e010      ldi r17, SECONDS_TKREG
000985 df81      rcall i2c_write
                 d1:
000986 e000      ldi r16, 0b00000000
000987 e017      ldi r17, CONTROL_TKREG
000988 df7e      rcall i2c_write
000989 f0b6      brts ds1307_err
                 ;--read params--
                 ;modbus address
                 ;target temperatute
00098a e018      ldi r17, TTARGET_TKREG
00098b df5c      rcall i2c_read
00098c f09e      brts ds1307_err
00098d 2300      tst r16
00098e f009      breq readBg
00098f 2f60      mov TTARGET_REG, r16
                 ;brightness
                 readBg:
000990 e019      ldi r17, BRIGHTNESS_TKREG
000991 df56      rcall i2c_read
000992 f06e      brts ds1307_err
000993 3000      cpi r16, MIN_BRIGHTNESS
000994 f008      brlo ds1307_init_exit
000995 bd03      out OCR2, r16
                 ;
                 ds1307_init_exit:
000996 9508      ret
                 
                 ds1307_savetargettemp:
000997 2f06      mov r16, TTARGET_REG
000998 e018      ldi r17, TTARGET_TKREG
000999 df6d      rcall i2c_write
00099a f02e      brts ds1307_err
00099b 9508      ret
                 
                 ds1307_savebrightness:
00099c e019      ldi r17, BRIGHTNESS_TKREG
00099d df69      rcall i2c_write
00099e f00e      brts ds1307_err
00099f 9508      ret
                 
                 ds1307_err:
0009a0 6074      sbr ERRORL_REG, 1 << ERRORL_I2C
                 #include "EEPROM.asm"
0009a1 9508      


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8 register use summary:
r0 :   1 r1 :   0 r2 :  45 r3 :   2 r4 :   2 r5 :   1 r6 :   3 r7 :   1 
r8 :  10 r9 :   8 r10:  11 r11:   9 r12:  12 r13:   7 r14:   6 r15:   6 
r16: 590 r17: 275 r18:  30 r19:  32 r20:  11 r21:   3 r22:  17 r23:  12 
r24:  17 r25:  46 r26:  31 r27:  31 r28:  19 r29:  25 r30:  33 r31:  30 
x  :   2 y  :   2 z  :  31 
Registers used: 34 out of 35 (97.1%)

ATmega8 instruction use summary:
.lds  :   0 .sts  :   0 adc   :   5 add   :  11 adiw  :   0 and   :   0 
andi  :  28 asr   :   0 bclr  :   0 bld   :   1 brbc  :   0 brbs  :   0 
brcc  :   2 brcs  :   0 breq  :  26 brge  :   5 brhc  :   0 brhs  :   0 
brid  :   0 brie  :   0 brlo  :  20 brlt  :   3 brmi  :   0 brne  :  77 
brpl  :   0 brsh  :  20 brtc  :  10 brts  :  27 brvc  :   0 brvs  :   0 
bset  :   0 bst   :   2 cbi   :  29 cbr   :   5 clc   :   3 clh   :   0 
cli   :   0 cln   :   0 clr   :  56 cls   :   0 clt   :  13 clv   :   0 
clz   :   0 com   :   0 cp    :   8 cpc   :   2 cpi   : 110 cpse  :   0 
dec   :  12 eor   :   3 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   1 in    :  35 inc   :  31 ld    :  11 ldd   :   0 ldi   : 176 
lds   :  75 lpm   :   8 lsl   :   9 lsr   :   2 mov   :  52 movw  :  13 
mul   :   1 muls  :   0 mulsu :   0 neg   :   0 nop   :   5 or    :   7 
ori   :   1 out   :  71 pop   : 106 push  :  88 rcall : 143 ret   : 117 
reti  :  14 rjmp  :  97 rol   :   0 ror   :  15 sbc   :   1 sbci  :   0 
sbi   :  25 sbic  :   2 sbis  :   1 sbiw  :   0 sbr   :  31 sbrc  :  20 
sbrs  :  34 sec   :   3 seh   :   0 sei   :   1 sen   :   0 ser   :   5 
ses   :   0 set   :   6 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  19 std   :   0 sts   : 125 sub   :   3 subi  :  11 swap  :   4 
tst   :  26 wdr   :   1 
Instructions used: 65 out of 110 (59.1%)

ATmega8 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001346   4142    778   4920    8192  60.1%
[.dseg] 0x000060 0x000060      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
