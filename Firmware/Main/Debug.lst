
AVRASM ver. 2.1.42  main.asm Thu Dec 26 00:29:22 2019

[builtin](2): Including file 'C:\Program Files (x86)\Labcenter Electronics\Proteus 7 Professional\tools\AVRASM\appnotes\m8def.inc'
main.asm(1): Including file 'RamMapping.asm'
RamMapping.asm(118): Ram used: 0x7A + 20 + 80 + 64 + 100
main.asm(23): Including file 'Indication.asm'
main.asm(24): Including file 'ADC.asm'
main.asm(25): Including file 'Systick.asm'
main.asm(26): Including file 'Display.asm'
main.asm(27): Including file 'Buttons.asm'
main.asm(177): Including file 'SelfDiagnostics.asm'
main.asm(178): Including file 'Uart.asm'
main.asm(179): Including file 'Modbus.asm'
main.asm(180): Including file 'ModbusCrc.asm'
main.asm(181): Including file '1Wire.asm'
main.asm(182): Including file '18b20.asm'
18b20.asm(428): Including file 'dallasCrc.asm'
main.asm(183): Including file 'Logic.asm'
main.asm(184): Including file 'I2C.asm'
main.asm(185): Including file 'DS1307.asm'
main.asm(186): Including file 'EEPROM.asm'
                 
                 #include "RamMapping.asm"
                 
                 ;***** Created: 2010-02-25 11:46 ******* Source: ATmega8.xml *************
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m8def.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega8
                 ;* Date              : 2010-02-25
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega8
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M8DEF_INC_
                 #define _M8DEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATmega8
                 #pragma AVRPART ADMIN PART_NAME ATmega8
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x93
                 .equ	SIGNATURE_002	= 0x07
                 
                 #pragma AVRPART CORE CORE_VERSION V2E
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	SPH	= 0x3e
                 .equ	GICR	= 0x3b
                 .equ	GIFR	= 0x3a
                 .equ	TIMSK	= 0x39
                 .equ	TIFR	= 0x38
                 .equ	SPMCR	= 0x37
                 .equ	TWCR	= 0x36
                 .equ	MCUCR	= 0x35
                 .equ	MCUCSR	= 0x34
                 .equ	TCCR0	= 0x33
                 .equ	TCNT0	= 0x32
                 .equ	OSCCAL	= 0x31
                 .equ	SFIOR	= 0x30
                 .equ	TCCR1A	= 0x2f
                 .equ	TCCR1B	= 0x2e
                 .equ	TCNT1L	= 0x2c
                 .equ	TCNT1H	= 0x2d
                 .equ	OCR1AL	= 0x2a
                 .equ	OCR1AH	= 0x2b
                 .equ	OCR1BL	= 0x28
                 .equ	OCR1BH	= 0x29
                 .equ	ICR1L	= 0x26
                 .equ	ICR1H	= 0x27
                 .equ	TCCR2	= 0x25
                 .equ	TCNT2	= 0x24
                 .equ	OCR2	= 0x23
                 .equ	ASSR	= 0x22
                 .equ	WDTCR	= 0x21
                 .equ	UBRRH	= 0x20
                 .equ	UCSRC	= 0x20
                 .equ	EEARL	= 0x1e
                 .equ	EEARH	= 0x1f
                 .equ	EEDR	= 0x1d
                 .equ	EECR	= 0x1c
                 .equ	PORTB	= 0x18
                 .equ	DDRB	= 0x17
                 .equ	PINB	= 0x16
                 .equ	PORTC	= 0x15
                 .equ	DDRC	= 0x14
                 .equ	PINC	= 0x13
                 .equ	PORTD	= 0x12
                 .equ	DDRD	= 0x11
                 .equ	PIND	= 0x10
                 .equ	SPDR	= 0x0f
                 .equ	SPSR	= 0x0e
                 .equ	SPCR	= 0x0d
                 .equ	UDR	= 0x0c
                 .equ	UCSRA	= 0x0b
                 .equ	UCSRB	= 0x0a
                 .equ	UBRRL	= 0x09
                 .equ	ACSR	= 0x08
                 .equ	ADMUX	= 0x07
                 .equ	ADCSRA	= 0x06
                 .equ	ADCL	= 0x04
                 .equ	ADCH	= 0x05
                 .equ	TWDR	= 0x03
                 .equ	TWAR	= 0x02
                 .equ	TWSR	= 0x01
                 .equ	TWBR	= 0x00
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; SFIOR - Special Function IO Register
                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                 
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 
                 ; ***** SPI **************************
                 ; SPDR - SPI Data Register
                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                 
                 ; SPSR - SPI Status Register
                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                 .equ	WCOL	= 6	; Write Collision Flag
                 .equ	SPIF	= 7	; SPI Interrupt Flag
                 
                 ; SPCR - SPI Control Register
                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                 .equ	CPHA	= 2	; Clock Phase
                 .equ	CPOL	= 3	; Clock polarity
                 .equ	MSTR	= 4	; Master/Slave Select
                 .equ	DORD	= 5	; Data Order
                 .equ	SPE	= 6	; SPI Enable
                 .equ	SPIE	= 7	; SPI Interrupt Enable
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; GICR - General Interrupt Control Register
                 .equ	GIMSK	= GICR	; For compatibility
                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                 .equ	IVSEL	= 1	; Interrupt Vector Select
                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                 
                 ; GIFR - General Interrupt Flag Register
                 .equ	INTF0	= 6	; External Interrupt Flag 0
                 .equ	INTF1	= 7	; External Interrupt Flag 1
                 
                 ; MCUCR - MCU Control Register
                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                 
                 ; TCCR0 - Timer/Counter0 Control Register
                 .equ	CS00	= 0	; Clock Select0 bit 0
                 .equ	CS01	= 1	; Clock Select0 bit 1
                 .equ	CS02	= 2	; Clock Select0 bit 2
                 
                 ; TCNT0 - Timer Counter 0
                 .equ	TCNT00	= 0	; Timer Counter 0 bit 0
                 .equ	TCNT01	= 1	; Timer Counter 0 bit 1
                 .equ	TCNT02	= 2	; Timer Counter 0 bit 2
                 .equ	TCNT03	= 3	; Timer Counter 0 bit 3
                 .equ	TCNT04	= 4	; Timer Counter 0 bit 4
                 .equ	TCNT05	= 5	; Timer Counter 0 bit 5
                 .equ	TCNT06	= 6	; Timer Counter 0 bit 6
                 .equ	TCNT07	= 7	; Timer Counter 0 bit 7
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                 .equ	ICF1	= 5	; Input Capture Flag 1
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ	WGM10	= 0	; Waveform Generation Mode
                 .equ	PWM10	= WGM10	; For compatibility
                 .equ	WGM11	= 1	; Waveform Generation Mode
                 .equ	PWM11	= WGM11	; For compatibility
                 .equ	FOC1B	= 2	; Force Output Compare 1B
                 .equ	FOC1A	= 3	; Force Output Compare 1A
                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                 .equ	WGM12	= 3	; Waveform Generation Mode
                 .equ	CTC10	= WGM12	; For compatibility
                 .equ	CTC1	= WGM12	; For compatibility
                 .equ	WGM13	= 4	; Waveform Generation Mode
                 .equ	CTC11	= WGM13	; For compatibility
                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                 
                 
                 ; ***** TIMER_COUNTER_2 **************
                 ; TIMSK - Timer/Counter Interrupt Mask register
                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag Register
                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                 .equ	OCF2	= 7	; Output Compare Flag 2
                 
                 ; TCCR2 - Timer/Counter2 Control Register
                 .equ	CS20	= 0	; Clock Select bit 0
                 .equ	CS21	= 1	; Clock Select bit 1
                 .equ	CS22	= 2	; Clock Select bit 2
                 .equ	WGM21	= 3	; Waveform Generation Mode
                 .equ	CTC2	= WGM21	; For compatibility
                 .equ	COM20	= 4	; Compare Output Mode bit 0
                 .equ	COM21	= 5	; Compare Output Mode bit 1
                 .equ	WGM20	= 6	; Waveform Genration Mode
                 .equ	PWM2	= WGM20	; For compatibility
                 .equ	FOC2	= 7	; Force Output Compare
                 
                 ; TCNT2 - Timer/Counter2
                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                 
                 ; OCR2 - Timer/Counter2 Output Compare Register
                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; ASSR - Asynchronous Status Register
                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                 
                 ; SFIOR - Special Function IO Register
                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                 
                 
                 ; ***** USART ************************
                 ; UDR - USART I/O Data Register
                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSRA - USART Control and Status Register A
                 .equ	USR	= UCSRA	; For compatibility
                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                 .equ	U2X	= 1	; Double the USART transmission speed
                 .equ	UPE	= 2	; Parity Error
                 .equ	PE	= UPE	; For compatibility
                 .equ	DOR	= 3	; Data overRun
                 .equ	FE	= 4	; Framing Error
                 .equ	UDRE	= 5	; USART Data Register Empty
                 .equ	TXC	= 6	; USART Transmitt Complete
                 .equ	RXC	= 7	; USART Receive Complete
                 
                 ; UCSRB - USART Control and Status Register B
                 .equ	UCR	= UCSRB	; For compatibility
                 .equ	TXB8	= 0	; Transmit Data Bit 8
                 .equ	RXB8	= 1	; Receive Data Bit 8
                 .equ	UCSZ2	= 2	; Character Size
                 .equ	CHR9	= UCSZ2	; For compatibility
                 .equ	TXEN	= 3	; Transmitter Enable
                 .equ	RXEN	= 4	; Receiver Enable
                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSRC - USART Control and Status Register C
                 .equ	UCPOL	= 0	; Clock Polarity
                 .equ	UCSZ0	= 1	; Character Size
                 .equ	UCSZ1	= 2	; Character Size
                 .equ	USBS	= 3	; Stop Bit Select
                 .equ	UPM0	= 4	; Parity Mode Bit 0
                 .equ	UPM1	= 5	; Parity Mode Bit 1
                 .equ	UMSEL	= 6	; USART Mode Select
                 .equ	URSEL	= 7	; Register Select
                 
                 .equ	UBRRHI	= UBRRH	; For compatibility
                 
                 ; ***** TWI **************************
                 ; TWBR - TWI Bit Rate register
                 .equ	I2BR	= TWBR	; For compatibility
                 .equ	TWBR0	= 0	; 
                 .equ	TWBR1	= 1	; 
                 .equ	TWBR2	= 2	; 
                 .equ	TWBR3	= 3	; 
                 .equ	TWBR4	= 4	; 
                 .equ	TWBR5	= 5	; 
                 .equ	TWBR6	= 6	; 
                 .equ	TWBR7	= 7	; 
                 
                 ; TWCR - TWI Control Register
                 .equ	I2CR	= TWCR	; For compatibility
                 .equ	TWIE	= 0	; TWI Interrupt Enable
                 .equ	I2IE	= TWIE	; For compatibility
                 .equ	TWEN	= 2	; TWI Enable Bit
                 .equ	I2EN	= TWEN	; For compatibility
                 .equ	ENI2C	= TWEN	; For compatibility
                 .equ	TWWC	= 3	; TWI Write Collition Flag
                 .equ	I2WC	= TWWC	; For compatibility
                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                 .equ	I2STO	= TWSTO	; For compatibility
                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                 .equ	I2STA	= TWSTA	; For compatibility
                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                 .equ	I2EA	= TWEA	; For compatibility
                 .equ	TWINT	= 7	; TWI Interrupt Flag
                 .equ	I2INT	= TWINT	; For compatibility
                 
                 ; TWSR - TWI Status Register
                 .equ	I2SR	= TWSR	; For compatibility
                 .equ	TWPS0	= 0	; TWI Prescaler
                 .equ	TWS0	= TWPS0	; For compatibility
                 .equ	I2GCE	= TWPS0	; For compatibility
                 .equ	TWPS1	= 1	; TWI Prescaler
                 .equ	TWS1	= TWPS1	; For compatibility
                 .equ	TWS3	= 3	; TWI Status
                 .equ	I2S3	= TWS3	; For compatibility
                 .equ	TWS4	= 4	; TWI Status
                 .equ	I2S4	= TWS4	; For compatibility
                 .equ	TWS5	= 5	; TWI Status
                 .equ	I2S5	= TWS5	; For compatibility
                 .equ	TWS6	= 6	; TWI Status
                 .equ	I2S6	= TWS6	; For compatibility
                 .equ	TWS7	= 7	; TWI Status
                 .equ	I2S7	= TWS7	; For compatibility
                 
                 ; TWDR - TWI Data register
                 .equ	I2DR	= TWDR	; For compatibility
                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                 
                 ; TWAR - TWI (Slave) Address register
                 .equ	I2AR	= TWAR	; For compatibility
                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCR - Watchdog Timer Control Register
                 .equ	WDTCSR	= WDTCR	; For compatibility
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDCE	= 4	; Watchdog Change Enable
                 .equ	WDTOE	= WDCE	; For compatibility
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Port B Data Register
                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                 .equ	PB3	= 3	; For compatibility
                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                 .equ	PB4	= 4	; For compatibility
                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                 .equ	PB5	= 5	; For compatibility
                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                 .equ	PB6	= 6	; For compatibility
                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                 .equ	PB7	= 7	; For compatibility
                 
                 ; DDRB - Port B Data Direction Register
                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                 
                 ; PINB - Port B Input Pins
                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                 
                 
                 ; ***** PORTC ************************
                 ; PORTC - Port C Data Register
                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                 .equ	PC0	= 0	; For compatibility
                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                 .equ	PC1	= 1	; For compatibility
                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                 .equ	PC2	= 2	; For compatibility
                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                 .equ	PC3	= 3	; For compatibility
                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                 .equ	PC4	= 4	; For compatibility
                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                 .equ	PC5	= 5	; For compatibility
                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                 .equ	PC6	= 6	; For compatibility
                 
                 ; DDRC - Port C Data Direction Register
                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                 
                 ; PINC - Port C Input Pins
                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                 
                 
                 ; ***** PORTD ************************
                 ; PORTD - Port D Data Register
                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                 .equ	PD0	= 0	; For compatibility
                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                 .equ	PD1	= 1	; For compatibility
                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                 .equ	PD2	= 2	; For compatibility
                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                 .equ	PD3	= 3	; For compatibility
                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                 .equ	PD4	= 4	; For compatibility
                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                 .equ	PD5	= 5	; For compatibility
                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                 .equ	PD6	= 6	; For compatibility
                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                 .equ	PD7	= 7	; For compatibility
                 
                 ; DDRD - Port D Data Direction Register
                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                 
                 ; PIND - Port D Input Pins
                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                 
                 
                 ; ***** EEPROM ***********************
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEWE	= 1	; EEPROM Write Enable
                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                 .equ	EEWEE	= EEMWE	; For compatibility
                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; MCUCR - MCU Control Register
                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 .equ	SM0	= 4	; Sleep Mode Select
                 .equ	SM1	= 5	; Sleep Mode Select
                 .equ	SM2	= 6	; Sleep Mode Select
                 .equ	SE	= 7	; Sleep Enable
                 
                 ; MCUCSR - MCU Control And Status Register
                 .equ	MCUSR	= MCUCSR	; For compatibility
                 .equ	PORF	= 0	; Power-on reset flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; SPMCR - Store Program Memory Control Register
                 .equ	SPMEN	= 0	; Store Program Memory Enable
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                 .equ	RWWSRE	= 4	; Read-While-Write Section Read Enable
                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                 
                 ; SFIOR - Special Function IO Register
                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                 .equ	PUD	= 2	; Pull-up Disable
                 .equ	ADHSM	= 4	; ADC High Speed Mode
                 
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                 .equ	ADLAR	= 5	; Left Adjust Result
                 .equ	REFS0	= 6	; Reference Selection Bit 0
                 .equ	REFS1	= 7	; Reference Selection Bit 1
                 
                 ; ADCSRA - The ADC Control and Status register
                 .equ	ADCSR	= ADCSRA	; For compatibility
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADFR	= 5	; ADC  Free Running Select
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lock bit
                 .equ	LB2	= 1	; Lock bit
                 .equ	BLB01	= 2	; Boot Lock bit
                 .equ	BLB02	= 3	; Boot Lock bit
                 .equ	BLB11	= 4	; Boot lock bit
                 .equ	BLB12	= 5	; Boot lock bit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock Source
                 .equ	CKSEL1	= 1	; Select Clock Source
                 .equ	CKSEL2	= 2	; Select Clock Source
                 .equ	CKSEL3	= 3	; Select Clock Source
                 .equ	SUT0	= 4	; Select start-up time
                 .equ	SUT1	= 5	; Select start-up time
                 .equ	BODEN	= 6	; Brown out detector enable
                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                 
                 ; HIGH fuse bits
                 .equ	BOOTRST	= 0	; Select Reset Vector
                 .equ	BOOTSZ0	= 1	; Select Boot Size
                 .equ	BOOTSZ1	= 2	; Select Boot Size
                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                 .equ	CKOPT	= 4	; Oscillator Options
                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                 .equ	WTDON	= 6	; Enable watchdog
                 .equ	RSTDISBL	= 7	; Disable reset
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x0fff	; Note: Word address
                 .equ	IOEND	= 0x003f
                 .equ	SRAM_START	= 0x0060
                 .equ	SRAM_SIZE	= 1024
                 .equ	RAMEND	= 0x045f
                 .equ	XRAMEND	= 0x0000
                 .equ	E2END	= 0x01ff
                 .equ	EEPROMEND	= 0x01ff
                 .equ	EEADRBITS	= 9
                 #pragma AVRPART MEMORY PROG_FLASH 8192
                 #pragma AVRPART MEMORY EEPROM 512
                 #pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	NRWW_START_ADDR	= 0xc00
                 .equ	NRWW_STOP_ADDR	= 0xfff
                 .equ	RWW_START_ADDR	= 0x0
                 .equ	RWW_STOP_ADDR	= 0xbff
                 .equ	PAGESIZE	= 32
                 .equ	FIRSTBOOTSTART	= 0xf80
                 .equ	SECONDBOOTSTART	= 0xf00
                 .equ	THIRDBOOTSTART	= 0xe00
                 .equ	FOURTHBOOTSTART	= 0xc00
                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0001	; External Interrupt Request 0
                 .equ	INT1addr	= 0x0002	; External Interrupt Request 1
                 .equ	OC2addr	= 0x0003	; Timer/Counter2 Compare Match
                 .equ	OVF2addr	= 0x0004	; Timer/Counter2 Overflow
                 .equ	ICP1addr	= 0x0005	; Timer/Counter1 Capture Event
                 .equ	OC1Aaddr	= 0x0006	; Timer/Counter1 Compare Match A
                 .equ	OC1Baddr	= 0x0007	; Timer/Counter1 Compare Match B
                 .equ	OVF1addr	= 0x0008	; Timer/Counter1 Overflow
                 .equ	OVF0addr	= 0x0009	; Timer/Counter0 Overflow
                 .equ	SPIaddr	= 0x000a	; Serial Transfer Complete
                 .equ	URXCaddr	= 0x000b	; USART, Rx Complete
                 .equ	UDREaddr	= 0x000c	; USART Data Register Empty
                 .equ	UTXCaddr	= 0x000d	; USART, Tx Complete
                 .equ	ADCCaddr	= 0x000e	; ADC Conversion Complete
                 .equ	ERDYaddr	= 0x000f	; EEPROM Ready
                 .equ	ACIaddr	= 0x0010	; Analog Comparator
                 .equ	TWIaddr	= 0x0011	; 2-wire Serial Interface
                 .equ	SPMRaddr	= 0x0012	; Store Program Memory Ready
                 
                 .equ	INT_VECTORS_SIZE	= 19	; size in words
                 
                 #pragma AVRPART CORE INSTRUCTIONS_NOT_SUPPORTED break
                 
                 #endif  /* _M8DEF_INC_ */
                 
                 ; ***** END OF FILE ******************************************************
                 
                 
                 #define MIN_TARGET_TEMP -39
                 #define MAX_TARGET_TEMP 75
                 
                 ;-----------Regs-----------
                 #define CONST_0 r2
                 #define CONST_FF r3
                 
                 #define TCNT0_START 131
                 #define CONST_TCNT0_START r4
                 #define TCCR0_START 0b00000100
                 #define CONST_TCCR0_START r5
                 
                 #define CONST_ADMUX_BUTTONS r6 
                 #define CONST_ADMUX_FEEDBACK1 r7
                 
                 #define CONST_ADMUX_FEEDBACK2 r8
                 #define CONST_ADMUX_FEEDBACK3 r9
                 
                 #define MINUS_1SEG 0b01000000
                 #define CONST_MINUS_1SEG r10
                 #define CONST_BUTTON_IDLE r11
                 
                 #define CONST_5 r12
                 #define CONST_10 r13
                 
                 ;Temperature
                 #define TLowL_REG  r18
                 #define TLowH_REG  r19
                 #define THighL_REG  r20
                 #define THighH_REG  r21
                 #define TTARGET_REG r22
                 ;
                 #define ERRORL_REG r23
                 #define ERRORL_NO18B20 0
                 #define ERRORL_SOFTWARE 1
                 #define ERRORL_I2C 2
                 #define ERRORL_FAKE_18B20 3
                 
                 #define ERRORH_REG r24
                 #define ERRORH_CHANNEL1_BREAK 0
                 #define ERRORH_CHANNEL1_ENABLEFAIL 1
                 #define ERRORH_CHANNEL2_BREAK 2
                 #define ERRORH_CHANNEL2_ENABLEFAIL 3
                 #define ERRORH_CHANNEL3_BREAK 4
                 #define ERRORH_CHANNEL3_ENABLEFAIL 5
                 #define ERRORH_RAM 6
                 #define ERRORH_WATCHDOG 7
                 ;
                 #define BUTTONS_REG r25
                 #define BUTTON_PLUS_FLAG 0
                 #define BUTTON_MINUS_FLAG 1
                 #define BUTTON_MODE_FLAG 2
                 #define BUTTON_MENU_FLAG 3
                 #define BUTTON_PLUS_HOLD_FLAG 4
                 #define BUTTON_MINUS_HOLD_FLAG 5
                 #define BUTTON_MODE_HOLD_FLAG 6
                 #define BUTTON_MENU_HOLD_FLAG 7
                 ;
                 #define MODE_REG r26
                 #define MODE_COUNT 5
                 #define MODE_OFF 0
                 #define MODE_1 1
                 #define MODE_2 2
                 #define MODE_3 3
                 #define MODE_FAN 4
                 ;
                 #define DISPLAY_MODE_REG r27
                 #define DISPLAY_MENU_REG r28
                 
                 #define FEEDBACK_REG r29
                 #define FEEDBACK1 0
                 #define FEEDBACK2 1
                 #define FEEDBACK3 2
                 
                 ;-----------RAM-----------
                 #define ACTION 0x60
                 #define ACTION_MODBUS 0
                 ;Display
                 #define SEG1 0x61
                 #define SEG2 0x62 
                 #define SEG3 0x63
                 #define SEG4 0x64
                 #define SEGNUMBER 0x65
                 ;Buttons
                 #define BUTTONS_ADC 0x66
                 #define PREVBUTTONS 0x67
                 #define BUTTON_PLUS_PRESS_COUNT 0x68
                 #define BUTTON_MINUS_PRESS_COUNT 0x69
                 #define BUTTON_MODE_PRESS_COUNT 0x6A
                 #define BUTTON_MENU_PRESS_COUNT 0x6B
                 #define BUTTONS_IDLETIMEOUT 0x6C
                 ;systick
                 #define SYSTICK 0x6D
                 ;modbus
                 #define MODBUS_ADDRESS 0x6E
                 #define RECV_HANDLE_L 0x6F
                 #define RECV_HANDLE_H 0x70
                 #define TRANS_HANDLE_L 0x71
                 #define TRANS_HANDLE_H 0x72
                 #define TRANS_COUNT 0x73
                 #define CRCHI 0x74
                 #define CRCLO 0x75
                 ;i2c
                 #define TEMP1 0x76
                 ;18b20
                 #define D18B20_STATE 0x77
                 #define D18B20_TIMESTAMP 0x78
                 #define D18B20_COUNT 0x79
                 #define D18B20_TEMPERATURES 0x7A
                 #define D18B20_ADDRESSES D18B20_TEMPERATURES + 20
                 ;events
                 #define EVENTS_CACHE D18B20_ADDRESSES + 80
                 ;uart
                 #define UART_BUFFER EVENTS_CACHE + 64
                 
                 #define ram_size UART_BUFFER+100
                 #message "Ram used:" ram_size
                 
000000 c314      .ORG 0x00 rjmp RESET ; Reset Handler
                 ;.ORG 0x01 rjmp EXT_INT0 ; IRQ0 Handler
                 ;.ORG 0x02 rjmp EXT_INT1 ; IRQ1 Handler
000003 c064      .ORG 0x03 rjmp TIM2_COMP ; Timer2 Compare Handler
000004 c00a      .ORG 0x04 rjmp TIM2_OVF ; Timer2 Overflow Handler
                 ;.ORG 0x05 rjmp TIM1_CAPT ; Timer1 Capture Handler
000006 c0a2      .ORG 0x06 rjmp TIM1_COMPA ; Timer1 CompareA Handler
                 ;.ORG 0x07 rjmp TIM1_COMPB ; Timer1 CompareB Handler
                 ;.ORG 0x08 rjmp TIM1_OVF ; Timer1 Overflow Handler
000009 c417      .ORG 0x09 rjmp TIM0_OVF ; Timer0 Overflow Handler
                 ;.ORG 0x0a rjmp SPI_STC ; SPI Transfer Complete Handler
00000b c3e1      .ORG 0x0b rjmp USART_RXC ; USART RX Complete Handler
                 ;.ORG 0x0c rjmp USART_UDRE ; UDR Empty Handler
00000d c3f7      .ORG 0x0d rjmp USART_TXC ; USART TX Complete Handler
00000e c05e      .ORG 0x0e rjmp ADCi ; ADC Conversion Complete Handler
                 ;.ORG 0x0f rjmp EE_RDY ; EEPROM Ready Handler
                 ;.ORG 0x10 rjmp ANA_COMP ; Analog Comparator Handler
                 ;.ORG 0x11 rjmp TWSI ; Two-wire Serial Interface Handler
                 ;.ORG 0x12 rjmp SPM_RDY ; Store Program Memory Ready Handler
                 
                 #include "Indication.asm"
                 
                 TIM2_OVF:
00000f 930f      push r16
000010 931f      push r17
000011 b70f      in r16, SREG
000012 930f      push r16
                 ;
000013 9100 0065 lds r16, SEGNUMBER
000015 9503      inc r16
000016 7003      andi r16, 0b00000011
000017 9300 0065 sts SEGNUMBER, r16
                 ;
000019 3001      cpi r16, 1
00001a f0b1      breq to1
00001b 3002      cpi r16, 2
00001c f131      breq to2
00001d 3003      cpi r16, 3
00001e f1b9      breq to3
                 ;----------SEG1----------
                  ;cbi portb, 5
                  ;
00001f 9100 0061  lds r16, SEG1
000021 780f       andi r16, 0b10001111
000022 bb08       out portb, r16 ;cbi portb, 5 here
                  ;
000023 9100 0061  lds r16, SEG1
000025 0f00       lsl r16
000026 7e00       andi r16, 0b11100000
000027 b312       in r17, portd
000028 701f       andi r17, 0b00001111
000029 2b01       or r16, r17
00002a bb02       out portd, r16
                  ;
00002b 9ac6       sbi portb, 6
                  ;
00002c 910f       pop r16
00002d bf0f       out SREG, r16
00002e 911f       pop r17
00002f 910f       pop r16
000030 9518       reti
                  ;----------SEG2----------
                  to1:
                  ;cbi portb, 6
                  ;
000031 9100 0062  lds r16, SEG2
000033 780f       andi r16, 0b10001111
000034 bb08       out portb, r16 ;cbi portb, 6 here
                  ;
000035 9100 0062  lds r16, SEG2
000037 0f00       lsl r16
000038 7e00       andi r16, 0b11100000
000039 b312       in r17, portd
00003a 701f       andi r17, 0b00001111
00003b 2b01       or r16, r17
00003c bb02       out portd, r16
                  ;
00003d 9a94       sbi portd, 4
                 ;
00003e 910f       pop r16
00003f bf0f       out SREG, r16
000040 911f       pop r17
000041 910f       pop r16
000042 9518       reti
                  ;----------SEG3----------
                  to2:
000043 9894       cbi portd, 4
                  ;
000044 9100 0063  lds r16, SEG3
000046 780f       andi r16, 0b10001111
000047 bb08       out portb, r16
                  ;
000048 9100 0063  lds r16, SEG3
00004a 0f00       lsl r16
00004b 7e00       andi r16, 0b11100000
00004c b312       in r17, portd
00004d 701f       andi r17, 0b00001111
00004e 2b01       or r16, r17
00004f bb02       out portd, r16
                  ;
000050 9ac4       sbi portb, 4 
                 ;
000051 910f       pop r16
000052 bf0f       out SREG, r16
000053 911f       pop r17
000054 910f       pop r16
000055 9518       reti
                  ;----------SEG4----------
                  to3:
                  ;cbi portb, 4
                  ;
000056 9100 0064  lds r16, SEG4
000058 780f       andi r16, 0b10001111
000059 bb08       out portb, r16 ;cbi portb, 4 here
                  ;
00005a 9100 0064  lds r16, SEG4
00005c 0f00       lsl r16
00005d 7e00       andi r16, 0b11100000
00005e b312       in r17, portd
00005f 701f       andi r17, 0b00001111
000060 2b01       or r16, r17
000061 bb02       out portd, r16
                  ;
000062 9ac5       sbi portb, 5
                  ;
000063 910f       pop r16
000064 bf0f       out SREG, r16
000065 911f       pop r17
000066 910f       pop r16
000067 9518       reti
                 
                 TIM2_COMP:
000068 98c4      cbi portb, 4
000069 98c5      cbi portb, 5
00006a 98c6      cbi portb, 6
00006b 9894      cbi portd, 4
                 #include "ADC.asm"
00006c 9518      
                 #define ADMUX_FEEDBACK1 0b01100111
                 #define ADMUX_FEEDBACK2 0b01100001
                 #define ADMUX_FEEDBACK3 0b01100011
                 
                 #define FEEDBACK_LEVEL 0x80
                 
                 ADCi:
00006d 930f      push r16
00006e b70f      in r16, SREG
00006f 930f      push r16
                 ;
000070 b107      in r16, ADMUX
000071 3606      cpi r16, ADMUX_BUTTONS
000072 f061      breq adc_buttons
000073 3607      cpi r16, ADMUX_FEEDBACK1
000074 f099      breq adc_feedback1
000075 3601      cpi r16, ADMUX_FEEDBACK2
000076 f0e1      breq adc_feedback2
000077 3603      cpi r16, ADMUX_FEEDBACK3
000078 f129      breq adc_feedback3
                 ;
000079 b867      out ADMUX, CONST_ADMUX_BUTTONS
00007a 9a36      sbi ADCSRA, ADSC
00007b 910f      pop r16
00007c bf0f      out SREG, r16
00007d 910f      pop r16
00007e 9518      reti
                 
                 ;buttons
                 adc_buttons: 
00007f b105      in r16, ADCH
000080 9300 0066 sts BUTTONS_ADC, r16
000082 b877      out ADMUX, CONST_ADMUX_FEEDBACK1
000083 9a36      sbi ADCSRA, ADSC
                 ;
000084 910f      pop r16
000085 bf0f      out SREG, r16
000086 910f      pop r16
000087 9518      reti
                 
                 adc_feedback1:
000088 7fde      cbr FEEDBACK_REG, 1 << FEEDBACK1
000089 b105      in r16, ADCH
00008a 3800      cpi r16, FEEDBACK_LEVEL
00008b f008      brlo adc1
00008c 60d1       sbr FEEDBACK_REG, 1 << FEEDBACK1
                 adc1: 
00008d b887      out ADMUX, CONST_ADMUX_FEEDBACK2
00008e 9a36      sbi ADCSRA, ADSC
                 ; 
00008f 910f      pop r16
000090 bf0f      out SREG, r16
000091 910f      pop r16
000092 9518      reti
                 
                 adc_feedback2:
000093 7fdd      cbr FEEDBACK_REG, 1 << FEEDBACK2
000094 b105      in r16, ADCH
000095 3800      cpi r16, FEEDBACK_LEVEL
000096 f008      brlo adc2
000097 60d2       sbr FEEDBACK_REG, 1 << FEEDBACK2
                 adc2: 
000098 b897      out ADMUX, CONST_ADMUX_FEEDBACK3
000099 9a36      sbi ADCSRA, ADSC
                 ; 
00009a 910f      pop r16
00009b bf0f      out SREG, r16
00009c 910f      pop r16
00009d 9518      reti
                 
                 adc_feedback3:
00009e 7fdb      cbr FEEDBACK_REG, 1 << FEEDBACK3
00009f b105      in r16, ADCH
0000a0 3800      cpi r16, FEEDBACK_LEVEL
0000a1 f008      brlo adc3
0000a2 60d4       sbr FEEDBACK_REG, 1 << FEEDBACK3
                 adc3: 
0000a3 b867      out ADMUX, CONST_ADMUX_BUTTONS
0000a4 9a36      sbi ADCSRA, ADSC
                 ; 
0000a5 910f      pop r16
0000a6 bf0f      out SREG, r16
0000a7 910f      pop r16
                 #include "Systick.asm"
0000a8 9518      
0000a9 930f      push r16
0000aa 931f      push r17
0000ab b70f      in r16, SREG
0000ac 930f      push r16
                 ;
                 ;
0000ad 9100 006d lds r16, SYSTICK
0000af 9503      inc r16
0000b0 9300 006d sts SYSTICK, r16
                 ;
0000b2 d1f5      rcall process_buttons
                 ;
0000b3 910f      pop r16
0000b4 bf0f      out SREG, r16
0000b5 911f      pop r17
0000b6 910f      pop r16
                 #include "Display.asm"
0000b7 9518      
                 
                 #define DISPLAY_MODE_DEFAULT 0
                 #define DISPLAY_MODE_SETTEMP 1
                 #define DISPLAY_MODE_SETMODE 2
                 #define DISPLAY_MODE_BRIGHTNESS 3
                 #define DISPLAY_MODE_MENU 4
                 
                 #define DISPLAY_MENU_COUNT 2
                 
                 #define DISPLAY_MENU_BRIGHTNESS 0
                 #define DISPLAY_MENU_EXIT 1
                 
                 Display_handlers: 
0000b8 00cb      .DW display_default
0000b9 012f      .DW display_settemp
0000ba 0147      .DW display_mode
0000bb 0114      .DW display_brightness
0000bc 00dd      .DW display_menu
                  
                 process_display:
0000bd 30b5      cpi DISPLAY_MODE_REG, DISPLAY_MODE_COUNT
0000be f450      brsh label_error
0000bf e7e0      ldi r30, low(Display_handlers * 2)
0000c0 e0f1      ldi r31, high(Display_handlers * 2)
0000c1 2f0b      mov r16, DISPLAY_MODE_REG
0000c2 0f00      lsl r16
0000c3 0fe0      add r30, r16
0000c4 1df2      adc r31, CONST_0
0000c5 9105      lpm r16, z+
0000c6 9115      lpm r17, z+
0000c7 01f8      movw r30, r16
0000c8 9409      ijmp
                 ;
                 label_error:
0000c9 6072      sbr ERRORL_REG, 1 << ERRORL_SOFTWARE 
0000ca 9508      ret
                 
                 ;-----------default-----------
                 display_default:
                 ;---buttons---
                 ;+ -
0000cb fd90      sbrc BUTTONS_REG, BUTTON_PLUS_FLAG
0000cc c002      rjmp pdi3
0000cd ff91      sbrs BUTTONS_REG, BUTTON_MINUS_FLAG
0000ce c001      rjmp pdi4
                 pdi3:
0000cf e0b1       ldi DISPLAY_MODE_REG, DISPLAY_MODE_SETTEMP
                 pdi4:
                 ;mode
0000d0 ff92      sbrs BUTTONS_REG, BUTTON_MODE_FLAG
0000d1 c001      rjmp pdi5
0000d2 e0b2       ldi DISPLAY_MODE_REG, DISPLAY_MODE_SETMODE
                 pdi5:
                 ;menu
0000d3 ff93      sbrs BUTTONS_REG, BUTTON_MENU_FLAG
0000d4 c001      rjmp pdi6
0000d5 e0b4       ldi DISPLAY_MODE_REG, DISPLAY_MODE_MENU
                 pdi6:
0000d6 2799      clr BUTTONS_REG
                 ;---display---
0000d7 2377      tst ERRORL_REG
0000d8 f419      brne pdi2
0000d9 2388      tst ERRORH_REG 
0000da f409      brne pdi2
0000db c0fd      rjmp showTemperature
                 pdi2:
0000dc c14f       rjmp showError
                 
                 ;-----------menu---------------
                 display_menu:
                 ;---buttons---
                 ;+
0000dd fd90      sbrc BUTTONS_REG, BUTTON_PLUS_FLAG
0000de c002      rjmp dm_plus
0000df ff94      sbrs BUTTONS_REG, BUTTON_PLUS_HOLD_FLAG
0000e0 c004      rjmp dm1
                  dm_plus:
0000e1 95c3       inc DISPLAY_MENU_REG
0000e2 30c2       cpi DISPLAY_MENU_REG, DISPLAY_MENU_COUNT
0000e3 f008       brlo dm1
0000e4 27cc        clr DISPLAY_MENU_REG
                 dm1:
                 ;-
0000e5 fd91      sbrc BUTTONS_REG, BUTTON_MINUS_FLAG
0000e6 c002      rjmp dm_minus
0000e7 ff95      sbrs BUTTONS_REG, BUTTON_MINUS_HOLD_FLAG
0000e8 c004      rjmp dm2
                  dm_minus:
0000e9 95ca       dec DISPLAY_MENU_REG
0000ea 3fcf       cpi DISPLAY_MENU_REG, -1
0000eb f409       brne dm2
0000ec e0c1        ldi DISPLAY_MENU_REG, DISPLAY_MENU_COUNT-1
                 dm2:
                 ;mode
0000ed ff92      sbrs BUTTONS_REG, BUTTON_MODE_FLAG
0000ee c005      rjmp dm3
0000ef 30c0       cpi DISPLAY_MENU_REG, DISPLAY_MENU_BRIGHTNESS
0000f0 f411       brne dm2_1
                   ;go to brightness
0000f1 e0b3        ldi DISPLAY_MODE_REG, DISPLAY_MODE_BRIGHTNESS
0000f2 c001        rjmp dm3
                  dm2_1:
0000f3 e0b0        ldi DISPLAY_MODE_REG, DISPLAY_MODE_DEFAULT
                   ;rjmp dm3
                 dm3:
                 ;menu
0000f4 ff93      sbrs BUTTONS_REG, BUTTON_MENU_FLAG
0000f5 c001      rjmp dm4
0000f6 e0b0       ldi DISPLAY_MODE_REG, DISPLAY_MODE_DEFAULT
                 dm4:
0000f7 2799      clr BUTTONS_REG
                 ;---display---
0000f8 30c0      cpi DISPLAY_MENU_REG, DISPLAY_MENU_BRIGHTNESS
0000f9 f469      brne dm5
                  ;bri
0000fa e60b       ldi r16, 0b01101011
0000fb 9300 0061  sts SEG1, r16
0000fd e402       ldi r16, 0b01000010
0000fe 9300 0062  sts SEG2, r16
000100 e004       ldi r16, 0b00000100
000101 9300 0063  sts SEG3, r16
000103 e000       ldi r16, 0b00000000
000104 9300 0064  sts SEG4, r16
000106 9508       ret
                 dm5:
                  ;exit
000107 e703       ldi r16, 0b01110011
000108 9300 0061  sts SEG1, r16
00010a e702       ldi r16, 0b01110010
00010b 9300 0062  sts SEG2, r16
00010d e004       ldi r16, 0b00000100
00010e 9300 0063  sts SEG3, r16
000110 e807       ldi r16, 0b10000111
000111 9300 0064  sts SEG4, r16
000113 9508      ret  
                 
                 ;-----------set brightness-----------
                 display_brightness:
000114 b503      in r16, OCR2
                 ;buttons
000115 fd90      sbrc BUTTONS_REG, BUTTON_PLUS_FLAG
000116 c002      rjmp pdb1
000117 ff94      sbrs BUTTONS_REG, BUTTON_PLUS_HOLD_FLAG
000118 c005      rjmp pdb3
                  pdb1:
000119 3f0f       cpi r16, 255
00011a f019       breq pdb3
00011b 9503        inc r16
00011c bd03        out OCR2, r16
00011d d8b4        rcall ds1307_savebrightness
                 pdb3:
00011e fd91      sbrc BUTTONS_REG, BUTTON_MINUS_FLAG
00011f c002      rjmp pdb2
000120 ff95      sbrs BUTTONS_REG, BUTTON_MINUS_HOLD_FLAG
000121 c005      rjmp pdb4
                  pdb2:
000122 3000       cpi r16, 0
000123 f019       breq pdb4
000124 950a        dec r16
000125 bd03        out OCR2, r16
000126 d8ab        rcall ds1307_savebrightness
                 pdb4:
000127 ff92      sbrs BUTTONS_REG, BUTTON_MODE_FLAG
000128 c001      rjmp pdb5
000129 e0b4       ldi DISPLAY_MODE_REG, DISPLAY_MODE_MENU
                 pdb5:
00012a ff93      sbrs BUTTONS_REG, BUTTON_MENU_FLAG
00012b c001      rjmp pdb6
00012c e0b0       ldi DISPLAY_MODE_REG, DISPLAY_MODE_DEFAULT
                 pdb6:
00012d 2799      clr BUTTONS_REG
                 ;display
00012e c084      rjmp showNumber
                 
                 ;-----------set temp-----------
                 display_settemp:
                 ;buttons
00012f fd90      sbrc BUTTONS_REG, BUTTON_PLUS_FLAG
000130 c002      rjmp pdt1
000131 ff94      sbrs BUTTONS_REG, BUTTON_PLUS_HOLD_FLAG
000132 c004      rjmp pdt3
                  pdt1:
000133 346b       cpi TTARGET_REG, MAX_TARGET_TEMP
000134 f414       brge pdt3
000135 9563        inc TTARGET_REG
000136 d896        rcall ds1307_savetargettemp
                 pdt3:
000137 fd91      sbrc BUTTONS_REG, BUTTON_MINUS_FLAG
000138 c002      rjmp pdt2
000139 ff95      sbrs BUTTONS_REG, BUTTON_MINUS_HOLD_FLAG
00013a c004      rjmp pdt4
                  pdt2:
00013b 3d69       cpi TTARGET_REG, MIN_TARGET_TEMP
00013c f014       brlt pdt4
00013d 956a        dec TTARGET_REG
00013e d88e        rcall ds1307_savetargettemp
                 pdt4:
00013f ff92      sbrs BUTTONS_REG, BUTTON_MODE_FLAG
000140 c001      rjmp pdt5
000141 e0b2       ldi DISPLAY_MODE_REG, DISPLAY_MODE_SETMODE
                 pdt5:
000142 ff93      sbrs BUTTONS_REG, BUTTON_MENU_FLAG
000143 c001      rjmp pdt6
000144 e0b0       ldi DISPLAY_MODE_REG, DISPLAY_MODE_DEFAULT
                 pdt6:
000145 2799      clr BUTTONS_REG
                 ;display
000146 c052      rjmp showSetTemperature
                 
                  ;-----------mode-----------
                  display_mode:
                  ;buttons
000147 ff91       sbrs BUTTONS_REG, BUTTON_MINUS_FLAG
000148 c001       rjmp pdm3
000149 e0b1        ldi DISPLAY_MODE_REG, DISPLAY_MODE_SETTEMP
                  pdm3:
00014a ff91       sbrs BUTTONS_REG, BUTTON_MINUS_FLAG
00014b c001       rjmp pdm4
00014c e0b1        ldi DISPLAY_MODE_REG, DISPLAY_MODE_SETTEMP
                  pdm4:
00014d ff92       sbrs BUTTONS_REG, BUTTON_MODE_FLAG
00014e c004       rjmp pdm5
00014f 95a3        inc MODE_REG
000150 30a5        cpi MODE_REG, MODE_COUNT
000151 f008        brlo pdm5
000152 27aa         clr MODE_REG
                 pdm5:
000153 ff93      sbrs BUTTONS_REG, BUTTON_MENU_FLAG
000154 c001      rjmp pdm6
000155 e0b0       ldi DISPLAY_MODE_REG, DISPLAY_MODE_DEFAULT
                 pdm6:
000156 2799       clr BUTTONS_REG
                 ;display
                 showMode:
000157 30a0      cpi MODE_REG, MODE_OFF
000158 f461      brne ccm1
                  ;--MODE_OFF--
000159 9220 0061  sts SEG1, CONST_0
00015b eb0b       ldi r16, 0b10111011
00015c 9300 0062  sts SEG2, r16
00015e e905       ldi r16, 0b10010101
00015f 9300 0063  sts SEG3, r16
000161 e905       ldi r16, 0b10010101
000162 9300 0064  sts SEG4, r16
000164 9508       ret 
                 ccm1:
000165 30a1      cpi MODE_REG, MODE_1
000166 f451      brne ccm2
                  ;--1--
000167 9220 0061  sts SEG1, CONST_0
000169 9220 0062  sts SEG2, CONST_0
00016b 9220 0063  sts SEG3, CONST_0
00016d e208       ldi r16, 0b00101000
00016e 9300 0064  sts SEG4, r16
000170 9508       ret 
                 ccm2:
000171 30a2      cpi MODE_REG, MODE_2
000172 f451      brne ccm3
                  ;--2--
000173 9220 0061  sts SEG1, CONST_0
000175 9220 0062  sts SEG2, CONST_0
000177 9220 0063  sts SEG3, CONST_0
000179 eb06       ldi r16, 0b10110110
00017a 9300 0064  sts SEG4, r16
00017c 9508       ret 
                 ccm3:
00017d 30a3      cpi MODE_REG, MODE_3
00017e f451      brne ccm4
                  ;--3--
00017f 9220 0061  sts SEG1, CONST_0
000181 9220 0062  sts SEG2, CONST_0
000183 9220 0063  sts SEG3, CONST_0
000185 eb0a       ldi r16, 0b10111010
000186 9300 0064  sts SEG4, r16
000188 9508       ret 
                 ccm4:
000189 30a4      cpi MODE_REG, MODE_FAN
00018a f461      brne ccm5
                  ;--FAN--
00018b 9220 0061  sts SEG1, CONST_0
00018d e702       ldi r16, 0b01110010
00018e 9300 0062  sts SEG2, r16
000190 eb0d       ldi r16, 0b10111101
000191 9300 0063  sts SEG3, r16
000193 e30d       ldi r16, 0b00111101
000194 9300 0064  sts SEG4, r16
000196 9508       ret 
                 ccm5:
000197 6072      sbr ERRORL_REG, 1 << ERRORL_SOFTWARE 
000198 9508      ret
                 
                 showSetTemperature:
                 ;-1-
000199 9220 0061 sts SEG1, CONST_0
                 ;-2-
00019b ff67      sbrs TTARGET_REG, 7
00019c c005      rjmp sst1
                  ;<0
00019d 92a0 0062  sts SEG2, CONST_MINUS_1SEG
00019f 2700       clr r16
0001a0 1b06       sub r16, TTARGET_REG 
0001a1 c003       rjmp sst0
                 sst1:
                  ;>=0
0001a2 9220 0062  sts SEG2, CONST_0
0001a4 2f06       mov r16, TTARGET_REG
                 sst0:
                 ;-3-
0001a5 2711      clr r17
                 sst2:
0001a6 300a      cpi r16, 10
0001a7 f018      brlo sst3
0001a8 9513       inc r17
0001a9 500a       subi r16, 10
0001aa cffb       rjmp sst2
                 sst3:
0001ab d0d3      rcall convertnumberto7segment2
0001ac 9310 0063 sts SEG3, r17
                 ;-4-
0001ae 2f10      mov r17, r16
0001af d0cf      rcall convertnumberto7segment2
0001b0 9310 0064 sts SEG4, r17
0001b2 9508      ret
                 
                 showNumber:
                 ;-1-
0001b3 9220 0061 sts SEG1, CONST_0
                 ;-2-
0001b5 2711      clr r17
                 ssn0:
0001b6 3604      cpi r16, 100
0001b7 f018      brlo ssn1
0001b8 9513       inc r17
0001b9 5604       subi r16, 100
0001ba cffb       rjmp ssn0
                 ssn1:
0001bb 2311      tst r17
0001bc f029      breq ssn1p
0001bd 9468       set
0001be d097       rcall convertnumberto7segment1
0001bf 9310 0062  sts SEG2, r17
0001c1 c003       rjmp ssn1n
                 ssn1p:
0001c2 94e8       clt
0001c3 9220 0062  sts SEG2, CONST_0
                 ssn1n:
                 ;-3-
0001c5 2711      clr r17
                 ssn2:
0001c6 300a      cpi r16, 10
0001c7 f018      brlo ssn3
0001c8 9513       inc r17
0001c9 500a       subi r16, 10
0001ca cffb       rjmp ssn2
                 ssn3:
0001cb f016      brts ssn3t
0001cc 2311      tst r17
0001cd f021      breq ssn3p
                 ssn3t:
0001ce d0b0       rcall convertnumberto7segment2
0001cf 9310 0063  sts SEG3, r17
0001d1 c002       rjmp ssn3n
                 ssn3p: 
0001d2 9220 0063  sts SEG3, CONST_0
                 ssn3n:
                 ;-4-
0001d4 2f10      mov r17, r16
0001d5 d0a9      rcall convertnumberto7segment2
0001d6 9310 0064 sts SEG4, r17
0001d8 9508      ret
                 
                 showTemperature:
0001d9 0189      movw r16, TLowL_REG
0001da 701f      andi r17, 0b00001111
0001db 7f00      andi r16, 0b11110000
0001dc 2b01      or r16, r17
0001dd 9502      swap r16
                 ;
0001de fd07      sbrc r16, 7
0001df c036      rjmp wt_minus
                 ;+
0001e0 3604      cpi r16, 100
0001e1 f4e8      brsh wt_over100
                 ;-----normal-----
0001e2 2711      clr r17
                 wt2:
0001e3 300a      cpi r16, 10
0001e4 f018      brlo wt3
0001e5 9513       inc r17
0001e6 500a       subi r16, 10
0001e7 cffb       rjmp wt2
                 wt3:
0001e8 2311      tst r17
0001e9 f021      breq wt10
0001ea d06b       rcall convertnumberto7segment1
0001eb 9310 0061  sts SEG1, r17
0001ed c002       rjmp wt11
                 wt10:
0001ee 9220 0061  sts SEG1, CONST_0	
                 wt11:
                 ;
0001f0 2f10      mov r17, r16
0001f1 d064      rcall convertnumberto7segment1
0001f2 6014      ori r17, 0b00000100 ;DP
0001f3 9310 0062 sts SEG2, r17
                 ;-fractional part - TLow / 16 * 10 -
0001f5 2f02      mov r16, TLowL_REG
0001f6 700f      andi r16, 0b00001111
                 ;*10
0001f7 9d0d      mul r16, CONST_10
0001f8 2d10      mov r17, r0
                 ;/16
0001f9 9512      swap r17
0001fa 701f      andi r17, 0b00001111
                 ;
0001fb d083      rcall convertnumberto7segment2
0001fc 9310 0063 sts SEG3, r17
0001fe c029      rjmp wt_exit
                 ;----->100-----
                 wt_over100:
0001ff 2711      clr r17
                 wt4:
000200 3604      cpi r16, 100
000201 f018      brlo wt5
000202 9513       inc r17
000203 5604       subi r16, 100
000204 cffb       rjmp wt4
                 wt5:
000205 d050      rcall convertnumberto7segment1
000206 9310 0061 sts SEG1, r17
                 ;
000208 2711      clr r17
                 wt6:
000209 300a      cpi r16, 10
00020a f018      brlo wt7
00020b 9513       inc r17
00020c 500a       subi r16, 10
00020d cffb       rjmp wt6
                 wt7:
00020e d047      rcall convertnumberto7segment1
00020f 9310 0062 sts SEG2, r17
                 ;
000211 2f10      mov r17, r16
000212 d06c      rcall convertnumberto7segment2
000213 9310 0063 sts SEG3, r17
000215 c012      rjmp wt_exit
                 ;-----<0-----
                 wt_minus:
                 ;1
000216 92a0 0061 sts SEG1, CONST_MINUS_1SEG
                 ;2
000218 2711      clr r17
000219 1b10      sub r17, r16
00021a 2f01      mov r16, r17
                 ;
00021b 2711      clr r17
                 wt8:
00021c 300a      cpi r16, 10
00021d f018      brlo wt9
00021e 9513       inc r17
00021f 500a       subi r16, 10
000220 cffb       rjmp wt8
                 wt9:
000221 d034      rcall convertnumberto7segment1
000222 9310 0062 sts SEG2, r17
                 ;
000224 2f10      mov r17, r16
000225 d059      rcall convertnumberto7segment2
000226 9310 0063 sts SEG3, r17
                 ;
                 wt_exit:
000228 eb11      ldi r17, 0b10110001
000229 9310 0064 sts SEG4, r17
00022b 9508      ret
                 
                 showError:
                 ;1
00022c e703      ldi r16, 0b01110011
00022d 9300 0061 sts SEG1, r16
                 ;
00022f 2700      clr r16
000230 2f17      mov r17, ERRORL_REG
                 we5:
000231 fd10      sbrc r17, 0
000232 c00c      rjmp we4
000233 9503       inc r16
000234 9516       lsr r17
000235 3008       cpi r16, 8
000236 f7d1       brne we5
000237 2f18      mov r17, ERRORH_REG
                 we6:
000238 fd10      sbrc r17, 0
000239 c005      rjmp we4
00023a 9503       inc r16
00023b 9516       lsr r17
00023c 3100       cpi r16, 16
00023d f7d1       brne we6
00023e 2700      clr r16 
                 ;2
                 we4:
00023f 2711      clr r17
                 we0:
000240 3604      cpi r16, 100
000241 f018      brlo we1
000242 9513       inc r17
000243 5604       subi r16, 100
000244 cffb       rjmp we0
                 we1:
000245 d010      rcall convertnumberto7segment1
000246 9310 0062 sts SEG2, r17
                 ;3
000248 2711      clr r17
                 we2:
000249 300a      cpi r16, 10
00024a f018      brlo we3
00024b 9513       inc r17
00024c 500a       subi r16, 10
00024d cffb       rjmp we2
                 we3:
00024e d030      rcall convertnumberto7segment2
00024f 9310 0063 sts SEG3, r17
                 ;4
000251 2f10      mov r17, r16
000252 d02c      rcall convertnumberto7segment2
000253 9310 0064 sts SEG4, r17
                 ;
000255 9508      ret
                 
                 convertnumberto7segment1:
000256 3010      cpi r17, 0
000257 f411      brne c1
000258 eb1b       ldi r17, 0b10111011
000259 9508       ret
                 c1:
00025a 3011      cpi r17, 1
00025b f411      brne c2
00025c e818       ldi r17, 0b10001000
00025d 9508       ret
                 c2:
00025e 3012      cpi r17, 2
00025f f411      brne c3
000260 ed13       ldi r17, 0b11010011
000261 9508       ret
                 c3:
000262 3013      cpi r17, 3
000263 f411      brne c4
000264 ed19       ldi r17, 0b11011001
000265 9508       ret
                 c4:
000266 3014      cpi r17, 4
000267 f411      brne c5
000268 ee18       ldi r17, 0b11101000
000269 9508       ret
                 c5:
00026a 3015      cpi r17, 5
00026b f411      brne c6
00026c e719       ldi r17, 0b01111001
00026d 9508       ret
                 c6:
00026e 3016      cpi r17, 6
00026f f411      brne c7
000270 e71b       ldi r17, 0b01111011
000271 9508       ret
                 c7:
000272 3017      cpi r17, 7
000273 f411      brne c8
000274 e918       ldi r17, 0b10011000
000275 9508       ret
                 c8:
000276 3018      cpi r17, 8
000277 f411      brne c9
000278 ef1b       ldi r17, 0b11111011
000279 9508       ret
                 c9:
00027a 3019      cpi r17, 9
00027b f411      brne c10
00027c ef19       ldi r17, 0b11111001
00027d 9508       ret
                 c10:
00027e 9508      ret
                 
                 convertnumberto7segment2:
00027f 3010      cpi r17, 0
000280 f411      brne cc1
000281 e31f       ldi r17, 0b00111111
000282 9508       ret
                 cc1:
000283 3011      cpi r17, 1
000284 f411      brne cc2
000285 e218       ldi r17, 0b00101000
000286 9508       ret
                 cc2:
000287 3012      cpi r17, 2
000288 f411      brne cc3
000289 eb16       ldi r17, 0b10110110
00028a 9508       ret
                 cc3:
00028b 3013      cpi r17, 3
00028c f411      brne cc4
00028d eb1a       ldi r17, 0b10111010
00028e 9508       ret
                 cc4:
00028f 3014      cpi r17, 4
000290 f411      brne cc5
000291 ea19       ldi r17, 0b10101001
000292 9508       ret
                 cc5:
000293 3015      cpi r17, 5
000294 f411      brne cc6
000295 e91b       ldi r17, 0b10011011
000296 9508       ret
                 cc6:
000297 3016      cpi r17, 6
000298 f411      brne cc7
000299 e91f       ldi r17, 0b10011111
00029a 9508       ret
                 cc7:
00029b 3017      cpi r17, 7
00029c f411      brne cc8
00029d e318       ldi r17, 0b00111000
00029e 9508       ret
                 cc8:
00029f 3018      cpi r17, 8
0002a0 f411      brne cc9
0002a1 eb1f       ldi r17, 0b10111111
0002a2 9508       ret
                 cc9:
0002a3 3019      cpi r17, 9
0002a4 f411      brne cc10
0002a5 eb1b       ldi r17, 0b10111011
0002a6 9508       ret
                 cc10:
                 #include "Buttons.asm"
0002a7 9508      
                 #define BUTTON_IDLE 100
                 
                 process_buttons:
                 ;
0002a8 9100 0066 lds r16, BUTTONS_ADC
0002aa 3d0f      cpi r16, 223
0002ab f0a0      brlo adc0
                  ;buttons released
0002ac 9110 006c  lds r17, BUTTONS_IDLETIMEOUT
0002ae 3011       cpi r17, 1
0002af f028       brlo prb1
0002b0 f409       brne prb2
                   ;idle handlers
0002b1 e0b0        ldi DISPLAY_MODE_REG, DISPLAY_MODE_DEFAULT
                  prb2:
0002b2 951a       dec r17
0002b3 92b0 006c  sts BUTTONS_IDLETIMEOUT, CONST_BUTTON_IDLE  
                  prb1:
0002b5 9220 0067  sts PREVBUTTONS, CONST_0
0002b7 9220 0068  sts BUTTON_PLUS_PRESS_COUNT, CONST_0
0002b9 9220 0069  sts BUTTON_MINUS_PRESS_COUNT, CONST_0
0002bb 9220 006a  sts BUTTON_MODE_PRESS_COUNT, CONST_0
0002bd 9220 006b  sts BUTTON_MENU_PRESS_COUNT, CONST_0
0002bf 9508       ret
                 ;
                 adc0:
0002c0 92b0 006c sts BUTTONS_IDLETIMEOUT, CONST_BUTTON_IDLE
0002c2 390f      cpi r16, 159
0002c3 f428      brsh menu_btn
0002c4 350f      cpi r16, 95
0002c5 f4b0      brsh mode_btn
0002c6 310f      cpi r16, 31
0002c7 f5d0      brsh minus_btn
0002c8 c026      rjmp plus_btn
                 
                 ;---------- Menu ----------
                 menu_btn:
0002c9 9100 0067 lds r16, PREVBUTTONS
0002cb fd03      sbrc r16, BUTTON_MENU_FLAG
0002cc c005      rjmp adc11
                   ;first press
0002cd 6008        sbr r16, 1 << BUTTON_MENU_FLAG
0002ce 9300 0067   sts PREVBUTTONS, r16
0002d0 6098        sbr BUTTONS_REG, 1 << BUTTON_MENU_FLAG
0002d1 9508        ret
                 adc11:
                   ;long press detect
0002d2 9100 006b   lds r16, BUTTON_MENU_PRESS_COUNT
0002d4 310e        cpi r16, CONST_LONG_PRESS
0002d5 f420        brsh adc12
0002d6 9503         inc r16
0002d7 9300 006b    sts BUTTON_MENU_PRESS_COUNT, r16
0002d9 9508         ret
                   adc12: 
0002da 6890         sbr BUTTONS_REG, 1 << BUTTON_MENU_HOLD_FLAG
0002db 9508         ret
                 
                  ;---------- Mode ----------
                  mode_btn:
0002dc 9100 0067  lds r16, PREVBUTTONS
0002de fd02       sbrc r16, BUTTON_MODE_FLAG
0002df c005       rjmp adc21
                   ;first press
0002e0 6004        sbr r16, 1 << BUTTON_MODE_FLAG
0002e1 9300 0067   sts PREVBUTTONS, r16
0002e3 6094        sbr BUTTONS_REG, 1 << BUTTON_MODE_FLAG
0002e4 9508        ret
                  adc21:
                   ;long press detect
0002e5 9100 006a   lds r16, BUTTON_MODE_PRESS_COUNT
0002e7 310e        cpi r16, CONST_LONG_PRESS
0002e8 f420        brsh adc22
0002e9 9503         inc r16
0002ea 9300 006a    sts BUTTON_MODE_PRESS_COUNT, r16
0002ec 9508         ret
                   adc22: 
0002ed 6490         sbr BUTTONS_REG, 1 << BUTTON_MODE_HOLD_FLAG
0002ee 9508         ret
                 
                 ;---------- + ----------
                 plus_btn: 
0002ef 9100 0067 lds r16, PREVBUTTONS
0002f1 fd00      sbrc r16, BUTTON_PLUS_FLAG
0002f2 c005      rjmp adc31
                  ;first press
0002f3 6001       sbr r16, 1 << BUTTON_PLUS_FLAG
0002f4 9300 0067  sts PREVBUTTONS, r16
0002f6 6091       sbr BUTTONS_REG, 1 << BUTTON_PLUS_FLAG
0002f7 9508       ret
                 adc31:
                  ;long press detect
0002f8 9100 0068  lds r16, BUTTON_PLUS_PRESS_COUNT
0002fa 310e       cpi r16, CONST_LONG_PRESS
0002fb f420       brsh adc32
0002fc 9503         inc r16
0002fd 9300 0068    sts BUTTON_PLUS_PRESS_COUNT, r16
0002ff 9508         ret
                   adc32: 
000300 6190         sbr BUTTONS_REG, 1 << BUTTON_PLUS_HOLD_FLAG
000301 9508         ret
                 
                 ;---------- - ----------
                 minus_btn:
000302 9100 0067 lds r16, PREVBUTTONS
000304 fd01      sbrc r16, BUTTON_MINUS_FLAG
000305 c005      rjmp adc41
                  ;first press
000306 6002       sbr r16, 1 << BUTTON_MINUS_FLAG
000307 9300 0067  sts PREVBUTTONS, r16
000309 6092       sbr BUTTONS_REG, 1 << BUTTON_MINUS_FLAG
00030a 9508       ret
                 adc41:
                  ;long press detect
00030b 9100 0069  lds r16, BUTTON_MINUS_PRESS_COUNT
00030d 310e       cpi r16, CONST_LONG_PRESS
00030e f420       brsh adc42
00030f 9503        inc r16
000310 9300 0069   sts BUTTON_MINUS_PRESS_COUNT, r16
000312 9508        ret
                  adc42: 
000313 6290        sbr BUTTONS_REG, 1 << BUTTON_MINUS_HOLD_FLAG
000314 9508        ret
                 
                 RESET:
                 ;----init----
                 ;stack
000315 e004      ldi r16, high(RAMEND)
000316 bf0e      out SPH, r16
000317 e50f      ldi r16, low(RAMEND)
000318 bf0d      out SPL, r16
                 ;wdt
000319 e10e      ldi r16, 0b00011110
00031a bd01      out WDTCR, r16
00031b e00e      ldi r16, 0b00001110
00031c bd01      out WDTCR, r16
                 ;const
00031d 2700      clr r16
00031e ef1f      ser r17
00031f 0118      movw r2, r16
000320 e803      ldi r16, TCNT0_START
000321 e014      ldi r17, TCCR0_START
000322 0128      movw r4, r16
000323 e606      ldi r16, ADMUX_BUTTONS
000324 e617      ldi r17, ADMUX_FEEDBACK1
000325 0138      movw r6, r16
000326 e601      ldi r16, ADMUX_FEEDBACK2
000327 e613      ldi r17, ADMUX_FEEDBACK3
000328 0148      movw r8, r16
000329 e400      ldi r16, MINUS_1SEG
00032a e614      ldi r17, BUTTON_IDLE
00032b 0158      movw r10, r16
00032c e005      ldi r16, 5
00032d e01a      ldi r17, 10
00032e 0168      movw r12, r16
                 ;gpio
00032f ef0f      ldi r16, 0b11111111
000330 bb08      out PORTB, r16
000331 ef0f      ldi r16, 0b11111111
000332 bb07      out DDRB, r16
000333 e300      ldi r16, 0b00110000
000334 bb05      out PORTC, r16
000335 e005      ldi r16, 0b00000101
000336 bb04      out DDRC, r16
000337 ef0b      ldi r16, 0b11111011
000338 bb02      out PORTD, r16
000339 ef06      ldi r16, 0b11110110
00033a bb01      out DDRD, r16
                 ;regs
00033b e16c      ldi TTARGET_REG, 28
00033c e090      ldi BUTTONS_REG, 0
00033d e0a0      ldi MODE_REG, MODE_OFF
00033e e0b0      ldi DISPLAY_MODE_REG, 0
00033f e0c0      ldi DISPLAY_MENU_REG, 0
000340 2777      clr ERRORL_REG
000341 2788      clr ERRORH_REG
                 ;----ram----
000342 d059      rcall check_ram
000343 ef0f      ser r16
000344 9300 0061 sts SEG1, r16
000346 9300 0062 sts SEG2, r16
000348 9300 0063 sts SEG3, r16
00034a 9300 0064 sts SEG4, r16
00034c 9220 006c sts BUTTONS_IDLETIMEOUT, CONST_0
00034e 9220 0065 sts SEGNUMBER, CONST_0
000350 9220 0067 sts PREVBUTTONS, CONST_0
000352 9220 0068 sts BUTTON_PLUS_PRESS_COUNT, CONST_0
000354 9220 0069 sts BUTTON_MINUS_PRESS_COUNT, CONST_0
000356 9220 006a sts BUTTON_MODE_PRESS_COUNT, CONST_0
000358 9220 006b sts BUTTON_MENU_PRESS_COUNT, CONST_0
00035a 9220 0077 sts D18B20_STATE, CONST_0
00035c 9220 0079 sts D18B20_COUNT, CONST_0
00035e e10e      ldi r16, low(UART_BUFFER)
00035f 9300 006f sts RECV_HANDLE_L, r16
000361 e001      ldi r16, high(UART_BUFFER)
000362 9300 0070 sts RECV_HANDLE_H, r16
000364 e001      ldi r16, 1
000365 9300 006e sts MODBUS_ADDRESS, r16
                 ;T0 - modbus timeout 4ms
                 ;T1 - button read  + systick 100 ms
000367 bc2f      out TCCR1A, CONST_0
000368 e00b      ldi r16, 0b00001011
000369 bd0e      out TCCR1B, r16
00036a e300      ldi r16, 0x30
00036b bd0b      out OCR1AH, r16
00036c ed04      ldi r16, 0xD4
00036d bd0a      out OCR1AL, r16
                 ;T2 - indication
00036e bc24      out TCNT2, CONST_0
00036f e800      ldi r16, 128 ;Brightness
000370 bd03      out OCR2, r16
000371 e004      ldi r16, 0b00000100 ;F/64
000372 bd05      out TCCR2, r16
                 ;
000373 ed01      ldi r16, 0b11010001
000374 bf09      out TIMSK, r16
                 ;I2C
000375 e200      ldi r16, 32
000376 b900      out TWBR, r16
000377 b821      out TWSR, CONST_0
000378 e804      ldi r16, 0b10000100
000379 bf06      out TWCR, r16
                 ;UART 9600 ODD
00037a b82b      out UCSRA, CONST_0
00037b ed08      ldi r16, 0b11011000
00037c b90a      out UCSRB, r16
00037d eb06      ldi r16, 0b10110110
00037e bd00      out UCSRC, r16
00037f bc20      out UBRRH, CONST_0
000380 e303      ldi r16, 51
000381 b909      out UBRRL, r16
                 ;ADC
000382 e606      ldi r16, ADMUX_BUTTONS
000383 b907      out ADMUX, r16
000384 ed0f      ldi r16, 0b11011111
000385 b906      out ADCSRA, r16
                 ;
000386 d3a9      rcall init_18b20
                 ;
000387 d62e      rcall ds1307_init
                 ;
000388 9478      sei
                 ;
000389 d028      rcall check_heaters
                 ;----------main-cycle----------
                 main_cycle:
00038a 95a8      wdr
                 ;--18b20--
00038b ff70      sbrs ERRORL_REG, ERRORL_NO18B20
00038c c002      rjmp l1
                  ;18b20 not found
00038d d3a2       rcall init_18b20
00038e c001       rjmp l2
                 l1:
                  ;read 18b20
00038f d3bd       rcall read_18b20
                 l2:
                 ;--logic--
000390 d55e      rcall logic
                 ;--display--
000391 dd2b      rcall process_display
                 ;--modbus--
000392 9100 0060 lds r16, ACTION
000394 ff00      sbrs r16, ACTION_MODBUS
000395 cff4       rjmp main_cycle
000396 7f0e      cbr r16, 1 << ACTION_MODBUS
000397 9300 0060 sts ACTION, r16 
000399 d0b1      rcall process_modbus
00039a 9a54      sbi UCSRB, RXEN
00039b cfee      rjmp main_cycle
                 
                 
                 #include "SelfDiagnostics.asm"
                 
00039c b704      in r16, MCUCSR
00039d ff03      sbrs r16, WDRF
00039e c001      rjmp init0
00039f 6880       sbr ERRORH_REG, 1 << ERRORH_WATCHDOG
                 init0:
                 ;
0003a0 e6e0      ldi r30, 0x60
0003a1 27ff      clr r31
                 cr1:
0003a2 8230      st z, CONST_FF
0003a3 8100      ld r16, z
0003a4 3f0f      cpi r16, 0xFF
0003a5 f451      brne check_ram_error
0003a6 8220      st z, CONST_0
0003a7 8100      ld r16, z
0003a8 3000      cpi r16, 0x00
0003a9 f431      brne check_ram_error
0003aa 9631      adiw r30, 1
                 ;
0003ab 30f4      cpi r31, 0x04
0003ac f7a9      brne cr1
0003ad 35ee      cpi r30, 0x5E
0003ae f799      brne cr1
                 ;
0003af 9508      ret
                 check_ram_error:
0003b0 6480       sbr ERRORH_REG, 1 << ERRORH_RAM
0003b1 9508      ret
                 
                 check_heaters:
0003b2 9100 006d lds r16, SYSTICK
0003b4 9503      inc r16
0003b5 9503      inc r16
0003b6 9503      inc r16
                 s1:
                 ;timeout
0003b7 9110 006d lds r17, SYSTICK
0003b9 1710      cp r17, r16
0003ba f109      breq s1_timeout
                 ;
0003bb 30d7      cpi FEEDBACK_REG, 0b00000111
0003bc f7d1      brne s1
                 ;-----check triaks-----
0003bd 9aa8      sbi portc, 0
0003be 9aaa      sbi portc, 2
0003bf 9a92      sbi portd, 2
0003c0 9100 006d lds r16, SYSTICK
0003c2 9503      inc r16
0003c3 9503      inc r16
0003c4 9503      inc r16
                 s2: 
0003c5 9110 006d lds r17, SYSTICK
0003c7 1710      cp r17, r16
0003c8 f0d1      breq s2_timeout
                 ;
0003c9 30d0      cpi FEEDBACK_REG, 0b00000000
0003ca f7d1      brne s2
                 ;-----check triaks off-----
0003cb 98a8      cbi portc, 0
0003cc 98aa      cbi portc, 2
0003cd 9892      cbi portd, 2
0003ce 9100 006d lds r16, SYSTICK
0003d0 9503      inc r16
0003d1 9503      inc r16
0003d2 9503      inc r16
0003d3 9503      inc r16
0003d4 9503      inc r16
                 s3:
0003d5 9110 006d lds r17, SYSTICK
0003d7 1710      cp r17, r16
0003d8 f019      breq s1_timeout
                 ;
0003d9 30d7      cpi FEEDBACK_REG, 0b00000111
0003da f7d1      brne s3
0003db 9508      ret
                 
                 s1_timeout:
                 ;1
0003dc ffd1      sbrs FEEDBACK_REG, 1
0003dd 6081       sbr ERRORH_REG, 1 << ERRORH_CHANNEL1_BREAK
                 ;2
0003de ffd2      sbrs FEEDBACK_REG, 2
0003df 6084       sbr ERRORH_REG, 1 << ERRORH_CHANNEL2_BREAK
                 ;3
0003e0 ffd3      sbrs FEEDBACK_REG, 3
0003e1 6180       sbr ERRORH_REG, 1 << ERRORH_CHANNEL3_BREAK
0003e2 9508      ret
                 
                 s2_timeout:
                 ;1
0003e3 fdd1      sbrc FEEDBACK_REG, 1
0003e4 6082       sbr ERRORH_REG, 1 << ERRORH_CHANNEL1_ENABLEFAIL
                 ;2
0003e5 fdd2      sbrc FEEDBACK_REG, 2
0003e6 6088       sbr ERRORH_REG, 1 << ERRORH_CHANNEL2_ENABLEFAIL
                 ;3
0003e7 fdd3      sbrc FEEDBACK_REG, 3
0003e8 6280       sbr ERRORH_REG, 1 << ERRORH_CHANNEL3_ENABLEFAIL
                 ;
0003e9 98a8      cbi portc, 0
0003ea 98aa      cbi portc, 2
0003eb 9892      cbi portd, 2
                 #include "Uart.asm"
0003ec 9508      
0003ed 930f      push r16
0003ee 93af      push r26
0003ef 93bf      push r27
0003f0 b70f      in r16, SREG
0003f1 930f      push r16
                 ;
0003f2 b10c      in r16, UDR
0003f3 d1b7      rcall acrc
0003f4 91a0 006f lds r26, RECV_HANDLE_L
0003f6 91b0 0070 lds r27, RECV_HANDLE_H
0003f8 930d      st x+, r16
0003f9 93a0 006f sts RECV_HANDLE_L, r26
0003fb 93b0 0070 sts RECV_HANDLE_H, r27
                 ;restart T0
0003fd be42      out tcnt0, CONST_TCNT0_START
0003fe be53      out tccr0, CONST_TCCR0_START
                 ;
0003ff 910f      pop r16
000400 bf0f      out SREG, r16
000401 91bf      pop r27
000402 91af      pop r26
000403 910f      pop r16
000404 9518      reti
                 
                 USART_TXC:
000405 930f      push r16
000406 93af      push r26
000407 93bf      push r27
000408 b70f      in r16, SREG
000409 930f      push r16
                 ;
00040a 9100 0073 lds r16, TRANS_COUNT
00040c 2300      tst r16
00040d f069      breq utexit
                 ;
00040e 950a      dec r16
00040f 9300 0073 sts TRANS_COUNT, r16
                 ;
000411 91a0 0071 lds r26, TRANS_HANDLE_L
000413 91b0 0072 lds r27, TRANS_HANDLE_H
000415 910d      ld r16, X+
000416 93a0 0071 sts TRANS_HANDLE_L, r26
000418 93b0 0072 sts TRANS_HANDLE_H, r27
00041a b90c      out UDR, r16
                 ;
                 utexit:
00041b 910f      pop r16
00041c bf0f      out SREG, r16
00041d 91bf      pop r27
00041e 91af      pop r26
00041f 910f      pop r16
000420 9518      reti
                 #include "Modbus.asm"
                 
                 #define MODBUS_HOLDING_REGS_COUNT 8
                 
                 #define READ_COILS 0x01
                 #define READ_DISCRETE_INPUTS 0x02
                 #define READ_HOLDING_REGISTERS 0x03
                 #define READ_INPUT_REGISTERS 0x04
                 #define WRITE_SINGLE_COIL 0x05
                 #define WRITE_SINGLE_REGISTER 0x06
                 
                 #define ERROR_ILLEGAL_FUNCTION 0x01
                 #define ERROR_ILLEGAL_DATA_ADDRESS 0x02
                 #define ERROR_ILLEGAL_DATA_VALUE 0x03
                 #define ERROR_SLAVE_DEVICE_FAILURE 0x04
                 #define ERROR_ACKNOWLEDGE 0x05
                 #define ERROR_SLAVE_DEVICE_BUSY 0x06
                 #define ERROR_MEMORY_PARITY ERROR 0x08
                 #define ERROR_GATEWAY_PATH_UNAVAILABLE 0x0A
                 #define ERROR_GATEWAY_TARGET_DEVICE_FAILED_TO_RESPOND 0x0B
                 
                 TIM0_OVF:
000421 930f      push r16
000422 931f      push r17
000423 b70f      in r16, SREG
000424 930f      push r16
                 ;stop t0
000425 be23      out TCCR0, CONST_0
                 ;check crc
000426 9100 0074 lds r16, CRCHI
000428 2300      tst r16
000429 f491      brne t0_ovf_exit
00042a 9100 0075 lds r16, CRCLO
00042c 2300      tst r16
00042d f471      brne t0_ovf_exit
                 ;check addr
00042e 9100 011e lds r16, UART_BUFFER + 0
000430 2300      tst r16
000431 f021      breq t0_ovf_p
000432 9110 006e lds r17, MODBUS_ADDRESS
000434 1701      cp r16, r17
000435 f431      brne t0_ovf_exit
                 ;
                 t0_ovf_p:
000436 9854       cbi UCSRB, RXEN
                  ;set modbus process flag
000437 9100 0060  lds r16, ACTION
000439 6001       sbr r16, 1 << ACTION_MODBUS
00043a 9300 0060  sts ACTION, r16
                 t0_ovf_exit:
                 ;repair all for new packet
00043c 9230 0075 sts CRCLO, CONST_FF
00043e 9230 0074 sts CRCHI, CONST_FF
                 ;
000440 e10e      ldi r16, low(UART_BUFFER)
000441 9300 006f sts RECV_HANDLE_L, r16
000443 e001      ldi r16, high(UART_BUFFER)
000444 9300 0070 sts RECV_HANDLE_H, r16
                 ;
000446 910f      pop r16
000447 bf0f      out SREG, r16
000448 911f      pop r17
000449 910f      pop r16
00044a 9518      reti
                 
                 process_modbus:
                 ;------select command------
00044b 9100 011f lds r16, UART_BUFFER + 1
00044d 3004      cpi r16, READ_INPUT_REGISTERS
00044e f429      brne t2c1
00044f d020       rcall readAnalogInput
000450 2311       tst r17
000451 f091       breq t2end
000452 d0bb        rcall makeerr
000453 c010        rjmp t2end 
                 t2c1:
000454 3003      cpi r16, READ_HOLDING_REGISTERS
000455 f429      brne t2c2
000456 d05d       rcall readHoldingRegisters
000457 2311       tst r17
000458 f059       breq t2end
000459 d0b4        rcall makeerr
00045a c009        rjmp t2end
                 t2c2:
00045b 3006      cpi r16, WRITE_SINGLE_REGISTER
00045c f429      brne t2c3
00045d d099       rcall writeSingleRegister
00045e 2311       tst r17
00045f f021       breq t2end
000460 d0ad        rcall makeerr
000461 c002        rjmp t2end 
                 t2c3: 
000462 e011      ldi r17, ERROR_ILLEGAL_FUNCTION ;not supported error
000463 d0aa      rcall makeerr
                 t2end:
                 ;set answer handle
000464 e10e      ldi r16, low(UART_BUFFER)
000465 9300 0071 sts TRANS_HANDLE_L, r16
000467 e001      ldi r16, high(UART_BUFFER)
000468 9300 0072 sts TRANS_HANDLE_H, r16
                 ;start transmit
00046a df9a      rcall USART_TXC
                 ;
00046b 9230 0075 sts CRCLO, CONST_FF
00046d 9230 0074 sts CRCHI, CONST_FF
00046f 9508      ret
                 
                 ;IN UART_BUFFER
                 ;OUT r17 - error
                 readAnalogInput:
                 ;check address
000470 9100 0120 lds r16, UART_BUFFER + 2 ;RegAddrHi
000472 2300      tst r16
000473 f479      brne rai1
000474 9100 0121 lds r16, UART_BUFFER + 3 ;RegAddrLo
000476 3209      cpi r16, MODBUS_INPUT_REGS_COUNT
000477 f458      brsh rai1
                 ;check count
000478 9110 0122 lds r17, UART_BUFFER + 4 ;CountHi
00047a 2311      tst r17
00047b f439      brne rai1
00047c 9110 0123 lds r17, UART_BUFFER + 5 ;CountLo
00047e 321a      cpi r17, MODBUS_INPUT_REGS_COUNT+1
00047f f418      brsh rai1
                 ;check all
000480 0f01      add r16, r17
000481 320a      cpi r16, MODBUS_INPUT_REGS_COUNT+1
000482 f010      brlo rai2
                  rai1:	
000483 e012       ldi r17, ERROR_ILLEGAL_DATA_ADDRESS
000484 9508       ret
                 ;
                 rai2:
000485 932f      push r18
000486 933f      push r19
                 ;---build packet---
                 ;clean CRC
000487 ef0f      ser r16
000488 9300 0075 sts CRCLO, r16
00048a 9300 0074 sts CRCHI, r16
                 ;address
00048c 9100 011e lds r16, UART_BUFFER+0
00048e d11c      rcall acrc
                 ;command
00048f 9100 011f lds r16, UART_BUFFER+1
000491 d119      rcall acrc
                 ;size
000492 2f21      mov r18, r17
000493 2f01      mov r16, r17
000494 0f00      lsl r16
000495 9300 0120 sts UART_BUFFER+2, r16
000497 d113      rcall acrc
000498 0d0c      add r16, CONST_5
000499 9300 0073 sts TRANS_COUNT, r16
                 ;data
00049b 9130 0121 lds r19, UART_BUFFER + 3 ;RegAddrLo
00049d e2e1      ldi r30, low(UART_BUFFER + 3)
00049e e0f1      ldi r31, high(UART_BUFFER + 3)
                 rai_data_cycle:
00049f 2322       tst r18
0004a0 f049       breq rai_data_cycle_exit
                  ;
0004a1 d08a       rcall read_input_reg
0004a2 9301       st z+, r16
0004a3 d107       rcall acrc
0004a4 2f01       mov r16, r17
0004a5 9301       st z+, r16
0004a6 d104       rcall acrc
                  ;
0004a7 9533       inc r19
0004a8 952a       dec r18
0004a9 cff5       rjmp rai_data_cycle
                 rai_data_cycle_exit:
                 ;crc
0004aa 9100 0074 lds r16, CRCHI
0004ac 9301      st z+, r16
0004ad 9100 0075 lds r16, CRCLO
0004af 9301      st z+, r16
                 ;
0004b0 2711      clr r17
                 ;
0004b1 913f      pop r19
0004b2 912f      pop r18
0004b3 9508      ret
                 
                 readHoldingRegisters:
                 ;check address
0004b4 9100 0120 lds r16, UART_BUFFER + 2 ;RegAddrHi
0004b6 2300      tst r16
0004b7 f479      brne rhr1
0004b8 9100 0121 lds r16, UART_BUFFER + 3 ;RegAddrLo
0004ba 3008      cpi r16, MODBUS_HOLDING_REGS_COUNT
0004bb f458      brsh rhr1
                 ;check count
0004bc 9110 0122 lds r17, UART_BUFFER + 4 ;CountHi
0004be 2311      tst r17
0004bf f439      brne rhr1
0004c0 9110 0123 lds r17, UART_BUFFER + 5 ;CountLo
0004c2 3019      cpi r17, MODBUS_HOLDING_REGS_COUNT+1
0004c3 f418      brsh rhr1
                 ;check all
0004c4 0f01      add r16, r17
0004c5 3009      cpi r16, MODBUS_HOLDING_REGS_COUNT+1
0004c6 f010      brlo rhr2
                  rhr1:	
0004c7 e012       ldi r17, ERROR_ILLEGAL_DATA_ADDRESS
0004c8 9508       ret
                 ;
                 rhr2:
0004c9 932f      push r18
0004ca 933f      push r19
                 ;---build packet---
                 ;clean CRC
0004cb 9230 0075 sts CRCLO, CONST_FF
0004cd 9230 0074 sts CRCHI, CONST_FF
                 ;address
0004cf 9100 011e lds r16, UART_BUFFER+0
0004d1 d0d9      rcall acrc
                 ;command
0004d2 9100 011f lds r16, UART_BUFFER+1
0004d4 d0d6      rcall acrc
                 ;size
0004d5 2f21      mov r18, r17
0004d6 2f01      mov r16, r17
0004d7 0f00      lsl r16
0004d8 9300 0120 sts UART_BUFFER+2, r16
0004da d0d0      rcall acrc
0004db 0d0c      add r16, CONST_5
0004dc 9300 0073 sts TRANS_COUNT, r16
                 ;data
0004de 9130 0121 lds r19, UART_BUFFER + 3 ;RegAddrLo
0004e0 e2e1      ldi r30, low(UART_BUFFER + 3)
0004e1 e0f1      ldi r31, high(UART_BUFFER + 3)
                 rhr_data_cycle:
0004e2 2322       tst r18
0004e3 f049       breq rhr_data_cycle_exit
                  ;
0004e4 d070       rcall read_holding_reg
0004e5 9301       st z+, r16
0004e6 d0c4       rcall acrc
0004e7 2f01       mov r16, r17
0004e8 9301       st z+, r16
0004e9 d0c1       rcall acrc
                  ;
0004ea 9533       inc r19
0004eb 952a       dec r18
0004ec cff5       rjmp rhr_data_cycle
                 rhr_data_cycle_exit:
                 ;crc
0004ed 9100 0074 lds r16, CRCHI
0004ef 9301      st z+, r16
0004f0 9100 0075 lds r16, CRCLO
0004f2 9301      st z+, r16
                 ;
0004f3 2711      clr r17
                 ;
0004f4 913f      pop r19
0004f5 912f      pop r18
0004f6 9508      ret
                 
                 writeSingleRegister:
                 ;check address
0004f7 9100 0120 lds r16, UART_BUFFER + 2 ;RegAddrHi
0004f9 2300      tst r16
0004fa f421      brne wsr1
0004fb 9100 0121 lds r16, UART_BUFFER + 3 ;RegAddrLo
0004fd 3008      cpi r16, MODBUS_HOLDING_REGS_COUNT
0004fe f010      brlo wsr2
                 wsr1:	
0004ff e012       ldi r17, ERROR_ILLEGAL_DATA_ADDRESS
000500 9508       ret
                 ;
                 wsr2:
000501 932f      push r18
                 ;
000502 e008      ldi r16, 8
000503 9300 0073 sts TRANS_COUNT, r16
                 ;
000505 9120 0121 lds r18, UART_BUFFER + 3 ;RegAddrLo
000507 9110 0122 lds r17, UART_BUFFER + 4 ;Data High
000509 9100 0123 lds r16, UART_BUFFER + 5 ;Data Low
00050b d068      rcall write_single_reg
                 ;
00050c 912f      pop r18
00050d 9508      ret
                 
                 ;in: error - r17
                 makeerr:
                 ;clear crc
00050e ef0f      ser r16
00050f 9300 0075 sts CRCLO, r16
000511 9300 0074 sts CRCHI, r16
                 ;address
000513 9100 011e lds r16, UART_BUFFER+0
000515 d095      rcall acrc
                 ;command
000516 9100 011f lds r16, UART_BUFFER+1
000518 6800      sbr r16, 0b10000000
000519 9300 011f sts UART_BUFFER+1, r16
00051b d08f      rcall acrc
                 ;error
00051c 9310 0120 sts UART_BUFFER+2, r17
00051e 2f01      mov r16, r17
00051f d08b      rcall acrc
                 ;crc
000520 9100 0074 lds r16, CRCHI
000522 9300 0121 sts UART_BUFFER+3, r16
000524 9100 0075 lds r16, CRCLO
000526 9300 0122 sts UART_BUFFER+4, r16
                 ;start
000528 e005      ldi r16, 5
000529 9300 0073 sts TRANS_COUNT, r16
                 ;
00052b 9508      ret
                 
                 ;in - r19 addr
                 ;out - r17-16 data
                 read_input_reg:
00052c 3030      cpi r19, 0
00052d f421      brne ri1
                  ;--18b20 count--
00052e 9110 0079  lds r17, D18B20_COUNT
000530 2700       clr r16
000531 9508       ret
                 ri1:
000532 303b      cpi r19, 11
000533 f470      brsh ri2
                  ;--temperatures--
000534 933f       push r19
000535 93ef       push r30
000536 93ff       push r31
                  ;
000537 0f33       lsl r19
000538 e7e8       ldi r30, low(D18B20_TEMPERATURES - 2)
000539 e0f0       ldi r31, high(D18B20_TEMPERATURES - 2)
00053a 0fe3       add r30, r19
00053b 1df2       adc r31, CONST_0
00053c 9111       ld r17, z+
00053d 8100       ld r16, z
                  ;
00053e 91ff       pop r31
00053f 91ef       pop r30
000540 913f       pop r19
000541 9508       ret
                 ri2:
000542 3239      cpi r19, 41
000543 f470      brsh ri3
                  ;--temperatures--
000544 933f       push r19
000545 93ef       push r30
000546 93ff       push r31
                  ;
000547 0f33       lsl r19
000548 e7e8       ldi r30, low(D18B20_ADDRESSES - 22)
000549 e0f0       ldi r31, high(D18B20_ADDRESSES - 22)
00054a 0fe3       add r30, r19
00054b 1df2       adc r31, CONST_0
00054c 9111       ld r17, z+
00054d 8100       ld r16, z
                  ;
00054e 91ff       pop r31
00054f 91ef       pop r30
000550 913f       pop r19
000551 9508       ret
                 ri3:
000552 2700       clr r16
000553 2711       clr r17 
000554 9508      ret
                 
                 ;in - r19 addr
                 ;out - r17-16 data
                 read_holding_reg:
000555 3030      cpi r19, 0
000556 f421      brne h1
                  ;modbus address
000557 9110 006e  lds r17, MODBUS_ADDRESS
000559 2700       clr r16
00055a 9508       ret
                 h1:
00055b 3031      cpi r19, 1
00055c f419      brne h2
                  ;target temperature
00055d 2f16       mov r17, TTARGET_REG
00055e 2700       clr r16
00055f 9508       ret
                 h2:
000560 3032      cpi r19, 2
000561 f419      brne h3
                  ;mode
000562 2f1a       mov r17, MODE_REG
000563 2700       clr r16
000564 9508       ret
                 h3: 
000565 3033      cpi r19, 3
000566 f419      brne h4
                  ;brightness
000567 b513       in r17, OCR2
000568 2700       clr r16
000569 9508       ret
                 h4:
00056a 3038      cpi r19, 8
00056b f428      brsh h5
                  ;1307 regs
00056c 2f13       mov r17, r19
00056d 5014       subi r17, 4
00056e 0f11       lsl r17
00056f d3be       rcall i2c_read_pair
000570 9508       ret
                 h5:
000571 2700       clr r16
000572 2711       clr r17 
000573 9508       ret
                 
                 ;in r18 - addr, r17:16 - data
                 ;out r17 - error 
                 write_single_reg:
000574 94e8      clt
000575 3020      cpi r18, 0
000576 f439      brne ws1
                  ;---modbus address---
000577 2311       tst r17
000578 f571       brne data_error
000579 9300 006e  sts MODBUS_ADDRESS, r16
00057b d45c       rcall save_modbus_address
                  ;
00057c 2711       clr r17
00057d 9508       ret
                 ws1:
00057e 3031      cpi r19, 1
00057f f449      brne ws2
                  ;---target temperature---
000580 2311       tst r17
000581 f529       brne data_error
000582 3d09       cpi r16, MIN_TARGET_TEMP
000583 f11c       brlt data_error
000584 340c       cpi r16, MAX_TARGET_TEMP+1
000585 f50c       brge data_error
000586 2f60       mov TTARGET_REG, r16
                  ;
000587 2711       clr r17
000588 9508       ret
                 ws2:
000589 3032      cpi r19, 2
00058a f439      brne ws3
                  ;---mode---
00058b 2311       tst r17
00058c f4d1       brne data_error
00058d 3005       cpi r16, MODE_COUNT
00058e f4c0       brsh data_error
00058f 2fa0       mov MODE_REG, r16
                  ;
000590 2711       clr r17
000591 9508       ret
                 ws3: 
000592 3033      cpi r19, 3
000593 f441      brne ws4
                  ;---brightness---
000594 2311       tst r17
000595 f489       brne data_error
000596 3005       cpi r16, MODE_COUNT
000597 f478       brsh data_error
000598 bd03       out OCR2, r16
000599 d438       rcall ds1307_savebrightness
                  ;
00059a 2711       clr r17
00059b 9508       ret
                 ws4:
00059c 3038      cpi r19, 8
00059d f438      brsh ws5
                  ;1307 regs
00059e 2311       tst r17
00059f f439       brne data_error
0005a0 2f12       mov r17, r18
0005a1 d39d       rcall i2c_write
0005a2 f036       brts not_ready
                  ;
0005a3 2711       clr r17
0005a4 9508       ret
                 ws5:
0005a5 e012       ldi r17, ERROR_ILLEGAL_DATA_ADDRESS
0005a6 9508       ret
                 data_error:
0005a7 e013       ldi r17, ERROR_ILLEGAL_DATA_VALUE
0005a8 9508       ret
                 not_ready:
0005a9 e016       ldi r17, ERROR_SLAVE_DEVICE_BUSY
                 #include "ModbusCrc.asm"
0005aa 9508      
                 ;in r16
                 acrc:
0005ab 930f      push r16
0005ac 931f      push r17
0005ad 93ef      push r30
0005ae 93ff      push r31
                 ;uIndex = uchCRCHi ^ *adr_buffer++; 
0005af 9110 0074 lds r17, CRCHI
0005b1 2701      eor r16, r17
                 ;uchCRCHi = uchCRCLo ^ auchCRCHi[uIndex];
0005b2 e9e0      ldi r30, low(auchCRCH*2)
0005b3 e0fb      ldi r31, high(auchCRCH*2)
0005b4 0fe0      add r30, r16
0005b5 1df2      adc r31, CONST_0
0005b6 9114      lpm r17, z
0005b7 91e0 0075 lds r30, CRCLO
0005b9 271e      eor r17, r30
0005ba 9310 0074 sts CRCHI, r17
                 ;uchCRCLo = auchCRCLo[uIndex];
0005bc e9e0      ldi r30, low(auchCRCL*2)
0005bd e0fc      ldi r31, high(auchCRCL*2)
0005be 0fe0      add r30, r16
0005bf 1df2      adc r31, CONST_0
0005c0 9114      lpm r17, z
0005c1 9310 0075 sts CRCLO, r17
                 ;
0005c3 91ff      pop r31
0005c4 91ef      pop r30
0005c5 911f      pop r17
0005c6 910f      pop r16
0005c7 9508      ret
                 
                 auchCRCH:
0005c8 c100
0005c9 4081
0005ca c001
0005cb 4180
0005cc c001
0005cd 4180
0005ce c100
0005cf 4081      .DB 0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40
0005d0 c001
0005d1 4180
0005d2 c100
0005d3 4081
0005d4 c100
0005d5 4081
0005d6 c001
0005d7 4180      .DB 0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41
0005d8 c001
0005d9 4180
0005da c100
0005db 4081
0005dc c100
0005dd 4081
0005de c001
0005df 4180      .DB 0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41
0005e0 c100
0005e1 4081
0005e2 c001
0005e3 4180
0005e4 c001
0005e5 4180
0005e6 c100
0005e7 4081      .DB 0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40
0005e8 c001
0005e9 4180
0005ea c100
0005eb 4081
0005ec c100
0005ed 4081
0005ee c001
0005ef 4180      .DB 0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41
0005f0 c100
0005f1 4081
0005f2 c001
0005f3 4180
0005f4 c001
0005f5 4180
0005f6 c100
0005f7 4081      .DB 0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40
0005f8 c100
0005f9 4081
0005fa c001
0005fb 4180
0005fc c001
0005fd 4180
0005fe c100
0005ff 4081      .DB 0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40
000600 c001
000601 4180
000602 c100
000603 4081
000604 c100
000605 4081
000606 c001
000607 4180      .DB 0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41
000608 c001
000609 4180
00060a c100
00060b 4081
00060c c100
00060d 4081
00060e c001
00060f 4180      .DB 0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41
000610 c100
000611 4081
000612 c001
000613 4180
000614 c001
000615 4180
000616 c100
000617 4081      .DB 0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40
000618 c100
000619 4081
00061a c001
00061b 4180
00061c c001
00061d 4180
00061e c100
00061f 4081      .DB 0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40
000620 c001
000621 4180
000622 c100
000623 4081
000624 c100
000625 4081
000626 c001
000627 4180      .DB 0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41
000628 c100
000629 4081
00062a c001
00062b 4180
00062c c001
00062d 4180
00062e c100
00062f 4081      .DB 0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40
000630 c001
000631 4180
000632 c100
000633 4081
000634 c100
000635 4081
000636 c001
000637 4180      .DB 0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41
000638 c001
000639 4180
00063a c100
00063b 4081
00063c c100
00063d 4081
00063e c001
00063f 4180      .DB 0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40,0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41
000640 c100
000641 4081
000642 c001
000643 4180
000644 c001
000645 4180
000646 c100
000647 4081      .DB 0x00,0xC1,0x81,0x40,0x01,0xC0,0x80,0x41,0x01,0xC0,0x80,0x41,0x00,0xC1,0x81,0x40
                 
                 auchCRCL:
000648 c000
000649 01c1
00064a 03c3
00064b c202
00064c 06c6
00064d c707
00064e c505
00064f 04c4      .DB 0x00,0xC0,0xC1,0x01,0xC3,0x03,0x02,0xC2,0xC6,0x06,0x07,0xC7,0x05,0xC5,0xC4,0x04
000650 0ccc
000651 cd0d
000652 cf0f
000653 0ece
000654 ca0a
000655 0bcb
000656 09c9
000657 c808      .DB 0xCC,0x0C,0x0D,0xCD,0x0F,0xCF,0xCE,0x0E,0x0A,0xCA,0xCB,0x0B,0xC9,0x09,0x08,0xC8
000658 18d8
000659 d919
00065a db1b
00065b 1ada
00065c de1e
00065d 1fdf
00065e 1ddd
00065f dc1c      .DB 0xD8,0x18,0x19,0xD9,0x1B,0xDB,0xDA,0x1A,0x1E,0xDE,0xDF,0x1F,0xDD,0x1D,0x1C,0xDC
000660 d414
000661 15d5
000662 17d7
000663 d616
000664 12d2
000665 d313
000666 d111
000667 10d0      .DB 0x14,0xD4,0xD5,0x15,0xD7,0x17,0x16,0xD6,0xD2,0x12,0x13,0xD3,0x11,0xD1,0xD0,0x10
000668 30f0
000669 f131
00066a f333
00066b 32f2
00066c f636
00066d 37f7
00066e 35f5
00066f f434      .DB 0xF0,0x30,0x31,0xF1,0x33,0xF3,0xF2,0x32,0x36,0xF6,0xF7,0x37,0xF5,0x35,0x34,0xF4
000670 fc3c
000671 3dfd
000672 3fff
000673 fe3e
000674 3afa
000675 fb3b
000676 f939
000677 38f8      .DB 0x3C,0xFC,0xFD,0x3D,0xFF,0x3F,0x3E,0xFE,0xFA,0x3A,0x3B,0xFB,0x39,0xF9,0xF8,0x38
000678 e828
000679 29e9
00067a 2beb
00067b ea2a
00067c 2eee
00067d ef2f
00067e ed2d
00067f 2cec      .DB 0x28,0xE8,0xE9,0x29,0xEB,0x2B,0x2A,0xEA,0xEE,0x2E,0x2F,0xEF,0x2D,0xED,0xEC,0x2C
000680 24e4
000681 e525
000682 e727
000683 26e6
000684 e222
000685 23e3
000686 21e1
000687 e020      .DB 0xE4,0x24,0x25,0xE5,0x27,0xE7,0xE6,0x26,0x22,0xE2,0xE3,0x23,0xE1,0x21,0x20,0xE0
000688 60a0
000689 a161
00068a a363
00068b 62a2
00068c a666
00068d 67a7
00068e 65a5
00068f a464      .DB 0xA0,0x60,0x61,0xA1,0x63,0xA3,0xA2,0x62,0x66,0xA6,0xA7,0x67,0xA5,0x65,0x64,0xA4
000690 ac6c
000691 6dad
000692 6faf
000693 ae6e
000694 6aaa
000695 ab6b
000696 a969
000697 68a8      .DB 0x6C,0xAC,0xAD,0x6D,0xAF,0x6F,0x6E,0xAE,0xAA,0x6A,0x6B,0xAB,0x69,0xA9,0xA8,0x68
000698 b878
000699 79b9
00069a 7bbb
00069b ba7a
00069c 7ebe
00069d bf7f
00069e bd7d
00069f 7cbc      .DB 0x78,0xB8,0xB9,0x79,0xBB,0x7B,0x7A,0xBA,0xBE,0x7E,0x7F,0xBF,0x7D,0xBD,0xBC,0x7C
0006a0 74b4
0006a1 b575
0006a2 b777
0006a3 76b6
0006a4 b272
0006a5 73b3
0006a6 71b1
0006a7 b070      .DB 0xB4,0x74,0x75,0xB5,0x77,0xB7,0xB6,0x76,0x72,0xB2,0xB3,0x73,0xB1,0x71,0x70,0xB0
0006a8 9050
0006a9 5191
0006aa 5393
0006ab 9252
0006ac 5696
0006ad 9757
0006ae 9555
0006af 5494      .DB 0x50,0x90,0x91,0x51,0x93,0x53,0x52,0x92,0x96,0x56,0x57,0x97,0x55,0x95,0x94,0x54
0006b0 5c9c
0006b1 9d5d
0006b2 9f5f
0006b3 5e9e
0006b4 9a5a
0006b5 5b9b
0006b6 5999
0006b7 9858      .DB 0x9C,0x5C,0x5D,0x9D,0x5F,0x9F,0x9E,0x5E,0x5A,0x9A,0x9B,0x5B,0x99,0x59,0x58,0x98
0006b8 4888
0006b9 8949
0006ba 8b4b
0006bb 4a8a
0006bc 8e4e
0006bd 4f8f
0006be 4d8d
0006bf 8c4c      .DB 0x88,0x48,0x49,0x89,0x4B,0x8B,0x8A,0x4A,0x4E,0x8E,0x8F,0x4F,0x8D,0x4D,0x4C,0x8C
0006c0 8444
0006c1 4585
0006c2 4787
0006c3 8646
0006c4 4282
0006c5 8343
0006c6 8141
0006c7 4080      .DB 0x44,0x84,0x85,0x45,0x87,0x47,0x46,0x86,0x82,0x42,0x43,0x83,0x41,0x81,0x80,0x40
                 #include "1Wire.asm"
                 
                 ow_reset:
                 ;---init---
0006c8 930f      push r16
0006c9 931f      push r17
                 ;Tx
0006ca 9a8b      sbi ddrd, 3
0006cb 9893      cbi portd, 3
0006cc ed0f      ldi r16, 0xDF
0006cd e011      ldi r17, 0x01
0006ce d057      rcall ipause
0006cf 988b      cbi ddrd, 3
0006d0 9a93      sbi portd, 3
                 ;Rx
0006d1 e30b      ldi r16, 59
0006d2 2711      clr r17
0006d3 d052      rcall ipause
0006d4 9468      set
0006d5 9983      sbic pind, 3
0006d6 c006       rjmp ow_resetexit
0006d7 94e8      clt
0006d8 ea03      ldi r16, 0xA3
0006d9 e011      ldi r17, 0x01
0006da d04b      rcall ipause
                 ow_reset1:
0006db 9b83      sbis pind, 3
0006dc cffe      rjmp ow_reset1;
                 ;
                 ow_resetexit:
0006dd 911f      pop r17
0006de 910f      pop r16
0006df 9508      ret
                 
                 ow_read_bit:
0006e0 930f      push r16
0006e1 931f      push r17
                 ;
0006e2 9893      cbi portd, 3
0006e3 9a8b      sbi ddrd, 3
0006e4 d049      rcall pause_1us
                 ;
0006e5 988b      cbi ddrd, 3
0006e6 9a93      sbi portd,3
0006e7 e00c      ldi r16, 12
0006e8 2711      clr r17
0006e9 d03c      rcall ipause
                 ;
0006ea 94e8      clt
0006eb 9983      sbic pind, 3
0006ec 9468      set
                 ;
0006ed e206      ldi r16, 38
0006ee 2711      clr r17
0006ef d036      rcall ipause
                 ;
                 ;ow_read_bit_wait:
                 ;sbis pind, 3
                 ;rjmp ow_read_bit_wait
                 ;
0006f0 911f      pop r17
0006f1 910f      pop r16
0006f2 9508      ret
                 
                 ow_write_bit:
0006f3 930f      push r16 
0006f4 931f      push r17
                 ;
0006f5 9893      cbi portd, 3
0006f6 9a8b      sbi ddrd, 3
0006f7 d036      rcall pause_1us
                 ;
0006f8 f416      brtc w1
0006f9 988b       cbi ddrd, 3
0006fa 9a93       sbi portd, 3 
                 w1:
0006fb 2711      clr r17
0006fc e306      ldi r16, 54
0006fd d028      rcall ipause
                 ;
0006fe 988b      cbi ddrd, 3
0006ff 9a93      sbi portd, 3
                 ;
000700 911f      pop r17
000701 910f      pop r16
000702 9508      ret
                 
                 ow_read_byte:
000703 931f      push r17
                 ;
000704 e018      ldi r17, 8
                 rr1:
000705 dfda      rcall ow_read_bit;
000706 9507      ror r16
000707 f907      bld r16, 7
000708 951a      dec r17
000709 f7d9      brne rr1;
                 ;
00070a 911f      pop r17
00070b 9508      ret
                 
                 ow_write_byte:
00070c 931f      push r17
                 ;
00070d e018      ldi r17, 8
                 rw1:
00070e fb00      bst r16, 0
00070f 9507      ror r16
000710 dfe2      rcall ow_write_bit;
000711 951a      dec r17
000712 f7d9      brne rw1;
                 ;
000713 e005      ldi r16, 5
000714 2711      clr r17
000715 d010      rcall ipause
000716 911f      pop r17
000717 9508      ret
                 
                 ow_write_byte_with_check:
000718 931f      push r17
                 ;
000719 e018      ldi r17, 8
                 rw1c:
00071a dfc5      rcall ow_read_bit
00071b dfc4      rcall ow_read_bit
00071c fb00      bst r16, 0
00071d 9507      ror r16
00071e dfd4      rcall ow_write_bit;
00071f 951a      dec r17
000720 f7c9      brne rw1c;
                 ;
000721 e005      ldi r16, 5
000722 2711      clr r17
000723 d002      rcall ipause
000724 911f      pop r17
000725 9508      ret
                 
                 ipause:
000726 0000      nop
000727 0000      nop
000728 0000      nop
000729 0000      nop
00072a 5001      subi r16, 1
00072b 0912      sbc r17, CONST_0
00072c f7c8      brcc ipause;
00072d 9508      ret
                 
                 pause_1us:
00072e 0000      nop
                 #include "18b20.asm"
00072f 9508      
                 #define MATCH_ROM 0x55
                 #define SEARCH_ROM 0xF0
                 #define ALARM_SEARCH 0xEC
                 #define SKIP_ROM 0xCC
                 
                 #define CONVERT_TEMPERATURE 0x44
                 #define COPY_SCRATCHPAD 0x48
                 #define READ_POWER_SUPPLY 0xB4
                 #define RECALL_E2 0xB8
                 #define READ_SCRATCHPAD 0xBE
                 #define WRITE_SCRATCHPAD 0x4E
                 
                 #define MEAS_TIME 70
                 
                 init_18b20:
000730 928f      push r8
000731 929f      push r9
000732 92af      push r10
000733 92bf      push r11
000734 92cf      push r12
000735 92df      push r13
000736 92ef      push r14
000737 92ff      push r15
000738 93ef      push r30
000739 93ff      push r31
                 ;
00073a d076      rcall search_18b20
                 ;
00073b 9110 0079 lds r17, D18B20_COUNT
00073d 2311      tst r17
00073e f411      brne init_18b20_f
00073f 6071       sbr ERRORL_REG, 1 << ERRORL_NO18B20
000740 c001       rjmp init_18b20_exit
                 init_18b20_f:
000741 d0ef      rcall set_resolution
                 ;
                 init_18b20_exit:
000742 91ff      pop r31
000743 91ef      pop r30
000744 90ff      pop r15
000745 90ef      pop r14
000746 90df      pop r13
000747 90cf      pop r12
000748 90bf      pop r11
000749 90af      pop r10
00074a 909f      pop r9
00074b 908f      pop r8
00074c 9508      ret
                 
                 read_18b20:
00074d 9100 0077 lds r16, D18B20_STATE
00074f 2300      tst r16
000750 f091      breq r18b20_read
                  ;check delay
000751 9100 006d  lds r16, SYSTICK
000753 9110 0078  lds r17, D18B20_TIMESTAMP
000755 1b10       sub r17, r16
000756 ff17       sbrs r17, 7
000757 9508       ret
                  ;start conversion (all)
000758 df6f       rcall ow_reset
000759 f416       brtc r183
00075a 6071        sbr ERRORL_REG, 1 << ERRORL_NO18B20
00075b 9508        ret
                  r183:
00075c ec0c       ldi r16, SKIP_ROM
00075d dfae       rcall ow_write_byte
00075e e404       ldi r16, CONVERT_TEMPERATURE
00075f dfac       rcall ow_write_byte
                  ;set state
000760 9220 0077  sts D18B20_STATE, CONST_0
000762 9508       ret
                 ; 
                 r18b20_read:
000763 df7c      rcall ow_read_bit
000764 f00e      brts r181
                  ;conversation in progress
000765 9508       ret
                 r181:
000766 928f      push r8
000767 929f      push r9
000768 92af      push r10
000769 92bf      push r11
00076a 92cf      push r12
00076b 92df      push r13
00076c 92ef      push r14
00076d 92ff      push r15
00076e 936f      push r22
00076f 93af      push r26
000770 93bf      push r27
000771 93cf      push r28
000772 93df      push r29
000773 93ef      push r30
000774 93ff      push r31
                 ;clear current min, max temperature
000775 e73f      ldi TLowH_REG, 0x7F
000776 ef2f      ldi TLowL_REG, 0xFF
000777 e850      ldi THighH_REG, 0x80
000778 e040      ldi THighL_REG, 0x00
                 ;
000779 9160 0079 lds r22, D18B20_COUNT
00077b e7aa      ldi r26, low(D18B20_TEMPERATURES)
00077c e0b0      ldi r27, high(D18B20_TEMPERATURES)
00077d e8ee      ldi r30, low(D18B20_ADDRESSES)
00077e e0f0      ldi r31, high(D18B20_ADDRESSES)
                 ;
                 read_18b20_cycle:
00077f 9081      ld r8, z+
000780 9091      ld r9, z+
000781 90a1      ld r10, z+
000782 90b1      ld r11, z+
000783 90c1      ld r12, z+
000784 90d1      ld r13, z+
000785 90e1      ld r14, z+
000786 90f1      ld r15, z+
000787 d0be      rcall read_single_18b20
000788 f07e      brts read_18b20_fail
                 ;store
000789 931d      st x+, r17
00078a 930d      st x+, r16
                 ;
00078b 1712      cp r17, TLowL_REG
00078c 0703      cpc r16, TLowH_REG
00078d f414      brge read_18b20_low
00078e 2f21       mov TLowL_REG, r17
00078f 2f30       mov TLowH_REG, r16
                 ;
                 read_18b20_low:
000790 1714      cp r17, THighL_REG
000791 0705      cpc r16, THighH_REG
000792 f014      brlt read_18b20_high
000793 2f41       mov THighL_REG, r17
000794 2f50       mov THighH_REG, r16 
                 ;
                 read_18b20_high:
000795 956a      dec r22
000796 f011      breq read_18b20_exit
000797 cfe7      rjmp read_18b20_cycle
                 ;
                 read_18b20_fail:
000798 6071      sbr ERRORL_REG, 1 << ERRORL_NO18B20
                 ;
                 read_18b20_exit:
000799 9100 006d lds r16, SYSTICK
00079b e416      ldi r17, MEAS_TIME
00079c 0f01      add r16, r17
00079d 9300 0078 sts D18B20_TIMESTAMP, r16
                 ;
00079f 92d0 0077 sts D18B20_STATE, CONST_10
                 ;
0007a1 91ff      pop r31
0007a2 91ef      pop r30
0007a3 91df      pop r29
0007a4 91cf      pop r28
0007a5 91bf      pop r27
0007a6 91af      pop r26
0007a7 916f      pop r22
0007a8 90ff      pop r15
0007a9 90ef      pop r14
0007aa 90df      pop r13
0007ab 90cf      pop r12
0007ac 90bf      pop r11
0007ad 90af      pop r10
0007ae 909f      pop r9
0007af 908f      pop r8
                 ;
0007b0 9508      ret
                 
                 search_18b20:
0007b1 930f      push r16
0007b2 931f      push r17
0007b3 932f      push r18
0007b4 933f      push r19
0007b5 934f      push r20
0007b6 938f      push r24
0007b7 939f      push r25
0007b8 93af      push r26
0007b9 93bf      push r27
0007ba 93cf      push r28
0007bb 93df      push r29
0007bc 93ef      push r30
0007bd 93ff      push r31
                 ;---search all 18b20---
0007be ef3f      ldi r19, 0xFF ;last cycle last zero-wented branch
                 ;handle to store
0007bf e8ee      ldi r30, low(D18B20_ADDRESSES)
0007c0 e0f0      ldi r31, high(D18B20_ADDRESSES)
                 ;address
0007c1 2788      clr r24
0007c2 2799      clr r25
0007c3 27aa      clr r26
0007c4 27bb      clr r27
0007c5 27cc      clr r28
0007c6 27dd      clr r29
                 ;
                 search_cycle:
0007c7 014c        movw r8, r24
0007c8 015d        movw r10, r26
0007c9 016e        movw r12, r28
0007ca e320        ldi r18, 48
0007cb 2744        clr r20 ;current cycle last zero-wented branch
                   ;
0007cc defb        rcall ow_reset
0007cd ef00        ldi r16, SEARCH_ROM
0007ce df3d        rcall ow_write_byte
0007cf e208        ldi r16, 0x28
0007d0 df47        rcall ow_write_byte_with_check
0007d1 f40e        brtc search0
0007d2 c050         rjmp search_exit
                   search0: 
                   ;-----bit cycle------
                   search_bit_cycle:
0007d3 2711          clr r17
                     ;old value bit
0007d4 94d7          ror r13
0007d5 94c7          ror r12
0007d6 94b7          ror r11
0007d7 94a7          ror r10
0007d8 9497          ror r9
0007d9 9487          ror r8
0007da f408          brcc search1
0007db 6011           sbr r17, 0b00000001
                     search1:
                   ;----- read -----
0007dc df03        rcall ow_read_bit
0007dd f42e        brtc search2
0007de df01          rcall ow_read_bit
0007df f40e          brtc search3
                     ;none present
0007e0 c042           rjmp search_exit
                     search3:
                      ;one present
0007e1 9408           sec
0007e2 c011           rjmp search_savebit 
                   search2:
0007e3 defc          rcall ow_read_bit
0007e4 f416          brtc search4
                     ;zero present
0007e5 9488           clc
0007e6 c00d           rjmp search_savebit
                     search4:
                      ;both present
0007e7 1723           cp r18, r19
0007e8 f051           breq search_curr
0007e9 f418           brsh search_out
                       ;it's branch inside current - use default
0007ea 2f42            mov r20, r18
0007eb 9488            clc ;go to one
0007ec c007            rjmp search_savebit
                      search_out:
                      ;it's brach outside current - use stored
0007ed 9408           sec
0007ee fd10           sbrc r17, 0
0007ef c004           rjmp search_savebit
0007f0 2f42            mov r20, r18
0007f1 9488            clc
0007f2 c001            rjmp search_savebit
                      search_curr:
                       ;-current bit - branch-
0007f3 9408            sec
                       ;rjmp search_savebit
                 search_savebit:
0007f4 95d7      ror r29
0007f5 95c7      ror r28
0007f6 95b7      ror r27
0007f7 95a7      ror r26
0007f8 9597      ror r25
0007f9 9587      ror r24
0007fa 94e8      clt
0007fb fdd7      sbrc r29, 7
0007fc 9468       set
0007fd def5      rcall ow_write_bit
                 ;
0007fe 952a      dec r18
0007ff f699      brne search_bit_cycle
                 ;-----save-----
000800 2711      clr r17
000801 e208      ldi r16, 0x28
000802 d0df      rcall calculate_dallas_crc
000803 2f08      mov r16, r24
000804 d0dd      rcall calculate_dallas_crc
000805 2f09      mov r16, r25
000806 d0db      rcall calculate_dallas_crc
000807 2f0a      mov r16, r26
000808 d0d9      rcall calculate_dallas_crc
000809 2f0b      mov r16, r27
00080a d0d7      rcall calculate_dallas_crc
00080b 2f0c      mov r16, r28
00080c d0d5      rcall calculate_dallas_crc
00080d 2f0d      mov r16, r29
00080e d0d3      rcall calculate_dallas_crc
                 ;check crc
                 ;mov r16, r17
                 ;rcall ow_write_byte_with_check
                 ;brts 
                 ;-----save-----
                 ;device id
00080f e208      ldi r16, 0x28
000810 9301      st z+, r16
                 ;addr
000811 9381      st z+, r24
000812 9391      st z+, r25
000813 93a1      st z+, r26
000814 93b1      st z+, r27
000815 93c1      st z+, r28
000816 93d1      st z+, r29
                 ;crc
000817 9311      st z+, r17
                 ;
000818 9100 0079 lds r16, D18B20_COUNT
00081a 9503      inc r16
00081b 9300 0079 sts D18B20_COUNT, r16
00081d 300a      cpi r16, D18B20_MAX_COUNT
00081e f021      breq search_exit
                 ;---
00081f 2f34      mov r19, r20
000820 2344      tst r20
000821 f009      breq search_exit;no more branch
000822 cfa4      rjmp search_cycle
                 ;save
                 search_exit:
                 ;
000823 91ff      pop r31
000824 91ef      pop r30
000825 91df      pop r29
000826 91cf      pop r28
000827 91bf      pop r27
000828 91af      pop r26
000829 919f      pop r25
00082a 918f      pop r24
00082b 914f      pop r20
00082c 913f      pop r19
00082d 912f      pop r18
00082e 911f      pop r17
00082f 910f      pop r16
000830 9508      ret
                 
                 set_resolution:
000831 de96      rcall ow_reset
000832 f40e      brtc i180
000833 9508       ret
                 i180:
000834 ec0c      ldi r16, SKIP_ROM
000835 ded6      rcall ow_write_byte
                 ;
000836 e40e      ldi r16, WRITE_SCRATCHPAD
000837 ded4      rcall ow_write_byte
000838 2700      clr r16
000839 ded2      rcall ow_write_byte
00083a 2700      clr r16
00083b ded0      rcall ow_write_byte
00083c e70f      ldi r16, 0b01111111
00083d dece      rcall ow_write_byte
                 ;---read scrathpad---
                 .IFDEF CHECK_18B20_GENUINE
                 .ENDIF
                 ;start conversion
00083e de89      rcall ow_reset
00083f f40e      brtc i182
000840 9508       ret
                 i182:
000841 ec0c      ldi r16, SKIP_ROM
000842 dec9      rcall ow_write_byte
000843 e404      ldi r16, CONVERT_TEMPERATURE
000844 dec7      rcall ow_write_byte
                 ;
000845 9508      ret
                 
                 ;in r8-r15 - addr
                 ;out r17:16 - temp, T - error
                 read_single_18b20:
                 ;
000846 de81      rcall ow_reset
000847 f40e      brtc r182
000848 9508       ret
                 r182:
000849 e505      ldi r16, MATCH_ROM
00084a dec1      rcall ow_write_byte
00084b 2d08      mov r16, r8
00084c debf      rcall ow_write_byte
00084d 2d09      mov r16, r9
00084e debd      rcall ow_write_byte
00084f 2d0a      mov r16, r10
000850 debb      rcall ow_write_byte
000851 2d0b      mov r16, r11
000852 deb9      rcall ow_write_byte
000853 2d0c      mov r16, r12
000854 deb7      rcall ow_write_byte
000855 2d0d      mov r16, r13
000856 deb5      rcall ow_write_byte
000857 2d0e      mov r16, r14
000858 deb3      rcall ow_write_byte
000859 2d0f      mov r16, r15
00085a deb1      rcall ow_write_byte
                 ;
00085b eb0e      ldi r16, READ_SCRATCHPAD
00085c deaf      rcall ow_write_byte
                 ;
00085d dea5      rcall ow_read_byte
00085e 2f10      mov r17, r16
                 ;
00085f dea3      rcall ow_read_byte
                 ;
000860 94e8      clt
000861 9508      ret
                 
                 #include "dallasCrc.asm"
                 
000862 5e00
000863 e2bc
000864 3f61
000865 83dd      .DB 0x00, 0x5e, 0xbc, 0xe2, 0x61, 0x3f, 0xdd, 0x83
000866 9cc2
000867 207e
000868 fda3
000869 411f      .DB 0xc2, 0x9c, 0x7e, 0x20, 0xa3, 0xfd, 0x1f, 0x41
00086a c39d
00086b 7f21
00086c a2fc
00086d 1e40      .DB 0x9d, 0xc3, 0x21, 0x7f, 0xfc, 0xa2, 0x40, 0x1e
00086e 015f
00086f bde3
000870 603e
000871 dc82      .DB 0x5f, 0x01, 0xe3, 0xbd, 0x3e, 0x60, 0x82, 0xdc
000872 7d23
000873 c19f
000874 1c42
000875 a0fe      .DB 0x23, 0x7d, 0x9f, 0xc1, 0x42, 0x1c, 0xfe, 0xa0
000876 bfe1
000877 035d
000878 de80
000879 623c      .DB 0xe1, 0xbf, 0x5d, 0x03, 0x80, 0xde, 0x3c, 0x62
00087a e0be
00087b 5c02
00087c 81df
00087d 3d63      .DB 0xbe, 0xe0, 0x02, 0x5c, 0xdf, 0x81, 0x63, 0x3d
00087e 227c
00087f 9ec0
000880 431d
000881 ffa1      .DB 0x7c, 0x22, 0xc0, 0x9e, 0x1d, 0x43, 0xa1, 0xff
000882 1846
000883 a4fa
000884 7927
000885 c59b      .DB 0x46, 0x18, 0xfa, 0xa4, 0x27, 0x79, 0x9b, 0xc5
000886 da84
000887 6638
000888 bbe5
000889 0759      .DB 0x84, 0xda, 0x38, 0x66, 0xe5, 0xbb, 0x59, 0x07
00088a 85db
00088b 3967
00088c e4ba
00088d 5806      .DB 0xdb, 0x85, 0x67, 0x39, 0xba, 0xe4, 0x06, 0x58
00088e 4719
00088f fba5
000890 2678
000891 9ac4      .DB 0x19, 0x47, 0xa5, 0xfb, 0x78, 0x26, 0xc4, 0x9a
000892 3b65
000893 87d9
000894 5a04
000895 e6b8      .DB 0x65, 0x3b, 0xd9, 0x87, 0x04, 0x5a, 0xb8, 0xe6
000896 f9a7
000897 451b
000898 98c6
000899 247a      .DB 0xa7, 0xf9, 0x1b, 0x45, 0xc6, 0x98, 0x7a, 0x24
00089a a6f8
00089b 1a44
00089c c799
00089d 7b25      .DB 0xf8, 0xa6, 0x44, 0x1a, 0x99, 0xc7, 0x25, 0x7b
00089e 643a
00089f d886
0008a0 055b
0008a1 b9e7      .DB 0x3a, 0x64, 0x86, 0xd8, 0x5b, 0x05, 0xe7, 0xb9
0008a2 d28c
0008a3 6e30
0008a4 b3ed
0008a5 0f51      .DB 0x8c, 0xd2, 0x30, 0x6e, 0xed, 0xb3, 0x51, 0x0f
0008a6 104e
0008a7 acf2
0008a8 712f
0008a9 cd93      .DB 0x4e, 0x10, 0xf2, 0xac, 0x2f, 0x71, 0x93, 0xcd
0008aa 4f11
0008ab f3ad
0008ac 2e70
0008ad 92cc      .DB 0x11, 0x4f, 0xad, 0xf3, 0x70, 0x2e, 0xcc, 0x92
0008ae 8dd3
0008af 316f
0008b0 ecb2
0008b1 500e      .DB 0xd3, 0x8d, 0x6f, 0x31, 0xb2, 0xec, 0x0e, 0x50
0008b2 f1af
0008b3 4d13
0008b4 90ce
0008b5 2c72      .DB 0xaf, 0xf1, 0x13, 0x4d, 0xce, 0x90, 0x72, 0x2c
0008b6 336d
0008b7 8fd1
0008b8 520c
0008b9 eeb0      .DB 0x6d, 0x33, 0xd1, 0x8f, 0x0c, 0x52, 0xb0, 0xee
0008ba 6c32
0008bb d08e
0008bc 0d53
0008bd b1ef      .DB 0x32, 0x6c, 0x8e, 0xd0, 0x53, 0x0d, 0xef, 0xb1
0008be aef0
0008bf 124c
0008c0 cf91
0008c1 732d      .DB 0xf0, 0xae, 0x4c, 0x12, 0x91, 0xcf, 0x2d, 0x73
0008c2 94ca
0008c3 2876
0008c4 f5ab
0008c5 4917      .DB 0xca, 0x94, 0x76, 0x28, 0xab, 0xf5, 0x17, 0x49
0008c6 5608
0008c7 eab4
0008c8 3769
0008c9 8bd5      .DB 0x08, 0x56, 0xb4, 0xea, 0x69, 0x37, 0xd5, 0x8b
0008ca 0957
0008cb b5eb
0008cc 6836
0008cd d48a      .DB 0x57, 0x09, 0xeb, 0xb5, 0x36, 0x68, 0x8a, 0xd4
0008ce cb95
0008cf 7729
0008d0 aaf4
0008d1 1648      .DB 0x95, 0xcb, 0x29, 0x77, 0xf4, 0xaa, 0x48, 0x16
0008d2 b7e9
0008d3 0b55
0008d4 d688
0008d5 6a34      .DB 0xe9, 0xb7, 0x55, 0x0b, 0x88, 0xd6, 0x34, 0x6a
0008d6 752b
0008d7 c997
0008d8 144a
0008d9 a8f6      .DB 0x2b, 0x75, 0x97, 0xc9, 0x4a, 0x14, 0xf6, 0xa8
0008da 2a74
0008db 96c8
0008dc 4b15
0008dd f7a9      .DB 0x74, 0x2a, 0xc8, 0x96, 0x15, 0x4b, 0xa9, 0xf7
0008de e8b6
0008df 540a
0008e0 89d7
0008e1 356b      .DB 0xb6, 0xe8, 0x0a, 0x54, 0xd7, 0x89, 0x6b, 0x35
                 
                 ;in r16 - data, r17 - crc
                 ;out r17 - crc
                 calculate_dallas_crc:
0008e2 930f      push r16
0008e3 93ef      push r30
0008e4 93ff      push r31
                 ;
0008e5 2701      eor r16, r17
0008e6 ece4      ldi r30, low(dallas_crc_array*2)
0008e7 e1f0      ldi r31, high(dallas_crc_array*2)
0008e8 0fe0      add r30, r16
0008e9 1df2      adc r31, CONST_0
0008ea 9114      lpm r17, z
                 ;
0008eb 91ff      pop r31
0008ec 91ef      pop r30
0008ed 910f      pop r16
                 #include "Logic.asm"
0008ee 9508      
                 ;checks
0008ef 2377      tst ERRORL_REG
0008f0 f559      brne logic_off
0008f1 2388      tst ERRORH_REG
0008f2 f549      brne logic_off
0008f3 30a0      cpi MODE_REG, MODE_OFF
0008f4 f139      breq logic_off
                 ;temperature high
0008f5 018a      movw r16, THighL_REG
0008f6 7f00      andi r16, 0b11110000
0008f7 701f      andi r17, 0b00001111
0008f8 2b01      or r16, r17
0008f9 9502      swap r16
0008fa 330c      cpi r16, 60
0008fb f504      brge logic_off
                 ;temperature low
0008fc 0189      movw r16, TLowL_REG
0008fd 7f00      andi r16, 0b11110000
0008fe 701f      andi r17, 0b00001111
0008ff 2b01      or r16, r17
000900 9502      swap r16
000901 1706      cp r16, TTARGET_REG
000902 f4cc      brge logic_off
                 ;
000903 30a1      cpi MODE_REG, MODE_1
000904 f421      brne lo1
                  ;1
000905 9aa8       sbi portc, 0
000906 98aa       cbi portc, 2
000907 9892       cbi portd, 2
000908 9508       ret
                 lo1: 
000909 30a2      cpi MODE_REG, MODE_2
00090a f421      brne lo2
                  ;2
00090b 98a8       cbi portc, 0
00090c 9aaa       sbi portc, 2
00090d 9892       cbi portd, 2
00090e 9508       ret
                 lo2:
00090f 30a3      cpi MODE_REG, MODE_3
000910 f421      brne lo3
                  ;3
000911 9aa8       sbi portc, 0
000912 9aaa       sbi portc, 2
000913 9892       cbi portd, 2
000914 9508       ret
                 lo3:
000915 30a4      cpi MODE_REG, MODE_FAN
000916 f421      brne lo4
                  ;FAN
000917 98a8       cbi portc, 0
000918 98aa       cbi portc, 2
000919 9a92       sbi portd, 2
00091a 9508       ret
                 lo4: 
00091b 6072      sbr ERRORL_REG, 1 << ERRORL_SOFTWARE
                 logic_off:
00091c 98a8       cbi portc, 0
00091d 98aa       cbi portc, 2
00091e 9892       cbi portd, 2
00091f 9508      ret
                 #include "I2C.asm"
                 
                 #define START 0x08
                 #define RESTART 0x10
                 #define SLA_W_ACK 0x18
                 #define SLA_W_NACK 0x20
                 #define BYTE_ACK 0x28
                 #define BYTE_NACK 0x30
                 #define COLLISION 0x38
                 #define SLA_R_ACK 0x40
                 #define SLA_R_NACK 0x48
                 #define RECEIVE_BYTE 0x50
                 #define RECEIVE_BYTE_NACK 0x58
                 
                 #define ADDRESS_READ 0xD1
                 #define ADDRESS_WRITE 0xD0
                 
                 ;in: r17 - addr
                 ;out: r16 - data
                 i2c_read:
                 ;
000920 d030      rcall i2c_send_start
000921 f05e      brts i2c_read_exit
                 ;
000922 d046      rcall i2c_send_address_w
000923 f04e      brts i2c_read_exit
                 ;
000924 d05e      rcall i2c_send_byte
000925 f03e      brts i2c_read_exit
                 ;
000926 d037      rcall i2c_send_repeat_start
000927 f02e      brts i2c_read_exit
                 
000928 d04d      rcall i2c_send_address_r
000929 f01e      brts i2c_read_exit
                 
00092a d072      rcall i2c_receive_byte_nack
00092b f00e      brts i2c_read_exit
                 ;
00092c d081      rcall i2c_send_stop
                 ;
                 i2c_read_exit:
00092d 9508      ret
                 
                 ;in: r17 - addr
                 ;out: r16:17 - data
                 i2c_read_pair:
                 ;
00092e d022      rcall i2c_send_start
00092f f076      brts i2c_read_pair_exit
                 ;
000930 d038      rcall i2c_send_address_w
000931 f066      brts i2c_read_pair_exit
                 ;
000932 d050      rcall i2c_send_byte
000933 f056      brts i2c_read_pair_exit
                 ;
000934 d029      rcall i2c_send_repeat_start
000935 f046      brts i2c_read_pair_exit
                 
000936 d03f      rcall i2c_send_address_r
000937 f036      brts i2c_read_pair_exit
                 
000938 d056      rcall i2c_receive_byte_ack
000939 f026      brts i2c_read_pair_exit
00093a 2f10      mov r17, r16
                 
00093b d061      rcall i2c_receive_byte_nack
00093c f00e      brts i2c_read_pair_exit
                 ;
00093d d070      rcall i2c_send_stop
                 ;
                 i2c_read_pair_exit:
00093e 9508      ret
                 
                 ;in: r16 - data, r17 - addr
                 i2c_write:
00093f 930f      push r16
000940 931f      push r17
                 ;
000941 9300 0076 sts TEMP1, r16
                 ;
000943 d00d      rcall i2c_send_start
000944 f04e      brts i2c_write_exit
                 ;
000945 d023      rcall i2c_send_address_w
000946 f03e      brts i2c_write_exit
                 ;
000947 d03b      rcall i2c_send_byte
000948 f02e      brts i2c_write_exit
                 ;
000949 9110 0076 lds r17, TEMP1
00094b d037      rcall i2c_send_byte
00094c f00e      brts i2c_write_exit
                 ;
00094d d060      rcall i2c_send_stop
                 ;
                 i2c_write_exit:
00094e 911f      pop r17
00094f 910f      pop r16
000950 9508      ret
                 
                 i2c_send_start:
000951 94e8      clt
                 ;set start bit
000952 ea04      ldi r16, (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)
000953 bf06      out TWCR, r16
                 ;wait
                 i1:
000954 b706      in r16,TWCR
000955 ff07      sbrs r16,TWINT
000956 cffd      rjmp i1
                 ;process result
000957 b101      in r16,TWSR
000958 7f08      andi r16, 0xF8
000959 3008      cpi r16, START
00095a f409      brne i2
00095b 9508      ret
                 i2:
00095c 9468      set
00095d 9508      ret
                 
                 i2c_send_repeat_start:
00095e 94e8      clt
                 ;set start bit
00095f ea04      ldi r16, (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)
000960 bf06      out TWCR, r16
                 ;wait
                 i9:
000961 b706      in r16,TWCR
000962 ff07      sbrs r16,TWINT
000963 cffd      rjmp i9
                 ;process result
000964 b101      in r16,TWSR
000965 7f08      andi r16, 0xF8
000966 3100      cpi r16, RESTART
000967 f7a1      brne i2
000968 9508      ret
                 
                 i2c_send_address_w:
000969 94e8      clt
00096a ed00      ldi r16, ADDRESS_WRITE
00096b b903      out TWDR, r16
00096c e804      ldi r16, (1<<TWINT) | (1<<TWEN)
00096d bf06      out TWCR, r16
                 ;
                 i5:
00096e b706      in r16,TWCR
00096f ff07      sbrs r16,TWINT
000970 cffd      rjmp i5
                 ;
000971 b101      in r16,TWSR
000972 7f08      andi r16, 0xF8
000973 3108      cpi r16, SLA_W_ACK
000974 f739      brne i2
000975 9508      ret
                 
                 i2c_send_address_r:
000976 94e8      clt
000977 ed01      ldi r16, ADDRESS_READ
000978 b903      out TWDR, r16
000979 e804      ldi r16, (1<<TWINT) | (1<<TWEN)
00097a bf06      out TWCR, r16
                 ;
                 i3:
00097b b706      in r16,TWCR
00097c ff07      sbrs r16,TWINT
00097d cffd      rjmp i3
                 ;
00097e b101      in r16,TWSR
00097f 7f08      andi r16, 0xF8
000980 3400      cpi r16, SLA_R_ACK
000981 f6d1      brne i2
000982 9508      ret
                 
                 ;data - r17
                 i2c_send_byte:
000983 94e8      clt
000984 b913      out TWDR, r17
000985 e804      ldi r16, (1<<TWINT) | (1<<TWEN)
000986 bf06      out TWCR, r16
                 ;
                 i6:
000987 b706      in r16,TWCR
000988 ff07      sbrs r16,TWINT
000989 cffd      rjmp i6
                 ;
00098a b101      in r16,TWSR
00098b 7f08      andi r16, 0xF8
00098c 3208      cpi r16, BYTE_ACK
00098d f671      brne i2
00098e 9508      ret
                 
                 i2c_receive_byte_ack:
00098f 931f      push r17
                 ;
000990 94e8      clt
000991 ec14      ldi r17, (1<<TWEA) | (1<<TWINT) | (1<<TWEN)
000992 bf16      out TWCR, r17
                 ;
                 i7:
000993 b716      in r17,TWCR
000994 ff17      sbrs r17,TWINT
000995 cffd      rjmp i7
                 ;
000996 b111      in r17,TWSR
000997 7f18      andi r17, 0xF8
000998 3510      cpi r17, RECEIVE_BYTE
000999 f611      brne i2
                 ;
00099a b103      in r16, TWDR
                 ;
00099b 911f      pop r17
00099c 9508      ret
                 
                 i2c_receive_byte_nack:
00099d 931f      push r17
                 ;
00099e 94e8      clt
00099f e814      ldi r17, (1<<TWINT) | (1<<TWEN)
0009a0 bf16      out TWCR, r17
                 ;
                 i8:
0009a1 b716      in r17,TWCR
0009a2 ff17      sbrs r17,TWINT
0009a3 cffd      rjmp i8
                 ;
0009a4 b111      in r17,TWSR
0009a5 7f18      andi r17, 0xF8
0009a6 3518      cpi r17, RECEIVE_BYTE_NACK
0009a7 f419      brne i10
                 ;
0009a8 b103      in r16, TWDR
                 ;
0009a9 911f      pop r17
0009aa 9508      ret
                 i10:
0009ab 9468      set
                 ;
0009ac 911f      pop r17
0009ad 9508      ret
                 
                 i2c_send_stop:
0009ae 930f      push r16
                 ;
0009af e904      ldi r16, (1<<TWINT)|(1<<TWEN)|(1<<TWSTO)
0009b0 bf06      out TWCR, r16
                 ;
                 i12:
0009b1 b706      in r16, TWCR
0009b2 fd04      sbrc r16,TWSTO
0009b3 cffd      rjmp i12
                 ;
0009b4 910f      pop r16
                 #include "DS1307.asm"
0009b5 9508      
                 #define SECONDS_TKREG 0x00
                 #define MINUTES_TKREG 0x01
                 #define HOURS_TKREG 0x02
                 #define DAY_TKREG 0x03
                 #define DATE_TKREG 0x04
                 #define MONTH_TKREG 0x05
                 #define YEAR_TKREG 0x06
                 #define CONTROL_TKREG 0x07
                 ;CUSTOM
                 #define TTARGET_TKREG 0x08
                 #define BRIGHTNESS_TKREG 0x09
                 
                 ds1307_init:
                 ;--start oscillator--
0009b6 e010      ldi r17, SECONDS_TKREG
0009b7 df68      rcall i2c_read
0009b8 f0ee      brts ds1307_err
0009b9 ff07      sbrs r16, 7
0009ba c003      rjmp d1
0009bb 770f      cbr r16, 0b10000000
0009bc e010      ldi r17, SECONDS_TKREG
0009bd df81      rcall i2c_write
                 d1:
0009be e000      ldi r16, 0b00000000
0009bf e017      ldi r17, CONTROL_TKREG
0009c0 df7e      rcall i2c_write
0009c1 f0a6      brts ds1307_err
                 ;--read params--
                 ;modbus address
                 ;target temperatute
0009c2 e018      ldi r17, TTARGET_TKREG
0009c3 df5c      rcall i2c_read
0009c4 f08e      brts ds1307_err
0009c5 2300      tst r16
0009c6 f009      breq readBg
0009c7 2f60      mov TTARGET_REG, r16
                 ;brightness
                 readBg:
0009c8 e019      ldi r17, BRIGHTNESS_TKREG
0009c9 df56      rcall i2c_read
0009ca f05e      brts ds1307_err
0009cb bd03      out OCR2, r16
                 ;
                 ds1307_init_exit:
0009cc 9508      ret
                 
                 ds1307_savetargettemp:
0009cd 2f06      mov r16, TTARGET_REG
0009ce e018      ldi r17, TTARGET_TKREG
0009cf df6f      rcall i2c_write
0009d0 f02e      brts ds1307_err
0009d1 9508      ret
                 
                 ds1307_savebrightness:
0009d2 e019      ldi r17, BRIGHTNESS_TKREG
0009d3 df6b      rcall i2c_write
0009d4 f00e      brts ds1307_err
0009d5 9508      ret
                 
                 ds1307_err:
0009d6 6074      sbr ERRORL_REG, 1 << ERRORL_I2C
                 #include "EEPROM.asm"
0009d7 9508      


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8 register use summary:
r0 :   1 r1 :   0 r2 :  47 r3 :   7 r4 :   2 r5 :   1 r6 :   3 r7 :   1 
r8 :  10 r9 :   8 r10:  11 r11:   9 r12:  11 r13:   9 r14:   6 r15:   6 
r16: 595 r17: 286 r18:  28 r19:  37 r20:  11 r21:   3 r22:  17 r23:  12 
r24:  19 r25:  46 r26:  34 r27:  34 r28:  18 r29:  24 r30:  36 r31:  32 
x  :   4 y  :   0 z  :  37 
Registers used: 33 out of 35 (94.3%)

ATmega8 instruction use summary:
.lds  :   0 .sts  :   0 adc   :   6 add   :  11 adiw  :   1 and   :   0 
andi  :  28 asr   :   0 bclr  :   0 bld   :   1 brbc  :   0 brbs  :   0 
brcc  :   2 brcs  :   0 breq  :  29 brge  :   5 brhc  :   0 brhs  :   0 
brid  :   0 brie  :   0 brlo  :  19 brlt  :   3 brmi  :   0 brne  :  83 
brpl  :   0 brsh  :  20 brtc  :   9 brts  :  27 brvc  :   0 brvs  :   0 
bset  :   0 bst   :   2 cbi   :  29 cbr   :   5 clc   :   3 clh   :   0 
cli   :   0 cln   :   0 clr   :  57 cls   :   0 clt   :  13 clv   :   0 
clz   :   0 com   :   0 cp    :   8 cpc   :   2 cpi   : 114 cpse  :   0 
dec   :  12 eor   :   3 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   1 in    :  36 inc   :  35 ld    :  15 ldd   :   0 ldi   : 182 
lds   :  77 lpm   :   8 lsl   :  10 lsr   :   2 mov   :  51 movw  :  13 
mul   :   1 muls  :   0 mulsu :   0 neg   :   0 nop   :   5 or    :   7 
ori   :   1 out   :  73 pop   : 107 push  :  89 rcall : 144 ret   : 124 
reti  :  14 rjmp  :  94 rol   :   0 ror   :  15 sbc   :   1 sbci  :   0 
sbi   :  25 sbic  :   2 sbis  :   1 sbiw  :   0 sbr   :  33 sbrc  :  20 
sbrs  :  35 sec   :   3 seh   :   0 sei   :   1 sen   :   0 ser   :   4 
ses   :   0 set   :   6 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  21 std   :   0 sts   : 127 sub   :   3 subi  :  11 swap  :   4 
tst   :  30 wdr   :   1 
Instructions used: 66 out of 110 (60.0%)

ATmega8 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0013b2   4250    778   5028    8192  61.4%
[.dseg] 0x000060 0x000060      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
